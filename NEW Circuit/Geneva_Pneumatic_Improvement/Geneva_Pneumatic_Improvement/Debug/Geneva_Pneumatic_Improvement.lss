
Geneva_Pneumatic_Improvement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00001cdc  00001d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bc  00800202  00800202  00001d72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001da4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003519  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d46  00000000  00000000  0000561d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a5f  00000000  00000000  00006363  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  00007dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013ce  00000000  00000000  0000871c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024d6  00000000  00000000  00009aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000bfc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_1>
       8:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__vector_2>
       c:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_3>
      10:	e1 c0       	rjmp	.+450    	; 0x1d4 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__vector_5>
      18:	dd c0       	rjmp	.+442    	; 0x1d4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	db c0       	rjmp	.+438    	; 0x1d4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d9 c0       	rjmp	.+434    	; 0x1d4 <__bad_interrupt>
      22:	00 00       	nop
      24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__bad_interrupt>
      26:	00 00       	nop
      28:	d5 c0       	rjmp	.+426    	; 0x1d4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d3 c0       	rjmp	.+422    	; 0x1d4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d1 c0       	rjmp	.+418    	; 0x1d4 <__bad_interrupt>
      32:	00 00       	nop
      34:	cf c0       	rjmp	.+414    	; 0x1d4 <__bad_interrupt>
      36:	00 00       	nop
      38:	cd c0       	rjmp	.+410    	; 0x1d4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c2       	rjmp	.+1092   	; 0x482 <__vector_15>
      3e:	00 00       	nop
      40:	c9 c0       	rjmp	.+402    	; 0x1d4 <__bad_interrupt>
      42:	00 00       	nop
      44:	c7 c0       	rjmp	.+398    	; 0x1d4 <__bad_interrupt>
      46:	00 00       	nop
      48:	c5 c0       	rjmp	.+394    	; 0x1d4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c3 c0       	rjmp	.+390    	; 0x1d4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c1 c0       	rjmp	.+386    	; 0x1d4 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__vector_21>
      58:	bd c0       	rjmp	.+378    	; 0x1d4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bb c0       	rjmp	.+374    	; 0x1d4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b9 c0       	rjmp	.+370    	; 0x1d4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__vector_25>
      68:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__vector_26>
      6c:	b3 c0       	rjmp	.+358    	; 0x1d4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b1 c0       	rjmp	.+354    	; 0x1d4 <__bad_interrupt>
      72:	00 00       	nop
      74:	af c0       	rjmp	.+350    	; 0x1d4 <__bad_interrupt>
      76:	00 00       	nop
      78:	ad c0       	rjmp	.+346    	; 0x1d4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ab c0       	rjmp	.+342    	; 0x1d4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a9 c0       	rjmp	.+338    	; 0x1d4 <__bad_interrupt>
      82:	00 00       	nop
      84:	a7 c0       	rjmp	.+334    	; 0x1d4 <__bad_interrupt>
      86:	00 00       	nop
      88:	a5 c0       	rjmp	.+330    	; 0x1d4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a3 c0       	rjmp	.+326    	; 0x1d4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a1 c0       	rjmp	.+322    	; 0x1d4 <__bad_interrupt>
      92:	00 00       	nop
      94:	9f c0       	rjmp	.+318    	; 0x1d4 <__bad_interrupt>
      96:	00 00       	nop
      98:	9d c0       	rjmp	.+314    	; 0x1d4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	9b c0       	rjmp	.+310    	; 0x1d4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	99 c0       	rjmp	.+306    	; 0x1d4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	97 c0       	rjmp	.+302    	; 0x1d4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	95 c0       	rjmp	.+298    	; 0x1d4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	93 c0       	rjmp	.+294    	; 0x1d4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	91 c0       	rjmp	.+290    	; 0x1d4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	8f c0       	rjmp	.+286    	; 0x1d4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	8d c0       	rjmp	.+282    	; 0x1d4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8b c0       	rjmp	.+278    	; 0x1d4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	89 c0       	rjmp	.+274    	; 0x1d4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	87 c0       	rjmp	.+270    	; 0x1d4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	85 c0       	rjmp	.+266    	; 0x1d4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__vector_51>
      d0:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__vector_52>
      d4:	7f c0       	rjmp	.+254    	; 0x1d4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__vector_54>
      dc:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_55>
      e0:	79 c0       	rjmp	.+242    	; 0x1d4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	81 04       	cpc	r8, r1
      e6:	ac 04       	cpc	r10, r12
      e8:	33 05       	cpc	r19, r3
      ea:	3f 05       	cpc	r19, r15
      ec:	3f 05       	cpc	r19, r15
      ee:	3f 05       	cpc	r19, r15
      f0:	3f 05       	cpc	r19, r15
      f2:	3f 05       	cpc	r19, r15
      f4:	3f 05       	cpc	r19, r15
      f6:	3f 05       	cpc	r19, r15
      f8:	3f 05       	cpc	r19, r15
      fa:	3f 05       	cpc	r19, r15
      fc:	3f 05       	cpc	r19, r15
      fe:	3f 05       	cpc	r19, r15
     100:	3f 05       	cpc	r19, r15
     102:	3f 05       	cpc	r19, r15
     104:	3f 05       	cpc	r19, r15
     106:	3f 05       	cpc	r19, r15
     108:	3f 05       	cpc	r19, r15
     10a:	3f 05       	cpc	r19, r15
     10c:	3f 05       	cpc	r19, r15
     10e:	3f 05       	cpc	r19, r15
     110:	3f 05       	cpc	r19, r15
     112:	3f 05       	cpc	r19, r15
     114:	3f 05       	cpc	r19, r15
     116:	3f 05       	cpc	r19, r15
     118:	3f 05       	cpc	r19, r15
     11a:	3f 05       	cpc	r19, r15
     11c:	3f 05       	cpc	r19, r15
     11e:	3f 05       	cpc	r19, r15
     120:	3f 05       	cpc	r19, r15
     122:	3f 05       	cpc	r19, r15
     124:	3f 05       	cpc	r19, r15
     126:	3f 05       	cpc	r19, r15
     128:	3f 05       	cpc	r19, r15
     12a:	3f 05       	cpc	r19, r15
     12c:	3f 05       	cpc	r19, r15
     12e:	3f 05       	cpc	r19, r15
     130:	3f 05       	cpc	r19, r15
     132:	3f 05       	cpc	r19, r15
     134:	3f 05       	cpc	r19, r15
     136:	3f 05       	cpc	r19, r15
     138:	3f 05       	cpc	r19, r15
     13a:	3f 05       	cpc	r19, r15
     13c:	3f 05       	cpc	r19, r15
     13e:	3f 05       	cpc	r19, r15
     140:	3f 05       	cpc	r19, r15
     142:	3f 05       	cpc	r19, r15
     144:	3f 05       	cpc	r19, r15
     146:	3f 05       	cpc	r19, r15
     148:	3f 05       	cpc	r19, r15
     14a:	29 05       	cpc	r18, r9
     14c:	3f 05       	cpc	r19, r15
     14e:	3f 05       	cpc	r19, r15
     150:	3f 05       	cpc	r19, r15
     152:	ed 04       	cpc	r14, r13
     154:	1f 05       	cpc	r17, r15
     156:	0d 05       	cpc	r16, r13
     158:	7f 04       	cpc	r7, r15
     15a:	3f 05       	cpc	r19, r15
     15c:	19 05       	cpc	r17, r9
     15e:	13 05       	cpc	r17, r3
     160:	0a 05       	cpc	r16, r10
     162:	3f 05       	cpc	r19, r15
     164:	3f 05       	cpc	r19, r15
     166:	08 05       	cpc	r16, r8
     168:	d7 04       	cpc	r13, r7
     16a:	3f 05       	cpc	r19, r15
     16c:	3f 05       	cpc	r19, r15
     16e:	3f 05       	cpc	r19, r15
     170:	39 05       	cpc	r19, r9

00000172 <__ctors_start>:
     172:	8d 09       	sbc	r24, r13

00000174 <__ctors_end>:
     174:	11 24       	eor	r1, r1
     176:	1f be       	out	0x3f, r1	; 63
     178:	cf ef       	ldi	r28, 0xFF	; 255
     17a:	d1 e2       	ldi	r29, 0x21	; 33
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	cd bf       	out	0x3d, r28	; 61
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0c bf       	out	0x3c, r16	; 60

00000184 <__do_copy_data>:
     184:	12 e0       	ldi	r17, 0x02	; 2
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b2 e0       	ldi	r27, 0x02	; 2
     18a:	ec ed       	ldi	r30, 0xDC	; 220
     18c:	fc e1       	ldi	r31, 0x1C	; 28
     18e:	00 e0       	ldi	r16, 0x00	; 0
     190:	0b bf       	out	0x3b, r16	; 59
     192:	02 c0       	rjmp	.+4      	; 0x198 <__do_copy_data+0x14>
     194:	07 90       	elpm	r0, Z+
     196:	0d 92       	st	X+, r0
     198:	a2 30       	cpi	r26, 0x02	; 2
     19a:	b1 07       	cpc	r27, r17
     19c:	d9 f7       	brne	.-10     	; 0x194 <__do_copy_data+0x10>

0000019e <__do_clear_bss>:
     19e:	23 e0       	ldi	r18, 0x03	; 3
     1a0:	a2 e0       	ldi	r26, 0x02	; 2
     1a2:	b2 e0       	ldi	r27, 0x02	; 2
     1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <.do_clear_bss_start>

000001a6 <.do_clear_bss_loop>:
     1a6:	1d 92       	st	X+, r1

000001a8 <.do_clear_bss_start>:
     1a8:	ae 3b       	cpi	r26, 0xBE	; 190
     1aa:	b2 07       	cpc	r27, r18
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <.do_clear_bss_loop>

000001ae <__do_global_ctors>:
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	ca eb       	ldi	r28, 0xBA	; 186
     1b2:	d0 e0       	ldi	r29, 0x00	; 0
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	06 c0       	rjmp	.+12     	; 0x1c4 <__do_global_ctors+0x16>
     1b8:	21 97       	sbiw	r28, 0x01	; 1
     1ba:	01 09       	sbc	r16, r1
     1bc:	80 2f       	mov	r24, r16
     1be:	fe 01       	movw	r30, r28
     1c0:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__tablejump2__>
     1c4:	c9 3b       	cpi	r28, 0xB9	; 185
     1c6:	d1 07       	cpc	r29, r17
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	08 07       	cpc	r16, r24
     1cc:	a9 f7       	brne	.-22     	; 0x1b8 <__do_global_ctors+0xa>
     1ce:	ba d2       	rcall	.+1396   	; 0x744 <main>
     1d0:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <_exit>

000001d4 <__bad_interrupt>:
     1d4:	15 cf       	rjmp	.-470    	; 0x0 <__vectors>

000001d6 <_ZN7EncoderC1Ev>:
{
	return Encoder_rpm;
}

void Encoder::Encoder_Increase_Angle_Counter(void)
{
     1d6:	fc 01       	movw	r30, r24
     1d8:	16 8a       	std	Z+22, r1	; 0x16
     1da:	17 8a       	std	Z+23, r1	; 0x17
     1dc:	10 8e       	std	Z+24, r1	; 0x18
     1de:	11 8e       	std	Z+25, r1	; 0x19
     1e0:	17 8e       	std	Z+31, r1	; 0x1f
     1e2:	16 8e       	std	Z+30, r1	; 0x1e
     1e4:	11 82       	std	Z+1, r1	; 0x01
     1e6:	10 82       	st	Z, r1
     1e8:	11 a2       	std	Z+33, r1	; 0x21
     1ea:	10 a2       	std	Z+32, r1	; 0x20
     1ec:	13 a2       	std	Z+35, r1	; 0x23
     1ee:	12 a2       	std	Z+34, r1	; 0x22
     1f0:	08 95       	ret

000001f2 <_ZN7Encoder24Encoder_Initialize_TimerEv>:
     1f2:	85 b5       	in	r24, 0x25	; 37
     1f4:	85 60       	ori	r24, 0x05	; 5
     1f6:	85 bd       	out	0x25, r24	; 37
     1f8:	8b e9       	ldi	r24, 0x9B	; 155
     1fa:	87 bd       	out	0x27, r24	; 39
     1fc:	ee e6       	ldi	r30, 0x6E	; 110
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	82 60       	ori	r24, 0x02	; 2
     204:	80 83       	st	Z, r24
     206:	a9 9a       	sbi	0x15, 1	; 21
     208:	16 bc       	out	0x26, r1	; 38
     20a:	08 95       	ret

0000020c <_ZN7Encoder37Encoder_Initialize_External_InterruptEv>:
     20c:	e9 e6       	ldi	r30, 0x69	; 105
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	82 60       	ori	r24, 0x02	; 2
     214:	80 83       	st	Z, r24
     216:	e8 9a       	sbi	0x1d, 0	; 29
     218:	e0 9a       	sbi	0x1c, 0	; 28
     21a:	08 95       	ret

0000021c <_ZN7Encoder18Encoder_InitializeEv>:
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	ec 01       	movw	r28, r24
     222:	50 98       	cbi	0x0a, 0	; 10
     224:	08 98       	cbi	0x01, 0	; 1
     226:	f2 df       	rcall	.-28     	; 0x20c <_ZN7Encoder37Encoder_Initialize_External_InterruptEv>
     228:	ce 01       	movw	r24, r28
     22a:	e3 df       	rcall	.-58     	; 0x1f2 <_ZN7Encoder24Encoder_Initialize_TimerEv>
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv>:
     232:	fc 01       	movw	r30, r24
     234:	00 9b       	sbis	0x00, 0	; 0
     236:	1c c0       	rjmp	.+56     	; 0x270 <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv+0x3e>
     238:	86 89       	ldd	r24, Z+22	; 0x16
     23a:	97 89       	ldd	r25, Z+23	; 0x17
     23c:	a0 8d       	ldd	r26, Z+24	; 0x18
     23e:	b1 8d       	ldd	r27, Z+25	; 0x19
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	a1 09       	sbc	r26, r1
     244:	b1 09       	sbc	r27, r1
     246:	86 8b       	std	Z+22, r24	; 0x16
     248:	97 8b       	std	Z+23, r25	; 0x17
     24a:	a0 8f       	std	Z+24, r26	; 0x18
     24c:	b1 8f       	std	Z+25, r27	; 0x19
     24e:	82 8d       	ldd	r24, Z+26	; 0x1a
     250:	93 8d       	ldd	r25, Z+27	; 0x1b
     252:	a4 8d       	ldd	r26, Z+28	; 0x1c
     254:	b5 8d       	ldd	r27, Z+29	; 0x1d
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	a1 09       	sbc	r26, r1
     25a:	b1 09       	sbc	r27, r1
     25c:	82 8f       	std	Z+26, r24	; 0x1a
     25e:	93 8f       	std	Z+27, r25	; 0x1b
     260:	a4 8f       	std	Z+28, r26	; 0x1c
     262:	b5 8f       	std	Z+29, r27	; 0x1d
     264:	86 8d       	ldd	r24, Z+30	; 0x1e
     266:	97 8d       	ldd	r25, Z+31	; 0x1f
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	97 8f       	std	Z+31, r25	; 0x1f
     26c:	86 8f       	std	Z+30, r24	; 0x1e
     26e:	08 95       	ret
     270:	00 99       	sbic	0x00, 0	; 0
     272:	1b c0       	rjmp	.+54     	; 0x2aa <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv+0x78>
     274:	86 89       	ldd	r24, Z+22	; 0x16
     276:	97 89       	ldd	r25, Z+23	; 0x17
     278:	a0 8d       	ldd	r26, Z+24	; 0x18
     27a:	b1 8d       	ldd	r27, Z+25	; 0x19
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	a1 1d       	adc	r26, r1
     280:	b1 1d       	adc	r27, r1
     282:	86 8b       	std	Z+22, r24	; 0x16
     284:	97 8b       	std	Z+23, r25	; 0x17
     286:	a0 8f       	std	Z+24, r26	; 0x18
     288:	b1 8f       	std	Z+25, r27	; 0x19
     28a:	82 8d       	ldd	r24, Z+26	; 0x1a
     28c:	93 8d       	ldd	r25, Z+27	; 0x1b
     28e:	a4 8d       	ldd	r26, Z+28	; 0x1c
     290:	b5 8d       	ldd	r27, Z+29	; 0x1d
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	a1 1d       	adc	r26, r1
     296:	b1 1d       	adc	r27, r1
     298:	82 8f       	std	Z+26, r24	; 0x1a
     29a:	93 8f       	std	Z+27, r25	; 0x1b
     29c:	a4 8f       	std	Z+28, r26	; 0x1c
     29e:	b5 8f       	std	Z+29, r27	; 0x1d
     2a0:	86 8d       	ldd	r24, Z+30	; 0x1e
     2a2:	97 8d       	ldd	r25, Z+31	; 0x1f
     2a4:	01 96       	adiw	r24, 0x01	; 1
     2a6:	97 8f       	std	Z+31, r25	; 0x1f
     2a8:	86 8f       	std	Z+30, r24	; 0x1e
     2aa:	08 95       	ret

000002ac <_ZN7Encoder17Encoder_Get_angleEv>:

}

int Encoder::Encoder_Get_angle()
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	ec 01       	movw	r28, r24
	Angle = (float(Angle_count)*(float(ENCODER_MOTOR_FACTOR)/ENCODER_PPR))*360;
     2b2:	6e 8d       	ldd	r22, Y+30	; 0x1e
     2b4:	7f 8d       	ldd	r23, Y+31	; 0x1f
     2b6:	07 2e       	mov	r0, r23
     2b8:	00 0c       	add	r0, r0
     2ba:	88 0b       	sbc	r24, r24
     2bc:	99 0b       	sbc	r25, r25
     2be:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__floatsisf>
     2c2:	21 e8       	ldi	r18, 0x81	; 129
     2c4:	30 e8       	ldi	r19, 0x80	; 128
     2c6:	40 e8       	ldi	r20, 0x80	; 128
     2c8:	5a e3       	ldi	r21, 0x3A	; 58
     2ca:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	44 eb       	ldi	r20, 0xB4	; 180
     2d4:	53 e4       	ldi	r21, 0x43	; 67
     2d6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     2da:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__fixsfsi>
     2de:	79 83       	std	Y+1, r23	; 0x01
     2e0:	68 83       	st	Y, r22
	return Angle;
}
     2e2:	cb 01       	movw	r24, r22
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <_ZN7Encoder20Encoder_update_SpeedEv>:

void Encoder::Encoder_update_Speed()
{
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	fc 01       	movw	r30, r24
	EncoderBuffer[3] = EncoderBuffer[2];
     2f8:	02 85       	ldd	r16, Z+10	; 0x0a
     2fa:	13 85       	ldd	r17, Z+11	; 0x0b
     2fc:	24 85       	ldd	r18, Z+12	; 0x0c
     2fe:	35 85       	ldd	r19, Z+13	; 0x0d
     300:	06 87       	std	Z+14, r16	; 0x0e
     302:	17 87       	std	Z+15, r17	; 0x0f
     304:	20 8b       	std	Z+16, r18	; 0x10
     306:	31 8b       	std	Z+17, r19	; 0x11
	EncoderBuffer[2] = EncoderBuffer[1];
     308:	c6 80       	ldd	r12, Z+6	; 0x06
     30a:	d7 80       	ldd	r13, Z+7	; 0x07
     30c:	e0 84       	ldd	r14, Z+8	; 0x08
     30e:	f1 84       	ldd	r15, Z+9	; 0x09
     310:	c2 86       	std	Z+10, r12	; 0x0a
     312:	d3 86       	std	Z+11, r13	; 0x0b
     314:	e4 86       	std	Z+12, r14	; 0x0c
     316:	f5 86       	std	Z+13, r15	; 0x0d
	EncoderBuffer[1] = EncoderBuffer[0];
     318:	42 81       	ldd	r20, Z+2	; 0x02
     31a:	53 81       	ldd	r21, Z+3	; 0x03
     31c:	64 81       	ldd	r22, Z+4	; 0x04
     31e:	75 81       	ldd	r23, Z+5	; 0x05
     320:	46 83       	std	Z+6, r20	; 0x06
     322:	57 83       	std	Z+7, r21	; 0x07
     324:	60 87       	std	Z+8, r22	; 0x08
     326:	71 87       	std	Z+9, r23	; 0x09
	EncoderBuffer[0] = Count;
     328:	86 89       	ldd	r24, Z+22	; 0x16
     32a:	97 89       	ldd	r25, Z+23	; 0x17
     32c:	a0 8d       	ldd	r26, Z+24	; 0x18
     32e:	b1 8d       	ldd	r27, Z+25	; 0x19
     330:	82 83       	std	Z+2, r24	; 0x02
     332:	93 83       	std	Z+3, r25	; 0x03
     334:	a4 83       	std	Z+4, r26	; 0x04
     336:	b5 83       	std	Z+5, r27	; 0x05
	speed   =  ((EncoderBuffer[0]+EncoderBuffer[1]+EncoderBuffer[2]+EncoderBuffer[3])>>2);
     338:	48 0f       	add	r20, r24
     33a:	59 1f       	adc	r21, r25
     33c:	6a 1f       	adc	r22, r26
     33e:	7b 1f       	adc	r23, r27
     340:	d7 01       	movw	r26, r14
     342:	c6 01       	movw	r24, r12
     344:	84 0f       	add	r24, r20
     346:	95 1f       	adc	r25, r21
     348:	a6 1f       	adc	r26, r22
     34a:	b7 1f       	adc	r27, r23
     34c:	80 0f       	add	r24, r16
     34e:	91 1f       	adc	r25, r17
     350:	a2 1f       	adc	r26, r18
     352:	b3 1f       	adc	r27, r19
     354:	b5 95       	asr	r27
     356:	a7 95       	ror	r26
     358:	97 95       	ror	r25
     35a:	87 95       	ror	r24
     35c:	b5 95       	asr	r27
     35e:	a7 95       	ror	r26
     360:	97 95       	ror	r25
     362:	87 95       	ror	r24
     364:	82 8b       	std	Z+18, r24	; 0x12
     366:	93 8b       	std	Z+19, r25	; 0x13
     368:	a4 8b       	std	Z+20, r26	; 0x14
     36a:	b5 8b       	std	Z+21, r27	; 0x15
	Count = 0;
     36c:	16 8a       	std	Z+22, r1	; 0x16
     36e:	17 8a       	std	Z+23, r1	; 0x17
     370:	10 8e       	std	Z+24, r1	; 0x18
     372:	11 8e       	std	Z+25, r1	; 0x19
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	08 95       	ret

00000382 <_ZN13GenevaEncoder25Initialize_Geneva_EncoderEv>:
		int Geneva_Angle;
	public:
		GenevaEncoder();
		void Initialize_Geneva_Encoder(void);
		inline void Inc_Count(){Encoder_Count++;};
		inline void Dcr_Count(){Encoder_Count--;};
     382:	6c 98       	cbi	0x0d, 4	; 13
     384:	09 98       	cbi	0x01, 1	; 1
     386:	6c 98       	cbi	0x0d, 4	; 13
     388:	74 9a       	sbi	0x0e, 4	; 14
     38a:	09 98       	cbi	0x01, 1	; 1
     38c:	11 9a       	sbi	0x02, 1	; 2
     38e:	ea e6       	ldi	r30, 0x6A	; 106
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	82 60       	ori	r24, 0x02	; 2
     396:	80 83       	st	Z, r24
     398:	ec 9a       	sbi	0x1d, 4	; 29
     39a:	e4 9a       	sbi	0x1c, 4	; 28
     39c:	08 95       	ret

0000039e <_ZN13GenevaEncoderC1Ev>:
     39e:	fc 01       	movw	r30, r24
     3a0:	11 82       	std	Z+1, r1	; 0x01
     3a2:	10 82       	st	Z, r1
     3a4:	ee cf       	rjmp	.-36     	; 0x382 <_ZN13GenevaEncoder25Initialize_Geneva_EncoderEv>
     3a6:	08 95       	ret

000003a8 <_ZN13GenevaEncoder16Enoder_Get_AngleEv>:
		Dcr_Count();
	}
}

int GenevaEncoder::Enoder_Get_Angle()
{
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ec 01       	movw	r28, r24
	Geneva_Angle = (float(Encoder_Count)/PPR)*360;
     3ae:	68 81       	ld	r22, Y
     3b0:	79 81       	ldd	r23, Y+1	; 0x01
     3b2:	07 2e       	mov	r0, r23
     3b4:	00 0c       	add	r0, r0
     3b6:	88 0b       	sbc	r24, r24
     3b8:	99 0b       	sbc	r25, r25
     3ba:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__floatsisf>
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	44 e3       	ldi	r20, 0x34	; 52
     3c4:	53 e4       	ldi	r21, 0x43	; 67
     3c6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__divsf3>
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	44 eb       	ldi	r20, 0xB4	; 180
     3d0:	53 e4       	ldi	r21, 0x43	; 67
     3d2:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulsf3>
     3d6:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__fixsfsi>
     3da:	7f 83       	std	Y+7, r23	; 0x07
     3dc:	6e 83       	std	Y+6, r22	; 0x06
	return Geneva_Angle;
}
     3de:	cb 01       	movw	r24, r22
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <_ZN11GenevaMotor7InitPWMEv>:
	SetOcrValue(0);
}

void GenevaMotor::InitPWM()
{
	OUTPUT(DD_F_G);
     3e6:	24 9a       	sbi	0x04, 4	; 4
	OUTPUT(DD_B_G);
     3e8:	27 9a       	sbi	0x04, 7	; 4
	
	OUTPUT(DD_PWM_G);
     3ea:	25 9a       	sbi	0x04, 5	; 4
	 
	PWM_TCCRA_G |= (1 << PWM_G_COM1)| (1 << PWM_G_WGM1);                                   //Fast PWM
     3ec:	e0 e8       	ldi	r30, 0x80	; 128
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	82 68       	ori	r24, 0x82	; 130
     3f4:	80 83       	st	Z, r24
	
	
	PWM_TCCRB_G |= (1 << PWM_G_WGM2) | (1 << PWM_G_WGM3) | (1 << PWM_G_CS1);
     3f6:	e1 e8       	ldi	r30, 0x81	; 129
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	8a 61       	ori	r24, 0x1A	; 26
     3fe:	80 83       	st	Z, r24
	PWM_ICR_G    = ICR_TOP;
     400:	89 ef       	ldi	r24, 0xF9	; 249
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	90 93 87 00 	sts	0x0087, r25
     408:	80 93 86 00 	sts	0x0086, r24
     40c:	08 95       	ret

0000040e <_ZN11GenevaMotor19SetForwardDirectionEv>:
}

void GenevaMotor::SetForwardDirection()
{
	SET(DD_F_G);
     40e:	2c 9a       	sbi	0x05, 4	; 5
	CLEAR(DD_B_G);
     410:	2f 98       	cbi	0x05, 7	; 5
     412:	08 95       	ret

00000414 <_ZN11GenevaMotor19SetReverseDirectionEv>:
}

void GenevaMotor::SetReverseDirection()
{
	CLEAR(DD_F_G);
     414:	2c 98       	cbi	0x05, 4	; 5
	SET(DD_B_G);
     416:	2f 9a       	sbi	0x05, 7	; 5
     418:	08 95       	ret

0000041a <_ZN11GenevaMotor9StopMotorEv>:
}

void GenevaMotor::StopMotor()
{
	SET(DD_F_G);
     41a:	2c 9a       	sbi	0x05, 4	; 5
	SET(DD_B_G);
     41c:	2f 9a       	sbi	0x05, 7	; 5
	
	PWM_OCR_G = 0;
     41e:	10 92 89 00 	sts	0x0089, r1
     422:	10 92 88 00 	sts	0x0088, r1
     426:	08 95       	ret

00000428 <_ZN11GenevaMotor11SetOcrValueEi>:
}

void GenevaMotor::SetOcrValue(int ocr)
{
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	8c 01       	movw	r16, r24
     432:	eb 01       	movw	r28, r22
	if (ocr > 0)
     434:	1c 16       	cp	r1, r28
     436:	1d 06       	cpc	r1, r29
     438:	0c f4       	brge	.+2      	; 0x43c <_ZN11GenevaMotor11SetOcrValueEi+0x14>
		SetForwardDirection();
     43a:	e9 df       	rcall	.-46     	; 0x40e <_ZN11GenevaMotor19SetForwardDirectionEv>
	if(ocr >= MAX_VALUE)
     43c:	c9 3f       	cpi	r28, 0xF9	; 249
     43e:	d1 05       	cpc	r29, r1
     440:	44 f4       	brge	.+16     	; 0x452 <_ZN11GenevaMotor11SetOcrValueEi+0x2a>
		ocr = MAX_VALUE;
		
	if (ocr < 0)
     442:	dd 23       	and	r29, r29
     444:	44 f4       	brge	.+16     	; 0x456 <_ZN11GenevaMotor11SetOcrValueEi+0x2e>
	{
		ocr = -ocr;
     446:	d1 95       	neg	r29
     448:	c1 95       	neg	r28
     44a:	d1 09       	sbc	r29, r1
		SetReverseDirection();
     44c:	c8 01       	movw	r24, r16
     44e:	e2 df       	rcall	.-60     	; 0x414 <_ZN11GenevaMotor19SetReverseDirectionEv>
     450:	02 c0       	rjmp	.+4      	; 0x456 <_ZN11GenevaMotor11SetOcrValueEi+0x2e>
void GenevaMotor::SetOcrValue(int ocr)
{
	if (ocr > 0)
		SetForwardDirection();
	if(ocr >= MAX_VALUE)
		ocr = MAX_VALUE;
     452:	c9 ef       	ldi	r28, 0xF9	; 249
     454:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ocr = -ocr;
		SetReverseDirection();
	}
	
	PWM_OCR_G = ocr;
     456:	d0 93 89 00 	sts	0x0089, r29
     45a:	c0 93 88 00 	sts	0x0088, r28
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	08 95       	ret

00000468 <_ZN11GenevaMotor23Initialize_Geneva_MotorEv>:


#include "GenevaMotor.h"

void GenevaMotor::Initialize_Geneva_Motor()
{
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	ec 01       	movw	r28, r24
	InitPWM();
     46e:	bb df       	rcall	.-138    	; 0x3e6 <_ZN11GenevaMotor7InitPWMEv>
	StopMotor();
     470:	ce 01       	movw	r24, r28
     472:	d3 df       	rcall	.-90     	; 0x41a <_ZN11GenevaMotor9StopMotorEv>
	SetOcrValue(0);
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	ce 01       	movw	r24, r28
     47a:	d6 df       	rcall	.-84     	; 0x428 <_ZN11GenevaMotor11SetOcrValueEi>
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <__vector_15>:
void Initialize_Global_Timer()
{
	TCNT2 = 0;
	TCCR2B |= (1<<CS20)|(1<<CS21)|(1<<CS22);
	TIMSK2 |= (1<<TOIE2);
	TIFR2  |= (1<<TOV2);
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	8f 93       	push	r24
     48e:	9f 93       	push	r25
     490:	af 93       	push	r26
     492:	bf 93       	push	r27
     494:	80 91 eb 02 	lds	r24, 0x02EB
     498:	90 91 ec 02 	lds	r25, 0x02EC
     49c:	a0 91 ed 02 	lds	r26, 0x02ED
     4a0:	b0 91 ee 02 	lds	r27, 0x02EE
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	a1 1d       	adc	r26, r1
     4a8:	b1 1d       	adc	r27, r1
     4aa:	80 93 eb 02 	sts	0x02EB, r24
     4ae:	90 93 ec 02 	sts	0x02EC, r25
     4b2:	a0 93 ed 02 	sts	0x02ED, r26
     4b6:	b0 93 ee 02 	sts	0x02EE, r27
     4ba:	80 91 e7 02 	lds	r24, 0x02E7
     4be:	90 91 e8 02 	lds	r25, 0x02E8
     4c2:	a0 91 e9 02 	lds	r26, 0x02E9
     4c6:	b0 91 ea 02 	lds	r27, 0x02EA
     4ca:	03 96       	adiw	r24, 0x03	; 3
     4cc:	a1 1d       	adc	r26, r1
     4ce:	b1 1d       	adc	r27, r1
     4d0:	80 93 e7 02 	sts	0x02E7, r24
     4d4:	90 93 e8 02 	sts	0x02E8, r25
     4d8:	a0 93 e9 02 	sts	0x02E9, r26
     4dc:	b0 93 ea 02 	sts	0x02EA, r27
     4e0:	80 91 e7 02 	lds	r24, 0x02E7
     4e4:	90 91 e8 02 	lds	r25, 0x02E8
     4e8:	a0 91 e9 02 	lds	r26, 0x02E9
     4ec:	b0 91 ea 02 	lds	r27, 0x02EA
     4f0:	8d 37       	cpi	r24, 0x7D	; 125
     4f2:	91 05       	cpc	r25, r1
     4f4:	a1 05       	cpc	r26, r1
     4f6:	b1 05       	cpc	r27, r1
     4f8:	38 f1       	brcs	.+78     	; 0x548 <__vector_15+0xc6>
     4fa:	80 91 e7 02 	lds	r24, 0x02E7
     4fe:	90 91 e8 02 	lds	r25, 0x02E8
     502:	a0 91 e9 02 	lds	r26, 0x02E9
     506:	b0 91 ea 02 	lds	r27, 0x02EA
     50a:	8d 57       	subi	r24, 0x7D	; 125
     50c:	91 09       	sbc	r25, r1
     50e:	a1 09       	sbc	r26, r1
     510:	b1 09       	sbc	r27, r1
     512:	80 93 e7 02 	sts	0x02E7, r24
     516:	90 93 e8 02 	sts	0x02E8, r25
     51a:	a0 93 e9 02 	sts	0x02E9, r26
     51e:	b0 93 ea 02 	sts	0x02EA, r27
     522:	80 91 eb 02 	lds	r24, 0x02EB
     526:	90 91 ec 02 	lds	r25, 0x02EC
     52a:	a0 91 ed 02 	lds	r26, 0x02ED
     52e:	b0 91 ee 02 	lds	r27, 0x02EE
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	a1 1d       	adc	r26, r1
     536:	b1 1d       	adc	r27, r1
     538:	80 93 eb 02 	sts	0x02EB, r24
     53c:	90 93 ec 02 	sts	0x02EC, r25
     540:	a0 93 ed 02 	sts	0x02ED, r26
     544:	b0 93 ee 02 	sts	0x02EE, r27
     548:	bf 91       	pop	r27
     54a:	af 91       	pop	r26
     54c:	9f 91       	pop	r25
     54e:	8f 91       	pop	r24
     550:	0f 90       	pop	r0
     552:	0f be       	out	0x3f, r0	; 63
     554:	0f 90       	pop	r0
     556:	1f 90       	pop	r1
     558:	18 95       	reti

0000055a <_Z6millisv>:
     55a:	2f b7       	in	r18, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	60 91 eb 02 	lds	r22, 0x02EB
     562:	70 91 ec 02 	lds	r23, 0x02EC
     566:	80 91 ed 02 	lds	r24, 0x02ED
     56a:	90 91 ee 02 	lds	r25, 0x02EE
     56e:	2f bf       	out	0x3f, r18	; 63
     570:	08 95       	ret

00000572 <_Z21initialise_timeperiodv>:
     572:	e1 eb       	ldi	r30, 0xB1	; 177
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	84 60       	ori	r24, 0x04	; 4
     57a:	80 83       	st	Z, r24
     57c:	e0 e7       	ldi	r30, 0x70	; 112
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	81 60       	ori	r24, 0x01	; 1
     584:	80 83       	st	Z, r24
     586:	10 92 b2 00 	sts	0x00B2, r1
     58a:	08 95       	ret

0000058c <_Z10Run_Genevav>:
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	80 93 dd 02 	sts	0x02DD, r24
     592:	80 ed       	ldi	r24, 0xD0	; 208
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	90 93 49 02 	sts	0x0249, r25
     59a:	80 93 48 02 	sts	0x0248, r24
     59e:	08 95       	ret

000005a0 <_Z35Initialize_Throwing12TCRT_Interruptv>:
     5a0:	51 98       	cbi	0x0a, 1	; 10
     5a2:	59 9a       	sbi	0x0b, 1	; 11
     5a4:	e9 e6       	ldi	r30, 0x69	; 105
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	80 62       	ori	r24, 0x20	; 32
     5ac:	80 83       	st	Z, r24
     5ae:	ea 9a       	sbi	0x1d, 2	; 29
     5b0:	e2 9a       	sbi	0x1c, 2	; 28
     5b2:	08 95       	ret

000005b4 <_Z34Initialize_Throwing3TCRT_Interruptv>:
     5b4:	52 98       	cbi	0x0a, 2	; 10
     5b6:	5a 9a       	sbi	0x0b, 2	; 11
     5b8:	e9 e6       	ldi	r30, 0x69	; 105
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	88 60       	ori	r24, 0x08	; 8
     5c0:	80 83       	st	Z, r24
     5c2:	e9 9a       	sbi	0x1d, 1	; 29
     5c4:	e1 9a       	sbi	0x1c, 1	; 28
     5c6:	08 95       	ret

000005c8 <_Z14Initialize_Allv>:
     5c8:	eb df       	rcall	.-42     	; 0x5a0 <_Z35Initialize_Throwing12TCRT_Interruptv>
     5ca:	f4 df       	rcall	.-24     	; 0x5b4 <_Z34Initialize_Throwing3TCRT_Interruptv>
     5cc:	84 ed       	ldi	r24, 0xD4	; 212
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	05 d7       	rcall	.+3594   	; 0x13dc <_ZN5Motor10InitialiseEv>
     5d2:	80 eb       	ldi	r24, 0xB0	; 176
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	22 de       	rcall	.-956    	; 0x21c <_ZN7Encoder18Encoder_InitializeEv>
     5d8:	85 ed       	ldi	r24, 0xD5	; 213
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	45 df       	rcall	.-374    	; 0x468 <_ZN11GenevaMotor23Initialize_Geneva_MotorEv>
     5de:	88 ea       	ldi	r24, 0xA8	; 168
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	cf ce       	rjmp	.-610    	; 0x382 <_ZN13GenevaEncoder25Initialize_Geneva_EncoderEv>
     5e4:	08 95       	ret

000005e6 <_Z27Initial_Position_Of_The_ARMv>:
}

void Initial_Position_Of_The_ARM(void)
{
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
	sei();
     5ea:	78 94       	sei
	while(!READ(Throwing_3TCRT))
     5ec:	4a 99       	sbic	0x09, 2	; 9
     5ee:	07 c0       	rjmp	.+14     	; 0x5fe <_Z27Initial_Position_Of_The_ARMv+0x18>
	{
		M.SetOcrValue(-60);
     5f0:	64 ec       	ldi	r22, 0xC4	; 196
     5f2:	7f ef       	ldi	r23, 0xFF	; 255
     5f4:	84 ed       	ldi	r24, 0xD4	; 212
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	d1 d6       	rcall	.+3490   	; 0x139c <_ZN5Motor11SetOcrValueEi>
}

void Initial_Position_Of_The_ARM(void)
{
	sei();
	while(!READ(Throwing_3TCRT))
     5fa:	4a 9b       	sbis	0x09, 2	; 9
     5fc:	f9 cf       	rjmp	.-14     	; 0x5f0 <_Z27Initial_Position_Of_The_ARMv+0xa>
	{
		M.SetOcrValue(-60);
	}
	E.Angle_count = 0;
     5fe:	c0 eb       	ldi	r28, 0xB0	; 176
     600:	d2 e0       	ldi	r29, 0x02	; 2
     602:	1f 8e       	std	Y+31, r1	; 0x1f
     604:	1e 8e       	std	Y+30, r1	; 0x1e
	M.StopMotor();
     606:	84 ed       	ldi	r24, 0xD4	; 212
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	bb d6       	rcall	.+3446   	; 0x1382 <_ZN5Motor9StopMotorEv>
	TCRTRevolutionCount = 0;
     60c:	10 92 1a 02 	sts	0x021A, r1
     610:	10 92 19 02 	sts	0x0219, r1
	E.ExtraCount = 0;
     614:	1a 8e       	std	Y+26, r1	; 0x1a
     616:	1b 8e       	std	Y+27, r1	; 0x1b
     618:	1c 8e       	std	Y+28, r1	; 0x1c
     61a:	1d 8e       	std	Y+29, r1	; 0x1d
				kd=KD;
				Set_PID(kp,ki,kd);
			}
			void SetSetPoint(float x)
			{
				setPoint = x;
     61c:	e9 e7       	ldi	r30, 0x79	; 121
     61e:	f2 e0       	ldi	r31, 0x02	; 2
     620:	16 a6       	std	Z+46, r1	; 0x2e
     622:	15 a6       	std	Z+45, r1	; 0x2d
     624:	8e 8d       	ldd	r24, Y+30	; 0x1e
     626:	9f 8d       	ldd	r25, Y+31	; 0x1f
     628:	90 93 78 02 	sts	0x0278, r25
     62c:	80 93 77 02 	sts	0x0277, r24
	
	
	Speed_PID.SetSetPoint(0);
	Angle_PID.SetSetPoint(E.Angle_count);
	PIDFlag = false;
     630:	10 92 00 02 	sts	0x0200, r1
	Speed_PID.lastinput = 0;
     634:	15 a2       	std	Z+37, r1	; 0x25
     636:	16 a2       	std	Z+38, r1	; 0x26
     638:	17 a2       	std	Z+39, r1	; 0x27
     63a:	10 a6       	std	Z+40, r1	; 0x28
	Speed_PID.output    = 0;
     63c:	15 8e       	std	Z+29, r1	; 0x1d
     63e:	16 8e       	std	Z+30, r1	; 0x1e
     640:	17 8e       	std	Z+31, r1	; 0x1f
     642:	10 a2       	std	Z+32, r1	; 0x20
	Speed_PID.Iterm     = 0;
     644:	11 a2       	std	Z+33, r1	; 0x21
     646:	12 a2       	std	Z+34, r1	; 0x22
     648:	13 a2       	std	Z+35, r1	; 0x23
     64a:	14 a2       	std	Z+36, r1	; 0x24
}
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <_Z8GoToHomev>:

void GoToHome()
{
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
	sei();
     656:	78 94       	sei
	while(!READ(Home_TCRT))
     658:	4b 99       	sbic	0x09, 3	; 9
     65a:	09 c0       	rjmp	.+18     	; 0x66e <_Z8GoToHomev+0x1c>
	{
		M.SetOcrValue(-50);	
     65c:	6e ec       	ldi	r22, 0xCE	; 206
     65e:	7f ef       	ldi	r23, 0xFF	; 255
     660:	84 ed       	ldi	r24, 0xD4	; 212
     662:	92 e0       	ldi	r25, 0x02	; 2
     664:	9b d6       	rcall	.+3382   	; 0x139c <_ZN5Motor11SetOcrValueEi>
		ReachedHome = false;
     666:	10 92 d8 02 	sts	0x02D8, r1
}

void GoToHome()
{
	sei();
	while(!READ(Home_TCRT))
     66a:	4b 9b       	sbis	0x09, 3	; 9
     66c:	f7 cf       	rjmp	.-18     	; 0x65c <_Z8GoToHomev+0xa>
	{
		M.SetOcrValue(-50);	
		ReachedHome = false;
	}
	E.Angle_count = 0;
     66e:	c0 eb       	ldi	r28, 0xB0	; 176
     670:	d2 e0       	ldi	r29, 0x02	; 2
     672:	1f 8e       	std	Y+31, r1	; 0x1f
     674:	1e 8e       	std	Y+30, r1	; 0x1e
	M.StopMotor();
     676:	84 ed       	ldi	r24, 0xD4	; 212
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	83 d6       	rcall	.+3334   	; 0x1382 <_ZN5Motor9StopMotorEv>
	
	TCRTRevolutionCount = 0;
     67c:	10 92 1a 02 	sts	0x021A, r1
     680:	10 92 19 02 	sts	0x0219, r1
	E.ExtraCount = 0;
     684:	1a 8e       	std	Y+26, r1	; 0x1a
     686:	1b 8e       	std	Y+27, r1	; 0x1b
     688:	1c 8e       	std	Y+28, r1	; 0x1c
     68a:	1d 8e       	std	Y+29, r1	; 0x1d
     68c:	e9 e7       	ldi	r30, 0x79	; 121
     68e:	f2 e0       	ldi	r31, 0x02	; 2
     690:	16 a6       	std	Z+46, r1	; 0x2e
     692:	15 a6       	std	Z+45, r1	; 0x2d
     694:	10 92 78 02 	sts	0x0278, r1
     698:	10 92 77 02 	sts	0x0277, r1
	Speed_PID.SetSetPoint(0);
	Angle_PID.SetSetPoint(0);
	PIDFlag = false;
     69c:	10 92 00 02 	sts	0x0200, r1
	Speed_PID.lastinput  = 0;
     6a0:	15 a2       	std	Z+37, r1	; 0x25
     6a2:	16 a2       	std	Z+38, r1	; 0x26
     6a4:	17 a2       	std	Z+39, r1	; 0x27
     6a6:	10 a6       	std	Z+40, r1	; 0x28
	Speed_PID.Iterm      = 0;
     6a8:	11 a2       	std	Z+33, r1	; 0x21
     6aa:	12 a2       	std	Z+34, r1	; 0x22
     6ac:	13 a2       	std	Z+35, r1	; 0x23
     6ae:	14 a2       	std	Z+36, r1	; 0x24
	Speed_PID.output     = 0;
     6b0:	15 8e       	std	Z+29, r1	; 0x1d
     6b2:	16 8e       	std	Z+30, r1	; 0x1e
     6b4:	17 8e       	std	Z+31, r1	; 0x1f
     6b6:	10 a2       	std	Z+32, r1	; 0x20
		
	Stopping = true;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 93 d7 02 	sts	0x02D7, r24
	
	if (!Golden_Rack && !ShuttleCockArm_home)
     6be:	80 91 d9 02 	lds	r24, 0x02D9
     6c2:	81 11       	cpse	r24, r1
     6c4:	10 c0       	rjmp	.+32     	; 0x6e6 <_Z8GoToHomev+0x94>
     6c6:	80 91 d6 02 	lds	r24, 0x02D6
     6ca:	81 11       	cpse	r24, r1
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <_Z8GoToHomev+0x94>
	{
		ShuttleCockArm_home = true;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	80 93 d6 02 	sts	0x02D6, r24
		previous_time_gone_home = millis();
     6d4:	42 df       	rcall	.-380    	; 0x55a <_Z6millisv>
     6d6:	60 93 15 02 	sts	0x0215, r22
     6da:	70 93 16 02 	sts	0x0216, r23
     6de:	80 93 17 02 	sts	0x0217, r24
     6e2:	90 93 18 02 	sts	0x0218, r25
	}	
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <_Z12FlyingDragonv>:
	}
}

void FlyingDragon()
{
	TZ3 = true;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	80 93 df 02 	sts	0x02DF, r24
	TZ1 = false;
     6f2:	10 92 e1 02 	sts	0x02E1, r1
	TZ2 = false;
     6f6:	10 92 e0 02 	sts	0x02E0, r1
	motor_speed = -48;         //56
     6fa:	20 ed       	ldi	r18, 0xD0	; 208
     6fc:	3f ef       	ldi	r19, 0xFF	; 255
     6fe:	30 93 0f 02 	sts	0x020F, r19
     702:	20 93 0e 02 	sts	0x020E, r18
	Goflag = true;
     706:	80 93 e4 02 	sts	0x02E4, r24
	PIDFlag = true;
     70a:	80 93 00 02 	sts	0x0200, r24
	Ramp_up_flag = true;
     70e:	80 93 e3 02 	sts	0x02E3, r24
     712:	80 91 12 02 	lds	r24, 0x0212
     716:	90 91 13 02 	lds	r25, 0x0213
     71a:	90 93 a7 02 	sts	0x02A7, r25
     71e:	80 93 a6 02 	sts	0x02A6, r24
	Speed_PID.SetSetPoint(Speed);
	TCRTRevolutionCount = 0;
     722:	10 92 1a 02 	sts	0x021A, r1
     726:	10 92 19 02 	sts	0x0219, r1
	E.ExtraCount = 0;
     72a:	10 92 ca 02 	sts	0x02CA, r1
     72e:	10 92 cb 02 	sts	0x02CB, r1
     732:	10 92 cc 02 	sts	0x02CC, r1
     736:	10 92 cd 02 	sts	0x02CD, r1
	ReachedHome = false;
     73a:	10 92 d8 02 	sts	0x02D8, r1
	
	SET(Plick_Plick);
     73e:	46 9a       	sbi	0x08, 6	; 8
	SET(Plick_Plick_2);
     740:	40 9a       	sbi	0x08, 0	; 8
     742:	08 95       	ret

00000744 <main>:
 int geneva_count;
 
// bool throw2 = false;

int main(void)
{
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	2f 97       	sbiw	r28, 0x0f	; 15
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	de bf       	out	0x3e, r29	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	cd bf       	out	0x3d, r28	; 61
	OUTPUT(Pneumatic);
     758:	ea e0       	ldi	r30, 0x0A	; 10
     75a:	f1 e0       	ldi	r31, 0x01	; 1
     75c:	80 81       	ld	r24, Z
     75e:	81 60       	ori	r24, 0x01	; 1
     760:	80 83       	st	Z, r24
	SET(Pneumatic);
     762:	eb e0       	ldi	r30, 0x0B	; 11
     764:	f1 e0       	ldi	r31, 0x01	; 1
     766:	80 81       	ld	r24, Z
     768:	81 60       	ori	r24, 0x01	; 1
     76a:	80 83       	st	Z, r24
	
	OUTPUT(ShuttleCockArm_P);
     76c:	9a 9a       	sbi	0x13, 2	; 19
	CLEAR(ShuttleCockArm_P);
     76e:	a2 98       	cbi	0x14, 2	; 20
	
	OUTPUT(Grip_P);
     770:	98 9a       	sbi	0x13, 0	; 19
	CLEAR(Grip_P);
     772:	a0 98       	cbi	0x14, 0	; 20
	
	OUTPUT(Plick_Plick);
     774:	3e 9a       	sbi	0x07, 6	; 7
	OUTPUT(Plick_Plick_2);
     776:	38 9a       	sbi	0x07, 0	; 7

	Initialize_All();
     778:	27 df       	rcall	.-434    	; 0x5c8 <_Z14Initialize_Allv>
	initialise_timeperiod();
     77a:	fb de       	rcall	.-522    	; 0x572 <_Z21initialise_timeperiodv>
	
	
	Speed_PID.Initialize();
     77c:	89 e7       	ldi	r24, 0x79	; 121
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	72 d6       	rcall	.+3300   	; 0x1466 <_ZN3PID10InitializeEv>
	public:
			float lastinput;
			float offset;
			int setPoint;
			void Initialize();
			void Set_Range(float min,float max){minOut=min;maxOut=max;}
     782:	e9 e7       	ldi	r30, 0x79	; 121
     784:	f2 e0       	ldi	r31, 0x02	; 2
     786:	0f 2e       	mov	r0, r31
     788:	41 2c       	mov	r4, r1
     78a:	51 2c       	mov	r5, r1
     78c:	f9 e7       	ldi	r31, 0x79	; 121
     78e:	6f 2e       	mov	r6, r31
     790:	f3 ec       	ldi	r31, 0xC3	; 195
     792:	7f 2e       	mov	r7, r31
     794:	f0 2d       	mov	r31, r0
     796:	45 8a       	std	Z+21, r4	; 0x15
     798:	56 8a       	std	Z+22, r5	; 0x16
     79a:	67 8a       	std	Z+23, r6	; 0x17
     79c:	70 8e       	std	Z+24, r7	; 0x18
     79e:	0f 2e       	mov	r0, r31
     7a0:	81 2c       	mov	r8, r1
     7a2:	91 2c       	mov	r9, r1
     7a4:	f9 e7       	ldi	r31, 0x79	; 121
     7a6:	af 2e       	mov	r10, r31
     7a8:	f3 e4       	ldi	r31, 0x43	; 67
     7aa:	bf 2e       	mov	r11, r31
     7ac:	f0 2d       	mov	r31, r0
     7ae:	81 8a       	std	Z+17, r8	; 0x11
     7b0:	92 8a       	std	Z+18, r9	; 0x12
     7b2:	a3 8a       	std	Z+19, r10	; 0x13
     7b4:	b4 8a       	std	Z+20, r11	; 0x14
	Speed_PID.Set_Range(-249,249);
	Speed_PID.Set_PID(4.1,0.399,8.4);     //   6.65,0.234,3.949    8.10,0.454,11.10   7.00,0.259,3.799   7.00,0.259,3.799  10.00,0.489,10.150  8.80,0.169,5.550      //8.05,0.115,4.299	 10.95,0.329,18.650  8.10,0.169,11.10// 9.25,0.454,6.800   8.30,0.504,9.650
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f6 e6       	ldi	r31, 0x66	; 102
     7ba:	cf 2e       	mov	r12, r31
     7bc:	dc 2c       	mov	r13, r12
     7be:	f6 e0       	ldi	r31, 0x06	; 6
     7c0:	ef 2e       	mov	r14, r31
     7c2:	f1 e4       	ldi	r31, 0x41	; 65
     7c4:	ff 2e       	mov	r15, r31
     7c6:	f0 2d       	mov	r31, r0
     7c8:	0a eb       	ldi	r16, 0xBA	; 186
     7ca:	19 e4       	ldi	r17, 0x49	; 73
     7cc:	2c ec       	ldi	r18, 0xCC	; 204
     7ce:	3e e3       	ldi	r19, 0x3E	; 62
     7d0:	43 e3       	ldi	r20, 0x33	; 51
     7d2:	53 e3       	ldi	r21, 0x33	; 51
     7d4:	63 e8       	ldi	r22, 0x83	; 131
     7d6:	70 e4       	ldi	r23, 0x40	; 64
     7d8:	cf 01       	movw	r24, r30
     7da:	67 d6       	rcall	.+3278   	; 0x14aa <_ZN3PID7Set_PIDEfff>

	Angle_PID.Initialize();
     7dc:	8a e4       	ldi	r24, 0x4A	; 74
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	42 d6       	rcall	.+3204   	; 0x1466 <_ZN3PID10InitializeEv>
     7e2:	0f 2e       	mov	r0, r31
     7e4:	fa e4       	ldi	r31, 0x4A	; 74
     7e6:	2f 2e       	mov	r2, r31
     7e8:	f2 e0       	ldi	r31, 0x02	; 2
     7ea:	3f 2e       	mov	r3, r31
     7ec:	f0 2d       	mov	r31, r0
     7ee:	f1 01       	movw	r30, r2
     7f0:	45 8a       	std	Z+21, r4	; 0x15
     7f2:	56 8a       	std	Z+22, r5	; 0x16
     7f4:	67 8a       	std	Z+23, r6	; 0x17
     7f6:	70 8e       	std	Z+24, r7	; 0x18
     7f8:	81 8a       	std	Z+17, r8	; 0x11
     7fa:	92 8a       	std	Z+18, r9	; 0x12
     7fc:	a3 8a       	std	Z+19, r10	; 0x13
     7fe:	b4 8a       	std	Z+20, r11	; 0x14
	Angle_PID.Set_Range(-249,249);
	Angle_PID.Set_PID(3.49,0.080,8.699 );                  //3.19,0.029,7.599  3.49,0.080,8.699   5.19,0.1,3.699
     800:	0f 2e       	mov	r0, r31
     802:	fb e1       	ldi	r31, 0x1B	; 27
     804:	cf 2e       	mov	r12, r31
     806:	ff e2       	ldi	r31, 0x2F	; 47
     808:	df 2e       	mov	r13, r31
     80a:	fb e0       	ldi	r31, 0x0B	; 11
     80c:	ef 2e       	mov	r14, r31
     80e:	f1 e4       	ldi	r31, 0x41	; 65
     810:	ff 2e       	mov	r15, r31
     812:	f0 2d       	mov	r31, r0
     814:	0a e0       	ldi	r16, 0x0A	; 10
     816:	17 ed       	ldi	r17, 0xD7	; 215
     818:	23 ea       	ldi	r18, 0xA3	; 163
     81a:	3d e3       	ldi	r19, 0x3D	; 61
     81c:	49 e2       	ldi	r20, 0x29	; 41
     81e:	5c e5       	ldi	r21, 0x5C	; 92
     820:	6f e5       	ldi	r22, 0x5F	; 95
     822:	70 e4       	ldi	r23, 0x40	; 64
     824:	c1 01       	movw	r24, r2
     826:	41 d6       	rcall	.+3202   	; 0x14aa <_ZN3PID7Set_PIDEfff>
	
	
	Geneva_PID.Initialize();
     828:	8b e1       	ldi	r24, 0x1B	; 27
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	1c d6       	rcall	.+3128   	; 0x1466 <_ZN3PID10InitializeEv>
     82e:	eb e1       	ldi	r30, 0x1B	; 27
     830:	f2 e0       	ldi	r31, 0x02	; 2
     832:	45 8a       	std	Z+21, r4	; 0x15
     834:	56 8a       	std	Z+22, r5	; 0x16
     836:	67 8a       	std	Z+23, r6	; 0x17
     838:	70 8e       	std	Z+24, r7	; 0x18
     83a:	81 8a       	std	Z+17, r8	; 0x11
     83c:	92 8a       	std	Z+18, r9	; 0x12
     83e:	a3 8a       	std	Z+19, r10	; 0x13
     840:	b4 8a       	std	Z+20, r11	; 0x14
	Geneva_PID.Set_Range(-249,249);
	Geneva_PID.Set_PID(26.0,0,18);                        //15.50 0.015 0            60.50,0.219,4.199   54.40,0.045,10.70
     842:	0f 2e       	mov	r0, r31
     844:	c1 2c       	mov	r12, r1
     846:	d1 2c       	mov	r13, r1
     848:	f0 e9       	ldi	r31, 0x90	; 144
     84a:	ef 2e       	mov	r14, r31
     84c:	f1 e4       	ldi	r31, 0x41	; 65
     84e:	ff 2e       	mov	r15, r31
     850:	f0 2d       	mov	r31, r0
     852:	00 e0       	ldi	r16, 0x00	; 0
     854:	10 e0       	ldi	r17, 0x00	; 0
     856:	98 01       	movw	r18, r16
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	60 ed       	ldi	r22, 0xD0	; 208
     85e:	71 e4       	ldi	r23, 0x41	; 65
     860:	cf 01       	movw	r24, r30
     862:	23 d6       	rcall	.+3142   	; 0x14aa <_ZN3PID7Set_PIDEfff>
	sei();
     864:	78 94       	sei
	
	uart3_init(UART_BAUD_SELECT(38400,F_CPU));
     866:	89 e1       	ldi	r24, 0x19	; 25
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	ca d7       	rcall	.+3988   	; 0x1800 <_Z10uart3_initj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     86c:	8f e3       	ldi	r24, 0x3F	; 63
     86e:	9c e9       	ldi	r25, 0x9C	; 156
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <main+0x12c>
     874:	00 c0       	rjmp	.+0      	; 0x876 <main+0x132>
     876:	00 00       	nop
// 	uart2_init(UART_BAUD_SELECT(9600,F_CPU));
// 	uart2_puts("Give Commands!!!\r\n");

	_delay_ms(10);
	
  	Initial_Position_Of_The_ARM();
     878:	b6 de       	rcall	.-660    	; 0x5e6 <_Z27Initial_Position_Of_The_ARMv>
				kd=KD;
				Set_PID(kp,ki,kd);
			}
			void SetSetPoint(float x)
			{
				setPoint = x;
     87a:	8f e0       	ldi	r24, 0x0F	; 15
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	f1 01       	movw	r30, r2
     880:	96 a7       	std	Z+46, r25	; 0x2e
     882:	85 a7       	std	Z+45, r24	; 0x2d
  	Angle_PID.SetSetPoint(15);
	  
 
	int previous_data = 0;
	int8_t dir = -1;         //1 for forward direction and -1 for reverse direction
    motor_speed = -60;
     884:	84 ec       	ldi	r24, 0xC4	; 196
     886:	9f ef       	ldi	r25, 0xFF	; 255
     888:	90 93 0f 02 	sts	0x020F, r25
     88c:	80 93 0e 02 	sts	0x020E, r24
	
	Speed = -30;
     890:	82 ee       	ldi	r24, 0xE2	; 226
     892:	9f ef       	ldi	r25, 0xFF	; 255
     894:	90 93 13 02 	sts	0x0213, r25
     898:	80 93 12 02 	sts	0x0212, r24
	bool UnArmed    = false;
	
	bool run_geneva_once  = false;	
	bool run_geneva_in_loop = false;
	
	unsigned long previous_time = 0;
     89c:	41 2c       	mov	r4, r1
     89e:	51 2c       	mov	r5, r1
     8a0:	32 01       	movw	r6, r4
	bool Loaded     = false;
	bool UnGrab     = false;
	bool UnArmed    = false;
	
	bool run_geneva_once  = false;	
	bool run_geneva_in_loop = false;
     8a2:	21 2c       	mov	r2, r1
	bool Armed      = false;
	bool Loaded     = false;
	bool UnGrab     = false;
	bool UnArmed    = false;
	
	bool run_geneva_once  = false;	
     8a4:	1a 82       	std	Y+2, r1	; 0x02
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
	bool Loaded     = false;
	bool UnGrab     = false;
	bool UnArmed    = false;
     8a6:	18 86       	std	Y+8, r1	; 0x08
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
	bool Loaded     = false;
	bool UnGrab     = false;
     8a8:	1f 82       	std	Y+7, r1	; 0x07
	bool throwGolden   = false;
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
	bool Loaded     = false;
     8aa:	1d 82       	std	Y+5, r1	; 0x05
	bool geneva_start  = false;
	bool throwGolden   = false;
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
     8ac:	19 82       	std	Y+1, r1	; 0x01
	bool unarmed       = false;
	bool geneva_start  = false;
	bool throwGolden   = false;
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
     8ae:	1e 82       	std	Y+6, r1	; 0x06
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
	bool geneva_start  = false;
	bool throwGolden   = false;
	bool caught        = false;
     8b0:	1f 86       	std	Y+15, r1	; 0x0f
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
	bool geneva_start  = false;
	bool throwGolden   = false;
     8b2:	1e 86       	std	Y+14, r1	; 0x0e
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
	bool geneva_start  = false;
     8b4:	1b 86       	std	Y+11, r1	; 0x0b
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
     8b6:	1c 86       	std	Y+12, r1	; 0x0c
	
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
     8b8:	1d 86       	std	Y+13, r1	; 0x0d
    motor_speed = -60;
	
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
     8ba:	19 86       	std	Y+9, r1	; 0x09
	int8_t dir = -1;         //1 for forward direction and -1 for reverse direction
    motor_speed = -60;
	
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
     8bc:	1a 86       	std	Y+10, r1	; 0x0a
	
  	Initial_Position_Of_The_ARM();
  	Angle_PID.SetSetPoint(15);
	  
 
	int previous_data = 0;
     8be:	1c 82       	std	Y+4, r1	; 0x04
     8c0:	1b 82       	std	Y+3, r1	; 0x03
					
			case 'w':
			{
				if (!Home)
				{
					ReceiveShuttleCock = true;	
     8c2:	33 24       	eor	r3, r3
     8c4:	33 94       	inc	r3
     8c6:	0f 2e       	mov	r0, r31
     8c8:	fb e1       	ldi	r31, 0x1B	; 27
     8ca:	af 2e       	mov	r10, r31
     8cc:	f2 e0       	ldi	r31, 0x02	; 2
     8ce:	bf 2e       	mov	r11, r31
     8d0:	f0 2d       	mov	r31, r0
		}
		if (Angle_PID.PID_Flag && !PIDFlag)
		{
			M.SetOcrValue(Angle_PID.Compute_PID(E.Encoder_Get_angle()));

			check_homeBuffer[3] = check_homeBuffer[2];
     8d2:	0f 2e       	mov	r0, r31
     8d4:	f6 e0       	ldi	r31, 0x06	; 6
     8d6:	8f 2e       	mov	r8, r31
     8d8:	f2 e0       	ldi	r31, 0x02	; 2
     8da:	9f 2e       	mov	r9, r31
     8dc:	f0 2d       	mov	r31, r0
	
	unsigned long previous_time = 0;
	
	while (1)
	{
		data = uart3_getc();
     8de:	a9 d7       	rcall	.+3922   	; 0x1832 <_Z10uart3_getcv>
     8e0:	80 93 14 02 	sts	0x0214, r24
		switch (data)
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	fc 01       	movw	r30, r24
     8e8:	f1 97       	sbiw	r30, 0x31	; 49
     8ea:	e7 34       	cpi	r30, 0x47	; 71
     8ec:	f1 05       	cpc	r31, r1
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <main+0x1ae>
     8f0:	c6 c0       	rjmp	.+396    	; 0xa7e <main+0x33a>
     8f2:	88 27       	eor	r24, r24
     8f4:	ee 58       	subi	r30, 0x8E	; 142
     8f6:	ff 4f       	sbci	r31, 0xFF	; 255
     8f8:	8f 4f       	sbci	r24, 0xFF	; 255
     8fa:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__tablejump2__>
				break;
			}
			
			case 'k':
			{
				run_geneva_in_loop = true;
     8fe:	23 2c       	mov	r2, r3
     900:	be c0       	rjmp	.+380    	; 0xa7e <main+0x33a>
		data = uart3_getc();
		switch (data)
		{
			case '1':
			{
				TZ1 = true;
     902:	30 92 e1 02 	sts	0x02E1, r3
				
				
				TZ2 = false;
     906:	10 92 e0 02 	sts	0x02E0, r1
				TZ3 = false;
     90a:	10 92 df 02 	sts	0x02DF, r1
				motor_speed = -64;                   //60
     90e:	80 ec       	ldi	r24, 0xC0	; 192
     910:	9f ef       	ldi	r25, 0xFF	; 255
     912:	90 93 0f 02 	sts	0x020F, r25
     916:	80 93 0e 02 	sts	0x020E, r24
				Goflag = true;
     91a:	30 92 e4 02 	sts	0x02E4, r3
				PIDFlag = true;
     91e:	30 92 00 02 	sts	0x0200, r3
				G_PID   = false;
     922:	10 92 dd 02 	sts	0x02DD, r1
				Ramp_up_flag = true;
     926:	30 92 e3 02 	sts	0x02E3, r3
     92a:	80 91 12 02 	lds	r24, 0x0212
     92e:	90 91 13 02 	lds	r25, 0x0213
     932:	90 93 a7 02 	sts	0x02A7, r25
     936:	80 93 a6 02 	sts	0x02A6, r24
				Speed_PID.SetSetPoint(Speed);
				TCRTRevolutionCount = 0;
     93a:	10 92 1a 02 	sts	0x021A, r1
     93e:	10 92 19 02 	sts	0x0219, r1
				E.ExtraCount = 0;
     942:	10 92 ca 02 	sts	0x02CA, r1
     946:	10 92 cb 02 	sts	0x02CB, r1
     94a:	10 92 cc 02 	sts	0x02CC, r1
     94e:	10 92 cd 02 	sts	0x02CD, r1
				SET(Plick_Plick);
     952:	46 9a       	sbi	0x08, 6	; 8
				SET(Plick_Plick_2);
     954:	40 9a       	sbi	0x08, 0	; 8
				break;
     956:	93 c0       	rjmp	.+294    	; 0xa7e <main+0x33a>
			}
			case '2':
			{
				TZ2 = true;
     958:	30 92 e0 02 	sts	0x02E0, r3
				TZ1 = false;
     95c:	10 92 e1 02 	sts	0x02E1, r1
				TZ3 = false;
     960:	10 92 df 02 	sts	0x02DF, r1
				G_PID = false;
     964:	10 92 dd 02 	sts	0x02DD, r1
				motor_speed = -60;                                                               // -55;
     968:	e4 ec       	ldi	r30, 0xC4	; 196
     96a:	ff ef       	ldi	r31, 0xFF	; 255
     96c:	f0 93 0f 02 	sts	0x020F, r31
     970:	e0 93 0e 02 	sts	0x020E, r30
				Goflag = true;
     974:	30 92 e4 02 	sts	0x02E4, r3
				PIDFlag = true;
     978:	30 92 00 02 	sts	0x0200, r3
				Ramp_up_flag = true;
     97c:	30 92 e3 02 	sts	0x02E3, r3
     980:	80 91 12 02 	lds	r24, 0x0212
     984:	90 91 13 02 	lds	r25, 0x0213
     988:	90 93 a7 02 	sts	0x02A7, r25
     98c:	80 93 a6 02 	sts	0x02A6, r24
				Speed_PID.SetSetPoint(Speed);
				TCRTRevolutionCount = 0;
     990:	10 92 1a 02 	sts	0x021A, r1
     994:	10 92 19 02 	sts	0x0219, r1
				E.ExtraCount = 0;
     998:	10 92 ca 02 	sts	0x02CA, r1
     99c:	10 92 cb 02 	sts	0x02CB, r1
     9a0:	10 92 cc 02 	sts	0x02CC, r1
     9a4:	10 92 cd 02 	sts	0x02CD, r1
				SET(Plick_Plick);
     9a8:	46 9a       	sbi	0x08, 6	; 8
				SET(Plick_Plick_2);
     9aa:	40 9a       	sbi	0x08, 0	; 8
				break;
     9ac:	68 c0       	rjmp	.+208    	; 0xa7e <main+0x33a>
// 					break;
// 				}
			
			case 's':
			{
				Goflag = false;
     9ae:	10 92 e4 02 	sts	0x02E4, r1
				PIDFlag = true;
     9b2:	30 92 00 02 	sts	0x0200, r3
     9b6:	10 92 a7 02 	sts	0x02A7, r1
     9ba:	10 92 a6 02 	sts	0x02A6, r1
				Speed_PID.SetSetPoint(0);
				M.StopMotor();
     9be:	84 ed       	ldi	r24, 0xD4	; 212
     9c0:	92 e0       	ldi	r25, 0x02	; 2
     9c2:	df d4       	rcall	.+2494   	; 0x1382 <_ZN5Motor9StopMotorEv>
				Speed = 0;
     9c4:	10 92 13 02 	sts	0x0213, r1
     9c8:	10 92 12 02 	sts	0x0212, r1
				TCRTRevolutionCount = 0;
     9cc:	10 92 1a 02 	sts	0x021A, r1
     9d0:	10 92 19 02 	sts	0x0219, r1
				Ramp_up_flag = false;
     9d4:	10 92 e3 02 	sts	0x02E3, r1
				break;
     9d8:	52 c0       	rjmp	.+164    	; 0xa7e <main+0x33a>
			}
			case 'h':
			{ 
				Angle_PID.Set_PID(10.2,0,6.899);    // 6.59,0.09,10.1   4.29,0.024,11.9   2.99,0.1,15.0 6.39,0,26.80  5.79,0,22  6.29,0,4.899   3.19,0.029,7.599   6,0,25.0  //3.49,0.080,8.699   4.59,0.079,10.5
     9da:	0f 2e       	mov	r0, r31
     9dc:	fc e9       	ldi	r31, 0x9C	; 156
     9de:	cf 2e       	mov	r12, r31
     9e0:	f4 ec       	ldi	r31, 0xC4	; 196
     9e2:	df 2e       	mov	r13, r31
     9e4:	fc ed       	ldi	r31, 0xDC	; 220
     9e6:	ef 2e       	mov	r14, r31
     9e8:	f0 e4       	ldi	r31, 0x40	; 64
     9ea:	ff 2e       	mov	r15, r31
     9ec:	f0 2d       	mov	r31, r0
     9ee:	00 e0       	ldi	r16, 0x00	; 0
     9f0:	10 e0       	ldi	r17, 0x00	; 0
     9f2:	98 01       	movw	r18, r16
     9f4:	43 e3       	ldi	r20, 0x33	; 51
     9f6:	53 e3       	ldi	r21, 0x33	; 51
     9f8:	63 e2       	ldi	r22, 0x23	; 35
     9fa:	71 e4       	ldi	r23, 0x41	; 65
     9fc:	8a e4       	ldi	r24, 0x4A	; 74
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	54 d5       	rcall	.+2728   	; 0x14aa <_ZN3PID7Set_PIDEfff>
				CLEAR(Pneumatic);
     a02:	eb e0       	ldi	r30, 0x0B	; 11
     a04:	f1 e0       	ldi	r31, 0x01	; 1
     a06:	80 81       	ld	r24, Z
     a08:	8e 7f       	andi	r24, 0xFE	; 254
     a0a:	80 83       	st	Z, r24
				GoToHome();
     a0c:	22 de       	rcall	.-956    	; 0x652 <_Z8GoToHomev>
				break;
     a0e:	37 c0       	rjmp	.+110    	; 0xa7e <main+0x33a>
			}
			case 'r':
			{
				Run_Geneva();
     a10:	bd dd       	rcall	.-1158   	; 0x58c <_Z10Run_Genevav>
				break;
     a12:	35 c0       	rjmp	.+106    	; 0xa7e <main+0x33a>
			}
			case 'o':
			{
				Grab_ShuttleCock = true;
     a14:	30 92 dc 02 	sts	0x02DC, r3
				break;
     a18:	32 c0       	rjmp	.+100    	; 0xa7e <main+0x33a>
			}
			
			case 'j':
			{
				gotRack        = true;
     a1a:	30 92 da 02 	sts	0x02DA, r3
				run_geneva_once = true;
				first_Golden = true;
     a1e:	30 92 db 02 	sts	0x02DB, r3
			}
			
			case 'j':
			{
				gotRack        = true;
				run_geneva_once = true;
     a22:	3a 82       	std	Y+2, r3	; 0x02
				first_Golden = true;
				break;
     a24:	2c c0       	rjmp	.+88     	; 0xa7e <main+0x33a>
			}
			
			case 'n':
			{
				SET(Pneumatic);
     a26:	eb e0       	ldi	r30, 0x0B	; 11
     a28:	f1 e0       	ldi	r31, 0x01	; 1
     a2a:	80 81       	ld	r24, Z
     a2c:	81 60       	ori	r24, 0x01	; 1
     a2e:	80 83       	st	Z, r24
				break;
     a30:	26 c0       	rjmp	.+76     	; 0xa7e <main+0x33a>
			}
			
			case 'm':
			{
				CLEAR(Pneumatic);
     a32:	eb e0       	ldi	r30, 0x0B	; 11
     a34:	f1 e0       	ldi	r31, 0x01	; 1
     a36:	80 81       	ld	r24, Z
     a38:	8e 7f       	andi	r24, 0xFE	; 254
     a3a:	80 83       	st	Z, r24
				break;
     a3c:	20 c0       	rjmp	.+64     	; 0xa7e <main+0x33a>
			}
			
			case 'i':
			{
				motor_speed += 1;
     a3e:	80 91 0e 02 	lds	r24, 0x020E
     a42:	90 91 0f 02 	lds	r25, 0x020F
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	90 93 0f 02 	sts	0x020F, r25
     a4c:	80 93 0e 02 	sts	0x020E, r24
				break;
     a50:	16 c0       	rjmp	.+44     	; 0xa7e <main+0x33a>
			}
			
			case 'd':
			{
				motor_speed -= 1;
     a52:	80 91 0e 02 	lds	r24, 0x020E
     a56:	90 91 0f 02 	lds	r25, 0x020F
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	90 93 0f 02 	sts	0x020F, r25
     a60:	80 93 0e 02 	sts	0x020E, r24
				break;
     a64:	0c c0       	rjmp	.+24     	; 0xa7e <main+0x33a>
			}
			
			case '3':
			{
				Golden_Rack = true;
     a66:	30 92 d9 02 	sts	0x02D9, r3
				run_geneva_once = true;
				first_Golden = true;
     a6a:	30 92 db 02 	sts	0x02DB, r3
			}
			
			case '3':
			{
				Golden_Rack = true;
				run_geneva_once = true;
     a6e:	3a 82       	std	Y+2, r3	; 0x02
				first_Golden = true;
				break;
     a70:	06 c0       	rjmp	.+12     	; 0xa7e <main+0x33a>
				break;
			}
					
			case 'w':
			{
				if (!Home)
     a72:	80 91 e2 02 	lds	r24, 0x02E2
     a76:	81 11       	cpse	r24, r1
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <main+0x33a>
				{
					ReceiveShuttleCock = true;	
     a7a:	30 92 de 02 	sts	0x02DE, r3
			}

			default:break;
		}
		
		data = 0;
     a7e:	10 92 14 02 	sts	0x0214, r1
// uart0_putc(' ');
// uart0_putint(motor_speed);
// uart0_puts("\r\n");

		/*********************************************************************************************************************************/
			if (ShuttleCockArm_home /*&& ReachedHome*/)
     a82:	80 91 d6 02 	lds	r24, 0x02D6
     a86:	88 23       	and	r24, r24
     a88:	b9 f0       	breq	.+46     	; 0xab8 <main+0x374>
			{
				if (millis()-previous_time_gone_home >= 700)
     a8a:	67 dd       	rcall	.-1330   	; 0x55a <_Z6millisv>
     a8c:	00 91 15 02 	lds	r16, 0x0215
     a90:	10 91 16 02 	lds	r17, 0x0216
     a94:	20 91 17 02 	lds	r18, 0x0217
     a98:	30 91 18 02 	lds	r19, 0x0218
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	80 1b       	sub	r24, r16
     aa2:	91 0b       	sbc	r25, r17
     aa4:	a2 0b       	sbc	r26, r18
     aa6:	b3 0b       	sbc	r27, r19
     aa8:	8c 3b       	cpi	r24, 0xBC	; 188
     aaa:	92 40       	sbci	r25, 0x02	; 2
     aac:	a1 05       	cpc	r26, r1
     aae:	b1 05       	cpc	r27, r1
     ab0:	18 f0       	brcs	.+6      	; 0xab8 <main+0x374>
				{
					SET(ShuttleCockArm_P);
     ab2:	a2 9a       	sbi	0x14, 2	; 20
					ShuttleCockArm_home = false;
     ab4:	10 92 d6 02 	sts	0x02D6, r1
				}
			}
			
		
		/******************************************Grabbing Shuttle Cock On Masters Command************************************************/
		if (Grab_ShuttleCock)
     ab8:	80 91 dc 02 	lds	r24, 0x02DC
     abc:	88 23       	and	r24, r24
     abe:	f1 f0       	breq	.+60     	; 0xafc <main+0x3b8>
		{
			if (!Grabbed && !Armed && !Loaded && !UnGrab && !UnArmed)
     ac0:	2e 81       	ldd	r18, Y+6	; 0x06
     ac2:	21 11       	cpse	r18, r1
     ac4:	75 c2       	rjmp	.+1258   	; 0xfb0 <main+0x86c>
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	81 11       	cpse	r24, r1
     aca:	18 c0       	rjmp	.+48     	; 0xafc <main+0x3b8>
     acc:	9d 81       	ldd	r25, Y+5	; 0x05
     ace:	91 11       	cpse	r25, r1
     ad0:	15 c0       	rjmp	.+42     	; 0xafc <main+0x3b8>
     ad2:	ef 81       	ldd	r30, Y+7	; 0x07
     ad4:	e1 11       	cpse	r30, r1
     ad6:	12 c0       	rjmp	.+36     	; 0xafc <main+0x3b8>
     ad8:	f8 85       	ldd	r31, Y+8	; 0x08
     ada:	f1 11       	cpse	r31, r1
     adc:	0f c0       	rjmp	.+30     	; 0xafc <main+0x3b8>
			{
				CLEAR(ShuttleCockArm_P);
     ade:	a2 98       	cbi	0x14, 2	; 20
				Grabbed = true;
				previous_time = millis();
     ae0:	3c dd       	rcall	.-1416   	; 0x55a <_Z6millisv>
     ae2:	2b 01       	movw	r4, r22
     ae4:	3c 01       	movw	r6, r24
     ae6:	64 c2       	rjmp	.+1224   	; 0xfb0 <main+0x86c>
			}
			//_delay_ms(500);
			if (Grabbed && (millis()-previous_time) >= 800)
			{
				SET(Grip_P);
     ae8:	a0 9a       	sbi	0x14, 0	; 20
				Armed = true;
				//previous_time = millis();
				Grab_ShuttleCock = false;
     aea:	10 92 dc 02 	sts	0x02DC, r1
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     aee:	80 91 de 02 	lds	r24, 0x02DE
     af2:	81 11       	cpse	r24, r1
     af4:	0c c0       	rjmp	.+24     	; 0xb0e <main+0x3ca>
			}
			//_delay_ms(500);
			if (Grabbed && (millis()-previous_time) >= 800)
			{
				SET(Grip_P);
				Armed = true;
     af6:	39 82       	std	Y+1, r3	; 0x01
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     af8:	3e 82       	std	Y+6, r3	; 0x06
     afa:	65 c0       	rjmp	.+202    	; 0xbc6 <main+0x482>
     afc:	80 91 de 02 	lds	r24, 0x02DE
     b00:	88 23       	and	r24, r24
     b02:	09 f4       	brne	.+2      	; 0xb06 <main+0x3c2>
     b04:	60 c0       	rjmp	.+192    	; 0xbc6 <main+0x482>
		{
			if (Armed && !Loaded && !UnGrab && !UnArmed)
     b06:	29 81       	ldd	r18, Y+1	; 0x01
     b08:	22 23       	and	r18, r18
     b0a:	81 f0       	breq	.+32     	; 0xb2c <main+0x3e8>
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <main+0x3cc>
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     b0e:	3e 82       	std	Y+6, r3	; 0x06
		{
			if (Armed && !Loaded && !UnGrab && !UnArmed)
     b10:	8d 81       	ldd	r24, Y+5	; 0x05
     b12:	81 11       	cpse	r24, r1
     b14:	5c c2       	rjmp	.+1208   	; 0xfce <main+0x88a>
     b16:	9f 81       	ldd	r25, Y+7	; 0x07
     b18:	91 11       	cpse	r25, r1
     b1a:	21 c0       	rjmp	.+66     	; 0xb5e <main+0x41a>
     b1c:	e8 85       	ldd	r30, Y+8	; 0x08
     b1e:	e1 11       	cpse	r30, r1
     b20:	20 c0       	rjmp	.+64     	; 0xb62 <main+0x41e>
			{
				SET(ShuttleCockArm_P);
     b22:	a2 9a       	sbi	0x14, 2	; 20
				Loaded = true;
				previous_time = millis();
     b24:	1a dd       	rcall	.-1484   	; 0x55a <_Z6millisv>
     b26:	2b 01       	movw	r4, r22
     b28:	3c 01       	movw	r6, r24
     b2a:	51 c2       	rjmp	.+1186   	; 0xfce <main+0x88a>
			}
			//_delay_ms(700);
			if (Loaded && (millis()-previous_time) >= 900)
     b2c:	fd 81       	ldd	r31, Y+5	; 0x05
     b2e:	ff 23       	and	r31, r31
     b30:	d9 f0       	breq	.+54     	; 0xb68 <main+0x424>
     b32:	13 dd       	rcall	.-1498   	; 0x55a <_Z6millisv>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	84 19       	sub	r24, r4
     b3a:	95 09       	sbc	r25, r5
     b3c:	a6 09       	sbc	r26, r6
     b3e:	b7 09       	sbc	r27, r7
     b40:	84 38       	cpi	r24, 0x84	; 132
     b42:	93 40       	sbci	r25, 0x03	; 3
     b44:	a1 05       	cpc	r26, r1
     b46:	b1 05       	cpc	r27, r1
     b48:	70 f0       	brcs	.+28     	; 0xb66 <main+0x422>
			{
				SET(Pneumatic);
     b4a:	eb e0       	ldi	r30, 0x0B	; 11
     b4c:	f1 e0       	ldi	r31, 0x01	; 1
     b4e:	80 81       	ld	r24, Z
     b50:	81 60       	ori	r24, 0x01	; 1
     b52:	80 83       	st	Z, r24
				UnGrab = true;
				Loaded = false;
				previous_time = millis();
     b54:	02 dd       	rcall	.-1532   	; 0x55a <_Z6millisv>
     b56:	2b 01       	movw	r4, r22
     b58:	3c 01       	movw	r6, r24
			//_delay_ms(700);
			if (Loaded && (millis()-previous_time) >= 900)
			{
				SET(Pneumatic);
				UnGrab = true;
				Loaded = false;
     b5a:	1d 82       	std	Y+5, r1	; 0x05
     b5c:	08 c0       	rjmp	.+16     	; 0xb6e <main+0x42a>
     b5e:	39 82       	std	Y+1, r3	; 0x01
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <main+0x424>
     b62:	39 82       	std	Y+1, r3	; 0x01
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <main+0x424>
     b66:	3d 82       	std	Y+5, r3	; 0x05
				previous_time = millis();
			}
			//_delay_ms(100);
			if (UnGrab && (millis()-previous_time) >= 200)
     b68:	ff 81       	ldd	r31, Y+7	; 0x07
     b6a:	ff 23       	and	r31, r31
     b6c:	99 f0       	breq	.+38     	; 0xb94 <main+0x450>
     b6e:	f5 dc       	rcall	.-1558   	; 0x55a <_Z6millisv>
     b70:	dc 01       	movw	r26, r24
     b72:	cb 01       	movw	r24, r22
     b74:	84 19       	sub	r24, r4
     b76:	95 09       	sbc	r25, r5
     b78:	a6 09       	sbc	r26, r6
     b7a:	b7 09       	sbc	r27, r7
     b7c:	88 3c       	cpi	r24, 0xC8	; 200
     b7e:	91 05       	cpc	r25, r1
     b80:	a1 05       	cpc	r26, r1
     b82:	b1 05       	cpc	r27, r1
     b84:	30 f0       	brcs	.+12     	; 0xb92 <main+0x44e>
			{
				CLEAR(Grip_P);
     b86:	a0 98       	cbi	0x14, 0	; 20
				UnArmed = true;
				UnGrab = false;
				previous_time = millis();	
     b88:	e8 dc       	rcall	.-1584   	; 0x55a <_Z6millisv>
     b8a:	2b 01       	movw	r4, r22
     b8c:	3c 01       	movw	r6, r24
			//_delay_ms(100);
			if (UnGrab && (millis()-previous_time) >= 200)
			{
				CLEAR(Grip_P);
				UnArmed = true;
				UnGrab = false;
     b8e:	1f 82       	std	Y+7, r1	; 0x07
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <main+0x456>
     b92:	3f 82       	std	Y+7, r3	; 0x07
				previous_time = millis();	
			}
			if (UnArmed && (millis()-previous_time) >= 150)
     b94:	28 85       	ldd	r18, Y+8	; 0x08
     b96:	22 23       	and	r18, r18
     b98:	b1 f0       	breq	.+44     	; 0xbc6 <main+0x482>
     b9a:	df dc       	rcall	.-1602   	; 0x55a <_Z6millisv>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	84 19       	sub	r24, r4
     ba2:	95 09       	sbc	r25, r5
     ba4:	a6 09       	sbc	r26, r6
     ba6:	b7 09       	sbc	r27, r7
     ba8:	86 39       	cpi	r24, 0x96	; 150
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	48 f0       	brcs	.+18     	; 0xbc4 <main+0x480>
			{
				CLEAR(ShuttleCockArm_P);
     bb2:	a2 98       	cbi	0x14, 2	; 20
				ReceiveShuttleCock = false;
     bb4:	10 92 de 02 	sts	0x02DE, r1
				Grabbed = false;
				Armed   = false;
				Loaded  = false;
				UnGrab  = false;
				UnArmed = false;
     bb8:	18 86       	std	Y+8, r1	; 0x08
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
				Armed   = false;
				Loaded  = false;
				UnGrab  = false;
     bba:	1f 82       	std	Y+7, r1	; 0x07
			{
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
				Armed   = false;
				Loaded  = false;
     bbc:	1d 82       	std	Y+5, r1	; 0x05
			if (UnArmed && (millis()-previous_time) >= 150)
			{
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
				Armed   = false;
     bbe:	19 82       	std	Y+1, r1	; 0x01
			}
			if (UnArmed && (millis()-previous_time) >= 150)
			{
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
     bc0:	1e 82       	std	Y+6, r1	; 0x06
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <main+0x482>
     bc4:	38 86       	std	Y+8, r3	; 0x08
				UnGrab  = false;
				UnArmed = false;
			}
		}
		
		if(abs(E1.Enoder_Get_Angle()) >= 720)
     bc6:	88 ea       	ldi	r24, 0xA8	; 168
     bc8:	92 e0       	ldi	r25, 0x02	; 2
     bca:	ee db       	rcall	.-2084   	; 0x3a8 <_ZN13GenevaEncoder16Enoder_Get_AngleEv>
     bcc:	99 23       	and	r25, r25
     bce:	1c f4       	brge	.+6      	; 0xbd6 <main+0x492>
     bd0:	91 95       	neg	r25
     bd2:	81 95       	neg	r24
     bd4:	91 09       	sbc	r25, r1
     bd6:	80 3d       	cpi	r24, 0xD0	; 208
     bd8:	92 40       	sbci	r25, 0x02	; 2
     bda:	94 f0       	brlt	.+36     	; 0xc00 <main+0x4bc>
		{
			G.StopMotor();
     bdc:	85 ed       	ldi	r24, 0xD5	; 213
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	1c dc       	rcall	.-1992   	; 0x41a <_ZN11GenevaMotor9StopMotorEv>
		inline void Reset_Count(){Encoder_Count = 0;};
     be2:	10 92 a9 02 	sts	0x02A9, r1
     be6:	10 92 a8 02 	sts	0x02A8, r1
     bea:	f5 01       	movw	r30, r10
     bec:	16 a6       	std	Z+46, r1	; 0x2e
     bee:	15 a6       	std	Z+45, r1	; 0x2d
			E1.Reset_Count();
			Geneva_PID.SetSetPoint(0);
			Geneva_PID.Iterm = 0;
     bf0:	11 a2       	std	Z+33, r1	; 0x21
     bf2:	12 a2       	std	Z+34, r1	; 0x22
     bf4:	13 a2       	std	Z+35, r1	; 0x23
     bf6:	14 a2       	std	Z+36, r1	; 0x24
			Geneva_PID.output = 0;
     bf8:	15 8e       	std	Z+29, r1	; 0x1d
     bfa:	16 8e       	std	Z+30, r1	; 0x1e
     bfc:	17 8e       	std	Z+31, r1	; 0x1f
     bfe:	10 a2       	std	Z+32, r1	; 0x20
		}
/***********************************************************************************************************************************/
		if (run_geneva_in_loop)
     c00:	21 10       	cpse	r2, r1
		{
			Run_Geneva();
     c02:	c4 dc       	rcall	.-1656   	; 0x58c <_Z10Run_Genevav>
		}
 /****************************************************Golden Rack Section***********************************************************/		
  		if (gotRack)
     c04:	80 91 da 02 	lds	r24, 0x02DA
     c08:	88 23       	and	r24, r24
     c0a:	11 f1       	breq	.+68     	; 0xc50 <main+0x50c>
  		{
			if (run_geneva_once)
     c0c:	fa 81       	ldd	r31, Y+2	; 0x02
     c0e:	ff 23       	and	r31, r31
     c10:	29 f0       	breq	.+10     	; 0xc1c <main+0x4d8>
			{
				Run_Geneva();
     c12:	bc dc       	rcall	.-1672   	; 0x58c <_Z10Run_Genevav>
				run_geneva_once = false;
				run_geneva_in_loop = false;
				previous_time = millis();
     c14:	a2 dc       	rcall	.-1724   	; 0x55a <_Z6millisv>
     c16:	2b 01       	movw	r4, r22
     c18:	3c 01       	movw	r6, r24
  		{
			if (run_geneva_once)
			{
				Run_Geneva();
				run_geneva_once = false;
				run_geneva_in_loop = false;
     c1a:	21 2c       	mov	r2, r1
				previous_time = millis();
			}
			
			if (first_Golden && (millis()-previous_time) >= 800)
     c1c:	80 91 db 02 	lds	r24, 0x02DB
     c20:	88 23       	and	r24, r24
     c22:	99 f0       	breq	.+38     	; 0xc4a <main+0x506>
     c24:	9a dc       	rcall	.-1740   	; 0x55a <_Z6millisv>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	84 19       	sub	r24, r4
     c2c:	95 09       	sbc	r25, r5
     c2e:	a6 09       	sbc	r26, r6
     c30:	b7 09       	sbc	r27, r7
     c32:	80 32       	cpi	r24, 0x20	; 32
     c34:	93 40       	sbci	r25, 0x03	; 3
     c36:	a1 05       	cpc	r26, r1
     c38:	b1 05       	cpc	r27, r1
     c3a:	48 f0       	brcs	.+18     	; 0xc4e <main+0x50a>
			{
				CLEAR(ShuttleCockArm_P);
     c3c:	a2 98       	cbi	0x14, 2	; 20
				first_Golden = false;
     c3e:	10 92 db 02 	sts	0x02DB, r1
				run_geneva_once = false;
				gotRack = false;
     c42:	10 92 da 02 	sts	0x02DA, r1
			
			if (first_Golden && (millis()-previous_time) >= 800)
			{
				CLEAR(ShuttleCockArm_P);
				first_Golden = false;
				run_geneva_once = false;
     c46:	1a 82       	std	Y+2, r1	; 0x02
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <main+0x50c>
     c4a:	1a 82       	std	Y+2, r1	; 0x02
     c4c:	01 c0       	rjmp	.+2      	; 0xc50 <main+0x50c>
     c4e:	1a 82       	std	Y+2, r1	; 0x02
			}
			  
  		}
		  
		  
		  if (Golden_Rack )
     c50:	80 91 d9 02 	lds	r24, 0x02D9
     c54:	88 23       	and	r24, r24
     c56:	09 f4       	brne	.+2      	; 0xc5a <main+0x516>
     c58:	cf c0       	rjmp	.+414    	; 0xdf8 <main+0x6b4>
  		{
  			if ((GoldenShuttle_count < 6))
     c5a:	80 91 10 02 	lds	r24, 0x0210
     c5e:	90 91 11 02 	lds	r25, 0x0211
     c62:	06 97       	sbiw	r24, 0x06	; 6
     c64:	0c f0       	brlt	.+2      	; 0xc68 <main+0x524>
     c66:	c8 c0       	rjmp	.+400    	; 0xdf8 <main+0x6b4>
  			{
  				if ((Speed == -30) && (ReachedHome))
     c68:	80 91 12 02 	lds	r24, 0x0212
     c6c:	90 91 13 02 	lds	r25, 0x0213
     c70:	4e 96       	adiw	r24, 0x1e	; 30
     c72:	09 f0       	breq	.+2      	; 0xc76 <main+0x532>
     c74:	c1 c0       	rjmp	.+386    	; 0xdf8 <main+0x6b4>
     c76:	80 91 d8 02 	lds	r24, 0x02D8
     c7a:	81 11       	cpse	r24, r1
     c7c:	aa c1       	rjmp	.+852    	; 0xfd2 <main+0x88e>
     c7e:	bc c0       	rjmp	.+376    	; 0xdf8 <main+0x6b4>
  				{ 
					 if (!geneva_start && !Gripp && !armed && !unarmed && !ungripp && !throwGolden && !caught)
     c80:	fa 85       	ldd	r31, Y+10	; 0x0a
     c82:	f1 11       	cpse	r31, r1
     c84:	17 c0       	rjmp	.+46     	; 0xcb4 <main+0x570>
     c86:	29 85       	ldd	r18, Y+9	; 0x09
     c88:	21 11       	cpse	r18, r1
     c8a:	27 c0       	rjmp	.+78     	; 0xcda <main+0x596>
     c8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     c8e:	81 11       	cpse	r24, r1
     c90:	24 c0       	rjmp	.+72     	; 0xcda <main+0x596>
     c92:	9d 85       	ldd	r25, Y+13	; 0x0d
     c94:	91 11       	cpse	r25, r1
     c96:	21 c0       	rjmp	.+66     	; 0xcda <main+0x596>
     c98:	ee 85       	ldd	r30, Y+14	; 0x0e
     c9a:	e1 11       	cpse	r30, r1
     c9c:	1e c0       	rjmp	.+60     	; 0xcda <main+0x596>
     c9e:	ff 85       	ldd	r31, Y+15	; 0x0f
     ca0:	f1 11       	cpse	r31, r1
     ca2:	1b c0       	rjmp	.+54     	; 0xcda <main+0x596>
					 {
						//SET(ShuttleCockArm_P);
 						Gripp = true;
						previous_time = millis();
     ca4:	5a dc       	rcall	.-1868   	; 0x55a <_Z6millisv>
     ca6:	2b 01       	movw	r4, r22
     ca8:	3c 01       	movw	r6, r24
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <main+0x570>
					}
  					/*_delay_ms(500);*/
					if (Gripp && (millis()-previous_time) >= 200)
     cac:	2a 85       	ldd	r18, Y+10	; 0x0a
     cae:	22 23       	and	r18, r18
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <main+0x570>
     cb2:	34 c2       	rjmp	.+1128   	; 0x111c <main+0x9d8>
     cb4:	52 dc       	rcall	.-1884   	; 0x55a <_Z6millisv>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	84 19       	sub	r24, r4
     cbc:	95 09       	sbc	r25, r5
     cbe:	a6 09       	sbc	r26, r6
     cc0:	b7 09       	sbc	r27, r7
     cc2:	88 3c       	cpi	r24, 0xC8	; 200
     cc4:	91 05       	cpc	r25, r1
     cc6:	a1 05       	cpc	r26, r1
     cc8:	b1 05       	cpc	r27, r1
     cca:	30 f0       	brcs	.+12     	; 0xcd8 <main+0x594>
					{
						SET(Grip_P);
     ccc:	a0 9a       	sbi	0x14, 0	; 20
						 armed = true;
						 previous_time = millis(); 
     cce:	45 dc       	rcall	.-1910   	; 0x55a <_Z6millisv>
     cd0:	2b 01       	movw	r4, r22
     cd2:	3c 01       	movw	r6, r24
						 Gripp = false;
     cd4:	1a 86       	std	Y+10, r1	; 0x0a
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <main+0x59c>
     cd8:	3a 86       	std	Y+10, r3	; 0x0a
					}
					
					/*_delay_ms(100);*/
					
					if (armed && (millis()-previous_time) >= 150)
     cda:	89 85       	ldd	r24, Y+9	; 0x09
     cdc:	88 23       	and	r24, r24
     cde:	99 f0       	breq	.+38     	; 0xd06 <main+0x5c2>
     ce0:	3c dc       	rcall	.-1928   	; 0x55a <_Z6millisv>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	84 19       	sub	r24, r4
     ce8:	95 09       	sbc	r25, r5
     cea:	a6 09       	sbc	r26, r6
     cec:	b7 09       	sbc	r27, r7
     cee:	86 39       	cpi	r24, 0x96	; 150
     cf0:	91 05       	cpc	r25, r1
     cf2:	a1 05       	cpc	r26, r1
     cf4:	b1 05       	cpc	r27, r1
     cf6:	30 f0       	brcs	.+12     	; 0xd04 <main+0x5c0>
					{
						SET(ShuttleCockArm_P);
     cf8:	a2 9a       	sbi	0x14, 2	; 20
						geneva_start = true;
						previous_time = millis();
     cfa:	2f dc       	rcall	.-1954   	; 0x55a <_Z6millisv>
     cfc:	2b 01       	movw	r4, r22
     cfe:	3c 01       	movw	r6, r24
						armed = false;
     d00:	19 86       	std	Y+9, r1	; 0x09
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <main+0x5c8>
     d04:	39 86       	std	Y+9, r3	; 0x09
					}
					
					if (geneva_start && (millis()-previous_time) >= 50)
     d06:	9b 85       	ldd	r25, Y+11	; 0x0b
     d08:	99 23       	and	r25, r25
     d0a:	91 f0       	breq	.+36     	; 0xd30 <main+0x5ec>
     d0c:	26 dc       	rcall	.-1972   	; 0x55a <_Z6millisv>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	84 19       	sub	r24, r4
     d14:	95 09       	sbc	r25, r5
     d16:	a6 09       	sbc	r26, r6
     d18:	b7 09       	sbc	r27, r7
     d1a:	c2 97       	sbiw	r24, 0x32	; 50
     d1c:	a1 05       	cpc	r26, r1
     d1e:	b1 05       	cpc	r27, r1
     d20:	30 f0       	brcs	.+12     	; 0xd2e <main+0x5ea>
					{
						 Run_Geneva();
     d22:	34 dc       	rcall	.-1944   	; 0x58c <_Z10Run_Genevav>
						 caught = true;
						 previous_time = millis();
     d24:	1a dc       	rcall	.-1996   	; 0x55a <_Z6millisv>
     d26:	2b 01       	movw	r4, r22
     d28:	3c 01       	movw	r6, r24
						 geneva_start = false;
     d2a:	1b 86       	std	Y+11, r1	; 0x0b
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <main+0x5f2>
     d2e:	3b 86       	std	Y+11, r3	; 0x0b
					}
					if (caught && (millis()-previous_time) >= 800)
     d30:	ef 85       	ldd	r30, Y+15	; 0x0f
     d32:	ee 23       	and	r30, r30
     d34:	b9 f0       	breq	.+46     	; 0xd64 <main+0x620>
     d36:	11 dc       	rcall	.-2014   	; 0x55a <_Z6millisv>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	84 19       	sub	r24, r4
     d3e:	95 09       	sbc	r25, r5
     d40:	a6 09       	sbc	r26, r6
     d42:	b7 09       	sbc	r27, r7
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	93 40       	sbci	r25, 0x03	; 3
     d48:	a1 05       	cpc	r26, r1
     d4a:	b1 05       	cpc	r27, r1
     d4c:	50 f0       	brcs	.+20     	; 0xd62 <main+0x61e>
					{
						SET(Pneumatic);
     d4e:	eb e0       	ldi	r30, 0x0B	; 11
     d50:	f1 e0       	ldi	r31, 0x01	; 1
     d52:	80 81       	ld	r24, Z
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	80 83       	st	Z, r24
						ungripp = true;
						previous_time = millis();
     d58:	00 dc       	rcall	.-2048   	; 0x55a <_Z6millisv>
     d5a:	2b 01       	movw	r4, r22
     d5c:	3c 01       	movw	r6, r24
						caught = false;
     d5e:	1f 86       	std	Y+15, r1	; 0x0f
     d60:	04 c0       	rjmp	.+8      	; 0xd6a <main+0x626>
     d62:	3f 86       	std	Y+15, r3	; 0x0f
					}
					if(ungripp && (millis()-previous_time) >= 300)
     d64:	fd 85       	ldd	r31, Y+13	; 0x0d
     d66:	ff 23       	and	r31, r31
     d68:	99 f0       	breq	.+38     	; 0xd90 <main+0x64c>
     d6a:	f7 db       	rcall	.-2066   	; 0x55a <_Z6millisv>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	84 19       	sub	r24, r4
     d72:	95 09       	sbc	r25, r5
     d74:	a6 09       	sbc	r26, r6
     d76:	b7 09       	sbc	r27, r7
     d78:	8c 32       	cpi	r24, 0x2C	; 44
     d7a:	91 40       	sbci	r25, 0x01	; 1
     d7c:	a1 05       	cpc	r26, r1
     d7e:	b1 05       	cpc	r27, r1
     d80:	30 f0       	brcs	.+12     	; 0xd8e <main+0x64a>
					{
						CLEAR(Grip_P);
     d82:	a0 98       	cbi	0x14, 0	; 20
						unarmed = true;
						ungripp = false;
						previous_time = millis();
     d84:	ea db       	rcall	.-2092   	; 0x55a <_Z6millisv>
     d86:	2b 01       	movw	r4, r22
     d88:	3c 01       	movw	r6, r24
					}
					if(ungripp && (millis()-previous_time) >= 300)
					{
						CLEAR(Grip_P);
						unarmed = true;
						ungripp = false;
     d8a:	1d 86       	std	Y+13, r1	; 0x0d
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <main+0x652>
     d8e:	3d 86       	std	Y+13, r3	; 0x0d
						previous_time = millis();
					}
					if (unarmed && (millis()-previous_time) >= 300)
     d90:	8c 85       	ldd	r24, Y+12	; 0x0c
     d92:	88 23       	and	r24, r24
     d94:	a9 f0       	breq	.+42     	; 0xdc0 <main+0x67c>
     d96:	e1 db       	rcall	.-2110   	; 0x55a <_Z6millisv>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	84 19       	sub	r24, r4
     d9e:	95 09       	sbc	r25, r5
     da0:	a6 09       	sbc	r26, r6
     da2:	b7 09       	sbc	r27, r7
     da4:	8c 32       	cpi	r24, 0x2C	; 44
     da6:	91 40       	sbci	r25, 0x01	; 1
     da8:	a1 05       	cpc	r26, r1
     daa:	b1 05       	cpc	r27, r1
     dac:	40 f0       	brcs	.+16     	; 0xdbe <main+0x67a>
					{
						CLEAR(ShuttleCockArm_P);
     dae:	a2 98       	cbi	0x14, 2	; 20
						throwGolden = true;
						unarmed = false;
						previous_time = millis();
     db0:	d4 db       	rcall	.-2136   	; 0x55a <_Z6millisv>
     db2:	2b 01       	movw	r4, r22
     db4:	3c 01       	movw	r6, r24
						uart3_putc('p');
     db6:	80 e7       	ldi	r24, 0x70	; 112
     db8:	57 d5       	rcall	.+2734   	; 0x1868 <_Z10uart3_putch>
					}
					if (unarmed && (millis()-previous_time) >= 300)
					{
						CLEAR(ShuttleCockArm_P);
						throwGolden = true;
						unarmed = false;
     dba:	1c 86       	std	Y+12, r1	; 0x0c
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <main+0x682>
     dbe:	3c 86       	std	Y+12, r3	; 0x0c
						previous_time = millis();
						uart3_putc('p');
					}
						 
					if (throwGolden && (millis()-previous_time) >= 500)
     dc0:	fe 85       	ldd	r31, Y+14	; 0x0e
     dc2:	ff 23       	and	r31, r31
     dc4:	c9 f0       	breq	.+50     	; 0xdf8 <main+0x6b4>
     dc6:	c9 db       	rcall	.-2158   	; 0x55a <_Z6millisv>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	84 19       	sub	r24, r4
     dce:	95 09       	sbc	r25, r5
     dd0:	a6 09       	sbc	r26, r6
     dd2:	b7 09       	sbc	r27, r7
     dd4:	84 3f       	cpi	r24, 0xF4	; 244
     dd6:	91 40       	sbci	r25, 0x01	; 1
     dd8:	a1 05       	cpc	r26, r1
     dda:	b1 05       	cpc	r27, r1
     ddc:	60 f0       	brcs	.+24     	; 0xdf6 <main+0x6b2>
					{
						GoldenShuttle_count++;
     dde:	80 91 10 02 	lds	r24, 0x0210
     de2:	90 91 11 02 	lds	r25, 0x0211
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	90 93 11 02 	sts	0x0211, r25
     dec:	80 93 10 02 	sts	0x0210, r24
						/*uart3_putc('p');*/
						FlyingDragon();
     df0:	7d dc       	rcall	.-1798   	; 0x6ec <_Z12FlyingDragonv>
						throwGolden = false;
     df2:	1e 86       	std	Y+14, r1	; 0x0e
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <main+0x6b4>
     df6:	3e 86       	std	Y+14, r3	; 0x0e

/***********************************************************************************************************************************/
/**********************************************Ramping_UP******************************************************************************/


		if (Ramp_up_flag && TCRTRevolutionCount < 5)
     df8:	80 91 e3 02 	lds	r24, 0x02E3
     dfc:	88 23       	and	r24, r24
     dfe:	c1 f1       	breq	.+112    	; 0xe70 <main+0x72c>
     e00:	80 91 19 02 	lds	r24, 0x0219
     e04:	90 91 1a 02 	lds	r25, 0x021A
     e08:	05 97       	sbiw	r24, 0x05	; 5
     e0a:	0c f4       	brge	.+2      	; 0xe0e <main+0x6ca>
     e0c:	e6 c0       	rjmp	.+460    	; 0xfda <main+0x896>
     e0e:	30 c0       	rjmp	.+96     	; 0xe70 <main+0x72c>
		{
			if ( abs(E.ExtraCount - previous_data) >= 40)
			{
				Speed = Speed + (dir*RAMP_STEP);
     e10:	80 91 12 02 	lds	r24, 0x0212
     e14:	90 91 13 02 	lds	r25, 0x0213
     e18:	03 97       	sbiw	r24, 0x03	; 3
     e1a:	90 93 13 02 	sts	0x0213, r25
     e1e:	80 93 12 02 	sts	0x0212, r24
				previous_data = E.ExtraCount;
     e22:	5c 83       	std	Y+4, r21	; 0x04
     e24:	4b 83       	std	Y+3, r20	; 0x03
			}
			
			Speed_PID.SetSetPoint(Speed);
     e26:	40 91 12 02 	lds	r20, 0x0212
     e2a:	50 91 13 02 	lds	r21, 0x0213
     e2e:	50 93 a7 02 	sts	0x02A7, r21
     e32:	40 93 a6 02 	sts	0x02A6, r20
			PIDFlag = true;
     e36:	30 92 00 02 	sts	0x0200, r3
			if (abs(Speed) > abs(motor_speed))
     e3a:	80 91 0e 02 	lds	r24, 0x020E
     e3e:	90 91 0f 02 	lds	r25, 0x020F
     e42:	9a 01       	movw	r18, r20
     e44:	55 23       	and	r21, r21
     e46:	24 f4       	brge	.+8      	; 0xe50 <main+0x70c>
     e48:	22 27       	eor	r18, r18
     e4a:	33 27       	eor	r19, r19
     e4c:	24 1b       	sub	r18, r20
     e4e:	35 0b       	sbc	r19, r21
     e50:	ac 01       	movw	r20, r24
     e52:	99 23       	and	r25, r25
     e54:	24 f4       	brge	.+8      	; 0xe5e <main+0x71a>
     e56:	44 27       	eor	r20, r20
     e58:	55 27       	eor	r21, r21
     e5a:	48 1b       	sub	r20, r24
     e5c:	59 0b       	sbc	r21, r25
     e5e:	42 17       	cp	r20, r18
     e60:	53 07       	cpc	r21, r19
     e62:	34 f4       	brge	.+12     	; 0xe70 <main+0x72c>
			{
				Speed = motor_speed;
     e64:	90 93 13 02 	sts	0x0213, r25
     e68:	80 93 12 02 	sts	0x0212, r24
				Ramp_up_flag = false;
     e6c:	10 92 e3 02 	sts	0x02E3, r1
		}
		
		
/**************************************Ramping_Down************************************************************************/
		
		if (Throwflag && TCRTRevolutionCount >= 6 )
     e70:	80 91 e5 02 	lds	r24, 0x02E5
     e74:	88 23       	and	r24, r24
     e76:	09 f4       	brne	.+2      	; 0xe7a <main+0x736>
     e78:	5f c0       	rjmp	.+190    	; 0xf38 <main+0x7f4>
     e7a:	80 91 19 02 	lds	r24, 0x0219
     e7e:	90 91 1a 02 	lds	r25, 0x021A
     e82:	06 97       	sbiw	r24, 0x06	; 6
     e84:	0c f0       	brlt	.+2      	; 0xe88 <main+0x744>
     e86:	c1 c0       	rjmp	.+386    	; 0x100a <main+0x8c6>
     e88:	57 c0       	rjmp	.+174    	; 0xf38 <main+0x7f4>
		{
			
			if ( abs(E.ExtraCount - previous_data) >= 50 )
			{
				Speed = Speed - (dir*RAMP_STEP);
     e8a:	80 91 12 02 	lds	r24, 0x0212
     e8e:	90 91 13 02 	lds	r25, 0x0213
     e92:	03 96       	adiw	r24, 0x03	; 3
     e94:	90 93 13 02 	sts	0x0213, r25
     e98:	80 93 12 02 	sts	0x0212, r24
				previous_data = E.ExtraCount;
     e9c:	5c 83       	std	Y+4, r21	; 0x04
     e9e:	4b 83       	std	Y+3, r20	; 0x03
     ea0:	80 91 12 02 	lds	r24, 0x0212
     ea4:	90 91 13 02 	lds	r25, 0x0213
     ea8:	90 93 a7 02 	sts	0x02A7, r25
     eac:	80 93 a6 02 	sts	0x02A6, r24
			}
			Speed_PID.SetSetPoint(Speed);
			PIDFlag = true;
     eb0:	30 92 00 02 	sts	0x0200, r3
			
			if ((TCRTRevolutionCount >= 6) && ACKSentFlag && ((TZ1||TZ2) && !TZ3))
     eb4:	80 91 19 02 	lds	r24, 0x0219
     eb8:	90 91 1a 02 	lds	r25, 0x021A
     ebc:	06 97       	sbiw	r24, 0x06	; 6
     ebe:	8c f0       	brlt	.+34     	; 0xee2 <main+0x79e>
     ec0:	80 91 e6 02 	lds	r24, 0x02E6
     ec4:	88 23       	and	r24, r24
     ec6:	69 f0       	breq	.+26     	; 0xee2 <main+0x79e>
     ec8:	80 91 e1 02 	lds	r24, 0x02E1
     ecc:	81 11       	cpse	r24, r1
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <main+0x794>
     ed0:	80 91 e0 02 	lds	r24, 0x02E0
     ed4:	88 23       	and	r24, r24
     ed6:	29 f0       	breq	.+10     	; 0xee2 <main+0x79e>
     ed8:	80 91 df 02 	lds	r24, 0x02DF
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <main+0x79e>
     ee0:	ac c0       	rjmp	.+344    	; 0x103a <main+0x8f6>
				/*uart0_putc('g');*/
				uart3_putc('g');
				ACKSentFlag = false;
			}
			
			if ((dir*Speed) <= 8)
     ee2:	80 91 12 02 	lds	r24, 0x0212
     ee6:	90 91 13 02 	lds	r25, 0x0213
     eea:	91 95       	neg	r25
     eec:	81 95       	neg	r24
     eee:	91 09       	sbc	r25, r1
     ef0:	09 97       	sbiw	r24, 0x09	; 9
     ef2:	14 f5       	brge	.+68     	; 0xf38 <main+0x7f4>
			{
				uart3_putc('d');
     ef4:	84 e6       	ldi	r24, 0x64	; 100
     ef6:	b8 d4       	rcall	.+2416   	; 0x1868 <_Z10uart3_putch>
				Goflag = false;
     ef8:	10 92 e4 02 	sts	0x02E4, r1
				Throwflag = false;
     efc:	10 92 e5 02 	sts	0x02E5, r1
				Speed = 0 ;
     f00:	10 92 13 02 	sts	0x0213, r1
     f04:	10 92 12 02 	sts	0x0212, r1
				Home  = true;
     f08:	30 92 e2 02 	sts	0x02E2, r3
				TCRTRevolutionCount = 0;
     f0c:	10 92 1a 02 	sts	0x021A, r1
     f10:	10 92 19 02 	sts	0x0219, r1
				previous_data = 0;
				E.ExtraCount = 0;
     f14:	10 92 ca 02 	sts	0x02CA, r1
     f18:	10 92 cb 02 	sts	0x02CB, r1
     f1c:	10 92 cc 02 	sts	0x02CC, r1
     f20:	10 92 cd 02 	sts	0x02CD, r1
				TZ1 = false;
     f24:	10 92 e1 02 	sts	0x02E1, r1
				TZ2 = false;
     f28:	10 92 e0 02 	sts	0x02E0, r1
				TZ3 = false;
     f2c:	10 92 df 02 	sts	0x02DF, r1
				CLEAR(Plick_Plick);
     f30:	46 98       	cbi	0x08, 6	; 8
				CLEAR(Plick_Plick_2);
     f32:	40 98       	cbi	0x08, 0	; 8
				Goflag = false;
				Throwflag = false;
				Speed = 0 ;
				Home  = true;
				TCRTRevolutionCount = 0;
				previous_data = 0;
     f34:	1c 82       	std	Y+4, r1	; 0x04
     f36:	1b 82       	std	Y+3, r1	; 0x03
		
		
/****************************************Computing_PID*************************************************************************/
		
		
		if (Speed_PID.PID_Flag  && PIDFlag )
     f38:	e9 e7       	ldi	r30, 0x79	; 121
     f3a:	f2 e0       	ldi	r31, 0x02	; 2
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	21 f0       	breq	.+8      	; 0xf4a <main+0x806>
     f42:	80 91 00 02 	lds	r24, 0x0200
     f46:	81 11       	cpse	r24, r1
     f48:	7d c0       	rjmp	.+250    	; 0x1044 <main+0x900>
		{
			M.SetOcrValue(Speed_PID.Compute_PID(E.Encoder_get_speed()));
			Speed_PID.PID_Flag = false;
		}
		if (Angle_PID.PID_Flag && !PIDFlag)
     f4a:	80 91 4a 02 	lds	r24, 0x024A
     f4e:	88 23       	and	r24, r24
     f50:	f1 f0       	breq	.+60     	; 0xf8e <main+0x84a>
     f52:	80 91 00 02 	lds	r24, 0x0200
     f56:	81 11       	cpse	r24, r1
     f58:	1a c0       	rjmp	.+52     	; 0xf8e <main+0x84a>
     f5a:	8a c0       	rjmp	.+276    	; 0x1070 <main+0x92c>
			check_homeBuffer[0] = abs(E.Count);
			
			add = check_homeBuffer[0] + check_homeBuffer[1] + check_homeBuffer[2] + check_homeBuffer[3];
			
			if((add == 0)){
				check_timesHome += 1;
     f5c:	80 91 04 02 	lds	r24, 0x0204
     f60:	90 91 05 02 	lds	r25, 0x0205
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	90 93 05 02 	sts	0x0205, r25
     f6a:	80 93 04 02 	sts	0x0204, r24
			}
			else{
				check_timesHome = 0;
			}
			
			if(check_timesHome > 50){
     f6e:	c3 97       	sbiw	r24, 0x33	; 51
     f70:	34 f4       	brge	.+12     	; 0xf7e <main+0x83a>
     f72:	0b c0       	rjmp	.+22     	; 0xf8a <main+0x846>
			
			if((add == 0)){
				check_timesHome += 1;
			}
			else{
				check_timesHome = 0;
     f74:	10 92 05 02 	sts	0x0205, r1
     f78:	10 92 04 02 	sts	0x0204, r1
     f7c:	06 c0       	rjmp	.+12     	; 0xf8a <main+0x846>
			}
			
			if(check_timesHome > 50){
				check_timesHome = 0;
     f7e:	10 92 05 02 	sts	0x0205, r1
     f82:	10 92 04 02 	sts	0x0204, r1
				ReachedHome = true;
     f86:	30 92 d8 02 	sts	0x02D8, r3
			}
			
			Angle_PID.PID_Flag = false;
     f8a:	10 92 4a 02 	sts	0x024A, r1
		}
		
		if (Geneva_PID.PID_Flag && G_PID)
     f8e:	f5 01       	movw	r30, r10
     f90:	80 81       	ld	r24, Z
     f92:	88 23       	and	r24, r24
     f94:	21 f0       	breq	.+8      	; 0xf9e <main+0x85a>
     f96:	80 91 dd 02 	lds	r24, 0x02DD
     f9a:	81 11       	cpse	r24, r1
     f9c:	a2 c0       	rjmp	.+324    	; 0x10e2 <main+0x99e>
			G.SetOcrValue(Geneva_PID.Compute_PID(E1.Enoder_Get_Angle()));
			Geneva_PID.PID_Flag = false;
		}
/**************************************************************************************************************************/	
		
		if (!Throwflag && Home)
     f9e:	80 91 e5 02 	lds	r24, 0x02E5
     fa2:	81 11       	cpse	r24, r1
     fa4:	9c cc       	rjmp	.-1736   	; 0x8de <main+0x19a>
     fa6:	80 91 e2 02 	lds	r24, 0x02E2
     faa:	81 11       	cpse	r24, r1
     fac:	ad c0       	rjmp	.+346    	; 0x1108 <main+0x9c4>
     fae:	97 cc       	rjmp	.-1746   	; 0x8de <main+0x19a>
				CLEAR(ShuttleCockArm_P);
				Grabbed = true;
				previous_time = millis();
			}
			//_delay_ms(500);
			if (Grabbed && (millis()-previous_time) >= 800)
     fb0:	d4 da       	rcall	.-2648   	; 0x55a <_Z6millisv>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	84 19       	sub	r24, r4
     fb8:	95 09       	sbc	r25, r5
     fba:	a6 09       	sbc	r26, r6
     fbc:	b7 09       	sbc	r27, r7
     fbe:	80 32       	cpi	r24, 0x20	; 32
     fc0:	93 40       	sbci	r25, 0x03	; 3
     fc2:	a1 05       	cpc	r26, r1
     fc4:	b1 05       	cpc	r27, r1
     fc6:	08 f0       	brcs	.+2      	; 0xfca <main+0x886>
     fc8:	8f cd       	rjmp	.-1250   	; 0xae8 <main+0x3a4>
     fca:	3e 82       	std	Y+6, r3	; 0x06
     fcc:	97 cd       	rjmp	.-1234   	; 0xafc <main+0x3b8>
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     fce:	39 82       	std	Y+1, r3	; 0x01
     fd0:	b0 cd       	rjmp	.-1184   	; 0xb32 <main+0x3ee>
  		{
  			if ((GoldenShuttle_count < 6))
  			{
  				if ((Speed == -30) && (ReachedHome))
  				{ 
					 if (!geneva_start && !Gripp && !armed && !unarmed && !ungripp && !throwGolden && !caught)
     fd2:	2b 85       	ldd	r18, Y+11	; 0x0b
     fd4:	21 11       	cpse	r18, r1
     fd6:	6a ce       	rjmp	.-812    	; 0xcac <main+0x568>
     fd8:	53 ce       	rjmp	.-858    	; 0xc80 <main+0x53c>
/**********************************************Ramping_UP******************************************************************************/


		if (Ramp_up_flag && TCRTRevolutionCount < 5)
		{
			if ( abs(E.ExtraCount - previous_data) >= 40)
     fda:	40 91 ca 02 	lds	r20, 0x02CA
     fde:	50 91 cb 02 	lds	r21, 0x02CB
     fe2:	60 91 cc 02 	lds	r22, 0x02CC
     fe6:	70 91 cd 02 	lds	r23, 0x02CD
     fea:	9a 01       	movw	r18, r20
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	28 1b       	sub	r18, r24
     ff2:	39 0b       	sbc	r19, r25
     ff4:	c9 01       	movw	r24, r18
     ff6:	99 23       	and	r25, r25
     ff8:	24 f4       	brge	.+8      	; 0x1002 <main+0x8be>
     ffa:	88 27       	eor	r24, r24
     ffc:	99 27       	eor	r25, r25
     ffe:	82 1b       	sub	r24, r18
    1000:	93 0b       	sbc	r25, r19
    1002:	88 97       	sbiw	r24, 0x28	; 40
    1004:	0c f0       	brlt	.+2      	; 0x1008 <main+0x8c4>
    1006:	04 cf       	rjmp	.-504    	; 0xe10 <main+0x6cc>
    1008:	0e cf       	rjmp	.-484    	; 0xe26 <main+0x6e2>
/**************************************Ramping_Down************************************************************************/
		
		if (Throwflag && TCRTRevolutionCount >= 6 )
		{
			
			if ( abs(E.ExtraCount - previous_data) >= 50 )
    100a:	40 91 ca 02 	lds	r20, 0x02CA
    100e:	50 91 cb 02 	lds	r21, 0x02CB
    1012:	60 91 cc 02 	lds	r22, 0x02CC
    1016:	70 91 cd 02 	lds	r23, 0x02CD
    101a:	9a 01       	movw	r18, r20
    101c:	eb 81       	ldd	r30, Y+3	; 0x03
    101e:	fc 81       	ldd	r31, Y+4	; 0x04
    1020:	2e 1b       	sub	r18, r30
    1022:	3f 0b       	sbc	r19, r31
    1024:	c9 01       	movw	r24, r18
    1026:	99 23       	and	r25, r25
    1028:	24 f4       	brge	.+8      	; 0x1032 <main+0x8ee>
    102a:	88 27       	eor	r24, r24
    102c:	99 27       	eor	r25, r25
    102e:	82 1b       	sub	r24, r18
    1030:	93 0b       	sbc	r25, r19
    1032:	c2 97       	sbiw	r24, 0x32	; 50
    1034:	0c f0       	brlt	.+2      	; 0x1038 <main+0x8f4>
    1036:	29 cf       	rjmp	.-430    	; 0xe8a <main+0x746>
    1038:	33 cf       	rjmp	.-410    	; 0xea0 <main+0x75c>
			PIDFlag = true;
			
			if ((TCRTRevolutionCount >= 6) && ACKSentFlag && ((TZ1||TZ2) && !TZ3))
			{
				/*uart0_putc('g');*/
				uart3_putc('g');
    103a:	87 e6       	ldi	r24, 0x67	; 103
    103c:	15 d4       	rcall	.+2090   	; 0x1868 <_Z10uart3_putch>
				ACKSentFlag = false;
    103e:	10 92 e6 02 	sts	0x02E6, r1
    1042:	4f cf       	rjmp	.-354    	; 0xee2 <main+0x79e>
/****************************************Computing_PID*************************************************************************/
		
		
		if (Speed_PID.PID_Flag  && PIDFlag )
		{
			M.SetOcrValue(Speed_PID.Compute_PID(E.Encoder_get_speed()));
    1044:	60 91 c2 02 	lds	r22, 0x02C2
    1048:	70 91 c3 02 	lds	r23, 0x02C3
    104c:	07 2e       	mov	r0, r23
    104e:	00 0c       	add	r0, r0
    1050:	88 0b       	sbc	r24, r24
    1052:	99 0b       	sbc	r25, r25
    1054:	22 d5       	rcall	.+2628   	; 0x1a9a <__floatsisf>
    1056:	ab 01       	movw	r20, r22
    1058:	bc 01       	movw	r22, r24
    105a:	89 e7       	ldi	r24, 0x79	; 121
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	3f d2       	rcall	.+1150   	; 0x14de <_ZN3PID11Compute_PIDEf>
    1060:	e9 d4       	rcall	.+2514   	; 0x1a34 <__fixsfsi>
    1062:	84 ed       	ldi	r24, 0xD4	; 212
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	9a d1       	rcall	.+820    	; 0x139c <_ZN5Motor11SetOcrValueEi>
			Speed_PID.PID_Flag = false;
    1068:	e9 e7       	ldi	r30, 0x79	; 121
    106a:	f2 e0       	ldi	r31, 0x02	; 2
    106c:	10 82       	st	Z, r1
    106e:	6d cf       	rjmp	.-294    	; 0xf4a <main+0x806>
		}
		if (Angle_PID.PID_Flag && !PIDFlag)
		{
			M.SetOcrValue(Angle_PID.Compute_PID(E.Encoder_Get_angle()));
    1070:	80 eb       	ldi	r24, 0xB0	; 176
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	1b d9       	rcall	.-3530   	; 0x2ac <_ZN7Encoder17Encoder_Get_angleEv>
    1076:	bc 01       	movw	r22, r24
    1078:	99 0f       	add	r25, r25
    107a:	88 0b       	sbc	r24, r24
    107c:	99 0b       	sbc	r25, r25
    107e:	0d d5       	rcall	.+2586   	; 0x1a9a <__floatsisf>
    1080:	ab 01       	movw	r20, r22
    1082:	bc 01       	movw	r22, r24
    1084:	8a e4       	ldi	r24, 0x4A	; 74
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	2a d2       	rcall	.+1108   	; 0x14de <_ZN3PID11Compute_PIDEf>
    108a:	d4 d4       	rcall	.+2472   	; 0x1a34 <__fixsfsi>
    108c:	84 ed       	ldi	r24, 0xD4	; 212
    108e:	92 e0       	ldi	r25, 0x02	; 2
    1090:	85 d1       	rcall	.+778    	; 0x139c <_ZN5Motor11SetOcrValueEi>

			check_homeBuffer[3] = check_homeBuffer[2];
    1092:	f4 01       	movw	r30, r8
    1094:	44 81       	ldd	r20, Z+4	; 0x04
    1096:	55 81       	ldd	r21, Z+5	; 0x05
    1098:	57 83       	std	Z+7, r21	; 0x07
    109a:	46 83       	std	Z+6, r20	; 0x06
			check_homeBuffer[2] = check_homeBuffer[1];
    109c:	62 81       	ldd	r22, Z+2	; 0x02
    109e:	73 81       	ldd	r23, Z+3	; 0x03
    10a0:	75 83       	std	Z+5, r23	; 0x05
    10a2:	64 83       	std	Z+4, r22	; 0x04
			check_homeBuffer[1] = check_homeBuffer[0];
    10a4:	20 81       	ld	r18, Z
    10a6:	31 81       	ldd	r19, Z+1	; 0x01
    10a8:	33 83       	std	Z+3, r19	; 0x03
    10aa:	22 83       	std	Z+2, r18	; 0x02
			check_homeBuffer[0] = abs(E.Count);
    10ac:	80 91 c6 02 	lds	r24, 0x02C6
    10b0:	90 91 c7 02 	lds	r25, 0x02C7
    10b4:	99 23       	and	r25, r25
    10b6:	1c f4       	brge	.+6      	; 0x10be <main+0x97a>
    10b8:	91 95       	neg	r25
    10ba:	81 95       	neg	r24
    10bc:	91 09       	sbc	r25, r1
    10be:	f4 01       	movw	r30, r8
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	80 83       	st	Z, r24
			
			add = check_homeBuffer[0] + check_homeBuffer[1] + check_homeBuffer[2] + check_homeBuffer[3];
    10c4:	28 0f       	add	r18, r24
    10c6:	39 1f       	adc	r19, r25
    10c8:	cb 01       	movw	r24, r22
    10ca:	82 0f       	add	r24, r18
    10cc:	93 1f       	adc	r25, r19
    10ce:	84 0f       	add	r24, r20
    10d0:	95 1f       	adc	r25, r21
    10d2:	90 93 03 02 	sts	0x0203, r25
    10d6:	80 93 02 02 	sts	0x0202, r24
			
			if((add == 0)){
    10da:	89 2b       	or	r24, r25
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <main+0x99c>
    10de:	3e cf       	rjmp	.-388    	; 0xf5c <main+0x818>
    10e0:	49 cf       	rjmp	.-366    	; 0xf74 <main+0x830>
			Angle_PID.PID_Flag = false;
		}
		
		if (Geneva_PID.PID_Flag && G_PID)
		{
			G.SetOcrValue(Geneva_PID.Compute_PID(E1.Enoder_Get_Angle()));
    10e2:	88 ea       	ldi	r24, 0xA8	; 168
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	60 d9       	rcall	.-3392   	; 0x3a8 <_ZN13GenevaEncoder16Enoder_Get_AngleEv>
    10e8:	bc 01       	movw	r22, r24
    10ea:	99 0f       	add	r25, r25
    10ec:	88 0b       	sbc	r24, r24
    10ee:	99 0b       	sbc	r25, r25
    10f0:	d4 d4       	rcall	.+2472   	; 0x1a9a <__floatsisf>
    10f2:	ab 01       	movw	r20, r22
    10f4:	bc 01       	movw	r22, r24
    10f6:	c5 01       	movw	r24, r10
    10f8:	f2 d1       	rcall	.+996    	; 0x14de <_ZN3PID11Compute_PIDEf>
    10fa:	9c d4       	rcall	.+2360   	; 0x1a34 <__fixsfsi>
    10fc:	85 ed       	ldi	r24, 0xD5	; 213
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	93 d9       	rcall	.-3290   	; 0x428 <_ZN11GenevaMotor11SetOcrValueEi>
			Geneva_PID.PID_Flag = false;
    1102:	f5 01       	movw	r30, r10
    1104:	10 82       	st	Z, r1
    1106:	4b cf       	rjmp	.-362    	; 0xf9e <main+0x85a>
		}
/**************************************************************************************************************************/	
		
		if (!Throwflag && Home)
		{
			GoToHome();
    1108:	a4 da       	rcall	.-2744   	; 0x652 <_Z8GoToHomev>
			Speed = -30;
    110a:	82 ee       	ldi	r24, 0xE2	; 226
    110c:	9f ef       	ldi	r25, 0xFF	; 255
    110e:	90 93 13 02 	sts	0x0213, r25
    1112:	80 93 12 02 	sts	0x0212, r24
			Home = false;
    1116:	10 92 e2 02 	sts	0x02E2, r1
    111a:	e1 cb       	rjmp	.-2110   	; 0x8de <main+0x19a>
						 Gripp = false;
					}
					
					/*_delay_ms(100);*/
					
					if (armed && (millis()-previous_time) >= 150)
    111c:	99 85       	ldd	r25, Y+9	; 0x09
    111e:	99 23       	and	r25, r25
    1120:	09 f4       	brne	.+2      	; 0x1124 <main+0x9e0>
    1122:	f4 cd       	rjmp	.-1048   	; 0xd0c <main+0x5c8>
    1124:	dd cd       	rjmp	.-1094   	; 0xce0 <main+0x59c>

00001126 <__vector_21>:
}

/*******************************************ISR Section************************************************************/

ISR(TIMER0_COMPA_vect)
{
    1126:	1f 92       	push	r1
    1128:	0f 92       	push	r0
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	0f 92       	push	r0
    112e:	11 24       	eor	r1, r1
    1130:	0b b6       	in	r0, 0x3b	; 59
    1132:	0f 92       	push	r0
    1134:	2f 93       	push	r18
    1136:	3f 93       	push	r19
    1138:	4f 93       	push	r20
    113a:	5f 93       	push	r21
    113c:	6f 93       	push	r22
    113e:	7f 93       	push	r23
    1140:	8f 93       	push	r24
    1142:	9f 93       	push	r25
    1144:	af 93       	push	r26
    1146:	bf 93       	push	r27
    1148:	ef 93       	push	r30
    114a:	ff 93       	push	r31
	Speed_PID.PID_Flag = true;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	80 93 79 02 	sts	0x0279, r24
	Angle_PID.PID_Flag = true;
    1152:	80 93 4a 02 	sts	0x024A, r24
	Geneva_PID.PID_Flag = true;
    1156:	80 93 1b 02 	sts	0x021B, r24
	E.Encoder_update_Speed();
    115a:	80 eb       	ldi	r24, 0xB0	; 176
    115c:	92 e0       	ldi	r25, 0x02	; 2
    115e:	c5 d8       	rcall	.-3702   	; 0x2ea <_ZN7Encoder20Encoder_update_SpeedEv>
}
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
    1164:	bf 91       	pop	r27
    1166:	af 91       	pop	r26
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	7f 91       	pop	r23
    116e:	6f 91       	pop	r22
    1170:	5f 91       	pop	r21
    1172:	4f 91       	pop	r20
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	0f 90       	pop	r0
    117a:	0b be       	out	0x3b, r0	; 59
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_1>:

ISR(ENCODER_INTERRUPT_VECT)
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	0b b6       	in	r0, 0x3b	; 59
    1192:	0f 92       	push	r0
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
	E.Encoder_Increase_Pulse_Counter();	
    11ac:	80 eb       	ldi	r24, 0xB0	; 176
    11ae:	92 e0       	ldi	r25, 0x02	; 2
    11b0:	40 d8       	rcall	.-3968   	; 0x232 <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv>
}
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0b be       	out	0x3b, r0	; 59
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <__vector_3>:


ISR(Throwing_Zone_12_Interrupt_vect,ISR_NOBLOCK)
{
    11d8:	78 94       	sei
    11da:	1f 92       	push	r1
    11dc:	0f 92       	push	r0
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	0f 92       	push	r0
    11e2:	11 24       	eor	r1, r1
    11e4:	0b b6       	in	r0, 0x3b	; 59
    11e6:	0f 92       	push	r0
    11e8:	8f 93       	push	r24
    11ea:	9f 93       	push	r25
    11ec:	ef 93       	push	r30
    11ee:	ff 93       	push	r31
	
	E.Angle_count = 0;
    11f0:	10 92 cf 02 	sts	0x02CF, r1
    11f4:	10 92 ce 02 	sts	0x02CE, r1
	if(Goflag && (TZ1||TZ2))
    11f8:	80 91 e4 02 	lds	r24, 0x02E4
    11fc:	88 23       	and	r24, r24
    11fe:	f9 f0       	breq	.+62     	; 0x123e <__vector_3+0x66>
    1200:	80 91 e1 02 	lds	r24, 0x02E1
    1204:	81 11       	cpse	r24, r1
    1206:	10 c0       	rjmp	.+32     	; 0x1228 <__vector_3+0x50>
    1208:	80 91 e0 02 	lds	r24, 0x02E0
    120c:	81 11       	cpse	r24, r1
    120e:	0c c0       	rjmp	.+24     	; 0x1228 <__vector_3+0x50>
    1210:	16 c0       	rjmp	.+44     	; 0x123e <__vector_3+0x66>
	{
		TCRTRevolutionCount++;
		if (TCRTRevolutionCount == 4)
		{
			/*throw2 = true;*/
			CLEAR(Pneumatic);
    1212:	eb e0       	ldi	r30, 0x0B	; 11
    1214:	f1 e0       	ldi	r31, 0x01	; 1
    1216:	80 81       	ld	r24, Z
    1218:	8e 7f       	andi	r24, 0xFE	; 254
    121a:	80 83       	st	Z, r24
			Throwflag = true;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 93 e5 02 	sts	0x02E5, r24
			ACKSentFlag = true;
    1222:	80 93 e6 02 	sts	0x02E6, r24
    1226:	0b c0       	rjmp	.+22     	; 0x123e <__vector_3+0x66>
{
	
	E.Angle_count = 0;
	if(Goflag && (TZ1||TZ2))
	{
		TCRTRevolutionCount++;
    1228:	80 91 19 02 	lds	r24, 0x0219
    122c:	90 91 1a 02 	lds	r25, 0x021A
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	90 93 1a 02 	sts	0x021A, r25
    1236:	80 93 19 02 	sts	0x0219, r24
		if (TCRTRevolutionCount == 4)
    123a:	04 97       	sbiw	r24, 0x04	; 4
    123c:	51 f3       	breq	.-44     	; 0x1212 <__vector_3+0x3a>
			CLEAR(Pneumatic);
			Throwflag = true;
			ACKSentFlag = true;
		}
	}
}
    123e:	ff 91       	pop	r31
    1240:	ef 91       	pop	r30
    1242:	9f 91       	pop	r25
    1244:	8f 91       	pop	r24
    1246:	0f 90       	pop	r0
    1248:	0b be       	out	0x3b, r0	; 59
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	0f 90       	pop	r0
    1250:	1f 90       	pop	r1
    1252:	18 95       	reti

00001254 <__vector_2>:

ISR(Throwing_Zone_3_Interrupt_vect,ISR_NOBLOCK)
{
    1254:	78 94       	sei
    1256:	1f 92       	push	r1
    1258:	0f 92       	push	r0
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	0f 92       	push	r0
    125e:	11 24       	eor	r1, r1
    1260:	0b b6       	in	r0, 0x3b	; 59
    1262:	0f 92       	push	r0
    1264:	8f 93       	push	r24
    1266:	9f 93       	push	r25
    1268:	ef 93       	push	r30
    126a:	ff 93       	push	r31
	E.Angle_count = 0;
    126c:	10 92 cf 02 	sts	0x02CF, r1
    1270:	10 92 ce 02 	sts	0x02CE, r1
	if (Goflag && TZ3)
    1274:	80 91 e4 02 	lds	r24, 0x02E4
    1278:	88 23       	and	r24, r24
    127a:	d9 f0       	breq	.+54     	; 0x12b2 <__vector_2+0x5e>
    127c:	80 91 df 02 	lds	r24, 0x02DF
    1280:	81 11       	cpse	r24, r1
    1282:	0c c0       	rjmp	.+24     	; 0x129c <__vector_2+0x48>
    1284:	16 c0       	rjmp	.+44     	; 0x12b2 <__vector_2+0x5e>
	{
		TCRTRevolutionCount++;
		
		if (TCRTRevolutionCount == 4)
		{
			CLEAR(Pneumatic);
    1286:	eb e0       	ldi	r30, 0x0B	; 11
    1288:	f1 e0       	ldi	r31, 0x01	; 1
    128a:	80 81       	ld	r24, Z
    128c:	8e 7f       	andi	r24, 0xFE	; 254
    128e:	80 83       	st	Z, r24
			Throwflag = true;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 e5 02 	sts	0x02E5, r24
			ACKSentFlag = true;
    1296:	80 93 e6 02 	sts	0x02E6, r24
    129a:	0b c0       	rjmp	.+22     	; 0x12b2 <__vector_2+0x5e>
ISR(Throwing_Zone_3_Interrupt_vect,ISR_NOBLOCK)
{
	E.Angle_count = 0;
	if (Goflag && TZ3)
	{
		TCRTRevolutionCount++;
    129c:	80 91 19 02 	lds	r24, 0x0219
    12a0:	90 91 1a 02 	lds	r25, 0x021A
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	90 93 1a 02 	sts	0x021A, r25
    12aa:	80 93 19 02 	sts	0x0219, r24
		
		if (TCRTRevolutionCount == 4)
    12ae:	04 97       	sbiw	r24, 0x04	; 4
    12b0:	51 f3       	breq	.-44     	; 0x1286 <__vector_2+0x32>
			CLEAR(Pneumatic);
			Throwflag = true;
			ACKSentFlag = true;
		}
	}
}
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	0f 90       	pop	r0
    12bc:	0b be       	out	0x3b, r0	; 59
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	0f 90       	pop	r0
    12c4:	1f 90       	pop	r1
    12c6:	18 95       	reti

000012c8 <__vector_5>:

ISR(GENEVA_ENCODER_INT_vect)
{
    12c8:	1f 92       	push	r1
    12ca:	0f 92       	push	r0
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	0f 92       	push	r0
    12d0:	11 24       	eor	r1, r1
    12d2:	0b b6       	in	r0, 0x3b	; 59
    12d4:	0f 92       	push	r0
    12d6:	8f 93       	push	r24
    12d8:	9f 93       	push	r25
    12da:	ef 93       	push	r30
    12dc:	ff 93       	push	r31
	if (READ(ENCODERB))
    12de:	01 9b       	sbis	0x00, 1	; 0
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <__vector_5+0x2a>
		long count;
		int Geneva_Angle;
	public:
		GenevaEncoder();
		void Initialize_Geneva_Encoder(void);
		inline void Inc_Count(){Encoder_Count++;};
    12e2:	e8 ea       	ldi	r30, 0xA8	; 168
    12e4:	f2 e0       	ldi	r31, 0x02	; 2
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	91 83       	std	Z+1, r25	; 0x01
    12ee:	80 83       	st	Z, r24
    12f0:	09 c0       	rjmp	.+18     	; 0x1304 <__vector_5+0x3c>
	{
		E1.Inc_Count();
	}
	else if (!READ(ENCODERB))
    12f2:	01 99       	sbic	0x00, 1	; 0
    12f4:	07 c0       	rjmp	.+14     	; 0x1304 <__vector_5+0x3c>
		inline void Dcr_Count(){Encoder_Count--;};
    12f6:	e8 ea       	ldi	r30, 0xA8	; 168
    12f8:	f2 e0       	ldi	r31, 0x02	; 2
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	80 83       	st	Z, r24
	{
		E1.Dcr_Count();
	}
	
}
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	9f 91       	pop	r25
    130a:	8f 91       	pop	r24
    130c:	0f 90       	pop	r0
    130e:	0b be       	out	0x3b, r0	; 59
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <_GLOBAL__sub_I_timer2_millis>:
#define MAX_SPEED		120
#define RAMP_STEP		3

GenevaMotor G;
Motor   M;
Encoder E;
    131a:	80 eb       	ldi	r24, 0xB0	; 176
    131c:	92 e0       	ldi	r25, 0x02	; 2
    131e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_ZN7EncoderC1Ev>
GenevaEncoder E1;
    1322:	88 ea       	ldi	r24, 0xA8	; 168
    1324:	92 e0       	ldi	r25, 0x02	; 2
    1326:	3b c8       	rjmp	.-3978   	; 0x39e <_ZN13GenevaEncoderC1Ev>
    1328:	08 95       	ret

0000132a <_ZN5Motor7InitPWMEv>:

}

void Motor::InitPWM()
{
		OUTPUT(DD_F1);
    132a:	e1 e0       	ldi	r30, 0x01	; 1
    132c:	f1 e0       	ldi	r31, 0x01	; 1
    132e:	80 81       	ld	r24, Z
    1330:	80 62       	ori	r24, 0x20	; 32
    1332:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
    1334:	80 81       	ld	r24, Z
    1336:	80 64       	ori	r24, 0x40	; 64
    1338:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
    133a:	26 9a       	sbi	0x04, 6	; 4

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );												    // Clear on Compare Match
    133c:	e0 e8       	ldi	r30, 0x80	; 128
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	82 62       	ori	r24, 0x22	; 34
    1344:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
    1346:	e1 e8       	ldi	r30, 0x81	; 129
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8a 61       	ori	r24, 0x1A	; 26
    134e:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
    1350:	89 ef       	ldi	r24, 0xF9	; 249
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	90 93 87 00 	sts	0x0087, r25
    1358:	80 93 86 00 	sts	0x0086, r24
    135c:	08 95       	ret

0000135e <_ZN5Motor19SetForwardDirectionEv>:
}

void Motor::SetForwardDirection()
{
	SET (DD_F1);
    135e:	e2 e0       	ldi	r30, 0x02	; 2
    1360:	f1 e0       	ldi	r31, 0x01	; 1
    1362:	80 81       	ld	r24, Z
    1364:	80 62       	ori	r24, 0x20	; 32
    1366:	80 83       	st	Z, r24
	CLEAR	(DD_B1);
    1368:	80 81       	ld	r24, Z
    136a:	8f 7b       	andi	r24, 0xBF	; 191
    136c:	80 83       	st	Z, r24
    136e:	08 95       	ret

00001370 <_ZN5Motor19SetReverseDirectionEv>:
}
void Motor::SetReverseDirection()
{
	CLEAR	(DD_F1);
    1370:	e2 e0       	ldi	r30, 0x02	; 2
    1372:	f1 e0       	ldi	r31, 0x01	; 1
    1374:	80 81       	ld	r24, Z
    1376:	8f 7d       	andi	r24, 0xDF	; 223
    1378:	80 83       	st	Z, r24
	SET (DD_B1);
    137a:	80 81       	ld	r24, Z
    137c:	80 64       	ori	r24, 0x40	; 64
    137e:	80 83       	st	Z, r24
    1380:	08 95       	ret

00001382 <_ZN5Motor9StopMotorEv>:
}

void Motor::StopMotor()
{
	SET	(DD_F1);
    1382:	e2 e0       	ldi	r30, 0x02	; 2
    1384:	f1 e0       	ldi	r31, 0x01	; 1
    1386:	80 81       	ld	r24, Z
    1388:	80 62       	ori	r24, 0x20	; 32
    138a:	80 83       	st	Z, r24
	SET	(DD_B1);
    138c:	80 81       	ld	r24, Z
    138e:	80 64       	ori	r24, 0x40	; 64
    1390:	80 83       	st	Z, r24

	PWM_OCR1 = 0;	
    1392:	10 92 8b 00 	sts	0x008B, r1
    1396:	10 92 8a 00 	sts	0x008A, r1
    139a:	08 95       	ret

0000139c <_ZN5Motor11SetOcrValueEi>:
}


void Motor::SetOcrValue(int Ocr)
{
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	8c 01       	movw	r16, r24
    13a6:	eb 01       	movw	r28, r22
    if (Ocr > 0)
    13a8:	1c 16       	cp	r1, r28
    13aa:	1d 06       	cpc	r1, r29
    13ac:	0c f4       	brge	.+2      	; 0x13b0 <_ZN5Motor11SetOcrValueEi+0x14>
		//SetReverseDirection();
		SetForwardDirection();
    13ae:	d7 df       	rcall	.-82     	; 0x135e <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
    13b0:	c9 3f       	cpi	r28, 0xF9	; 249
    13b2:	d1 05       	cpc	r29, r1
    13b4:	44 f4       	brge	.+16     	; 0x13c6 <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
		
	if(Ocr < 0)
    13b6:	dd 23       	and	r29, r29
    13b8:	44 f4       	brge	.+16     	; 0x13ca <_ZN5Motor11SetOcrValueEi+0x2e>
	 {
		Ocr = -Ocr;
    13ba:	d1 95       	neg	r29
    13bc:	c1 95       	neg	r28
    13be:	d1 09       	sbc	r29, r1
		//SetForwardDirection();
		SetReverseDirection();   
    13c0:	c8 01       	movw	r24, r16
    13c2:	d6 df       	rcall	.-84     	; 0x1370 <_ZN5Motor19SetReverseDirectionEv>
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <_ZN5Motor11SetOcrValueEi+0x2e>
{
    if (Ocr > 0)
		//SetReverseDirection();
		SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
    13c6:	c9 ef       	ldi	r28, 0xF9	; 249
    13c8:	d0 e0       	ldi	r29, 0x00	; 0
	 {
		Ocr = -Ocr;
		//SetForwardDirection();
		SetReverseDirection();   
	 }
	PWM_OCR1	= Ocr;
    13ca:	d0 93 8b 00 	sts	0x008B, r29
    13ce:	c0 93 8a 00 	sts	0x008A, r28
		
}
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	08 95       	ret

000013dc <_ZN5Motor10InitialiseEv>:
#include "Motor.h"



void Motor::Initialise()
{
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	ec 01       	movw	r28, r24
	InitPWM();
    13e2:	a3 df       	rcall	.-186    	; 0x132a <_ZN5Motor7InitPWMEv>

	StopMotor();
    13e4:	ce 01       	movw	r24, r28
    13e6:	cd df       	rcall	.-102    	; 0x1382 <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	ce 01       	movw	r24, r28
    13ee:	d6 df       	rcall	.-84     	; 0x139c <_ZN5Motor11SetOcrValueEi>

}
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <_Z9constrainRfff>:
 */  
#include "PID.h"
#include "headers.h"

void constrain(float &val,float minVal,float maxVal)
{
    13f6:	8f 92       	push	r8
    13f8:	9f 92       	push	r9
    13fa:	af 92       	push	r10
    13fc:	bf 92       	push	r11
    13fe:	cf 92       	push	r12
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	ec 01       	movw	r28, r24
    1410:	4a 01       	movw	r8, r20
    1412:	5b 01       	movw	r10, r22
    1414:	68 01       	movw	r12, r16
    1416:	79 01       	movw	r14, r18
	if(val < minVal)
    1418:	9a 01       	movw	r18, r20
    141a:	ab 01       	movw	r20, r22
    141c:	68 81       	ld	r22, Y
    141e:	79 81       	ldd	r23, Y+1	; 0x01
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	9b 81       	ldd	r25, Y+3	; 0x03
    1424:	9b d2       	rcall	.+1334   	; 0x195c <__cmpsf2>
    1426:	88 23       	and	r24, r24
    1428:	24 f4       	brge	.+8      	; 0x1432 <_Z9constrainRfff+0x3c>
		val = minVal;
    142a:	88 82       	st	Y, r8
    142c:	99 82       	std	Y+1, r9	; 0x01
    142e:	aa 82       	std	Y+2, r10	; 0x02
    1430:	bb 82       	std	Y+3, r11	; 0x03
	if(val > maxVal)
    1432:	a7 01       	movw	r20, r14
    1434:	96 01       	movw	r18, r12
    1436:	68 81       	ld	r22, Y
    1438:	79 81       	ldd	r23, Y+1	; 0x01
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	9b 81       	ldd	r25, Y+3	; 0x03
    143e:	dd d3       	rcall	.+1978   	; 0x1bfa <__gesf2>
    1440:	18 16       	cp	r1, r24
    1442:	24 f4       	brge	.+8      	; 0x144c <_Z9constrainRfff+0x56>
		val = maxVal;
    1444:	c8 82       	st	Y, r12
    1446:	d9 82       	std	Y+1, r13	; 0x01
    1448:	ea 82       	std	Y+2, r14	; 0x02
    144a:	fb 82       	std	Y+3, r15	; 0x03
}
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	9f 90       	pop	r9
    1462:	8f 90       	pop	r8
    1464:	08 95       	ret

00001466 <_ZN3PID10InitializeEv>:

void PID::Initialize()
{
    1466:	fc 01       	movw	r30, r24
	kp         =  0;
    1468:	11 82       	std	Z+1, r1	; 0x01
    146a:	12 82       	std	Z+2, r1	; 0x02
    146c:	13 82       	std	Z+3, r1	; 0x03
    146e:	14 82       	std	Z+4, r1	; 0x04
	ki         =  0;
    1470:	15 82       	std	Z+5, r1	; 0x05
    1472:	16 82       	std	Z+6, r1	; 0x06
    1474:	17 82       	std	Z+7, r1	; 0x07
    1476:	10 86       	std	Z+8, r1	; 0x08
	kd         =  0;
    1478:	11 86       	std	Z+9, r1	; 0x09
    147a:	12 86       	std	Z+10, r1	; 0x0a
    147c:	13 86       	std	Z+11, r1	; 0x0b
    147e:	14 86       	std	Z+12, r1	; 0x0c
	error      =  0;
    1480:	11 8e       	std	Z+25, r1	; 0x19
    1482:	12 8e       	std	Z+26, r1	; 0x1a
    1484:	13 8e       	std	Z+27, r1	; 0x1b
    1486:	14 8e       	std	Z+28, r1	; 0x1c
	errSum     =  0;
    1488:	15 86       	std	Z+13, r1	; 0x0d
    148a:	16 86       	std	Z+14, r1	; 0x0e
    148c:	17 86       	std	Z+15, r1	; 0x0f
    148e:	10 8a       	std	Z+16, r1	; 0x10
	lastinput  =  0;
    1490:	15 a2       	std	Z+37, r1	; 0x25
    1492:	16 a2       	std	Z+38, r1	; 0x26
    1494:	17 a2       	std	Z+39, r1	; 0x27
    1496:	10 a6       	std	Z+40, r1	; 0x28
	offset     =  0;
    1498:	11 a6       	std	Z+41, r1	; 0x29
    149a:	12 a6       	std	Z+42, r1	; 0x2a
    149c:	13 a6       	std	Z+43, r1	; 0x2b
    149e:	14 a6       	std	Z+44, r1	; 0x2c
	setPoint   =  0;
    14a0:	16 a6       	std	Z+46, r1	; 0x2e
    14a2:	15 a6       	std	Z+45, r1	; 0x2d
	PID_Flag   =  true;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	80 83       	st	Z, r24
    14a8:	08 95       	ret

000014aa <_ZN3PID7Set_PIDEfff>:
}
void PID::Set_PID(float KP,float KI,float KD)
{
    14aa:	cf 92       	push	r12
    14ac:	df 92       	push	r13
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	fc 01       	movw	r30, r24
	kp = KP;
    14b8:	41 83       	std	Z+1, r20	; 0x01
    14ba:	52 83       	std	Z+2, r21	; 0x02
    14bc:	63 83       	std	Z+3, r22	; 0x03
    14be:	74 83       	std	Z+4, r23	; 0x04
	ki = KI;
    14c0:	05 83       	std	Z+5, r16	; 0x05
    14c2:	16 83       	std	Z+6, r17	; 0x06
    14c4:	27 83       	std	Z+7, r18	; 0x07
    14c6:	30 87       	std	Z+8, r19	; 0x08
	kd = KD;
    14c8:	c1 86       	std	Z+9, r12	; 0x09
    14ca:	d2 86       	std	Z+10, r13	; 0x0a
    14cc:	e3 86       	std	Z+11, r14	; 0x0b
    14ce:	f4 86       	std	Z+12, r15	; 0x0c
}
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	cf 90       	pop	r12
    14dc:	08 95       	ret

000014de <_ZN3PID11Compute_PIDEf>:
float PID::Compute_PID(float input)
{
    14de:	4f 92       	push	r4
    14e0:	5f 92       	push	r5
    14e2:	6f 92       	push	r6
    14e4:	7f 92       	push	r7
    14e6:	8f 92       	push	r8
    14e8:	9f 92       	push	r9
    14ea:	af 92       	push	r10
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
    1500:	6a 01       	movw	r12, r20
    1502:	7b 01       	movw	r14, r22
		error   = setPoint - input;
    1504:	6d a5       	ldd	r22, Y+45	; 0x2d
    1506:	7e a5       	ldd	r23, Y+46	; 0x2e
    1508:	07 2e       	mov	r0, r23
    150a:	00 0c       	add	r0, r0
    150c:	88 0b       	sbc	r24, r24
    150e:	99 0b       	sbc	r25, r25
    1510:	c4 d2       	rcall	.+1416   	; 0x1a9a <__floatsisf>
    1512:	a7 01       	movw	r20, r14
    1514:	96 01       	movw	r18, r12
    1516:	bd d1       	rcall	.+890    	; 0x1892 <__subsf3>
    1518:	4b 01       	movw	r8, r22
    151a:	5c 01       	movw	r10, r24
    151c:	69 8f       	std	Y+25, r22	; 0x19
    151e:	7a 8f       	std	Y+26, r23	; 0x1a
    1520:	8b 8f       	std	Y+27, r24	; 0x1b
    1522:	9c 8f       	std	Y+28, r25	; 0x1c
 		Iterm += (ki*error);
    1524:	2d 81       	ldd	r18, Y+5	; 0x05
    1526:	3e 81       	ldd	r19, Y+6	; 0x06
    1528:	4f 81       	ldd	r20, Y+7	; 0x07
    152a:	58 85       	ldd	r21, Y+8	; 0x08
    152c:	6a d3       	rcall	.+1748   	; 0x1c02 <__mulsf3>
    152e:	29 a1       	ldd	r18, Y+33	; 0x21
    1530:	3a a1       	ldd	r19, Y+34	; 0x22
    1532:	4b a1       	ldd	r20, Y+35	; 0x23
    1534:	5c a1       	ldd	r21, Y+36	; 0x24
    1536:	ae d1       	rcall	.+860    	; 0x1894 <__addsf3>
    1538:	2b 01       	movw	r4, r22
    153a:	3c 01       	movw	r6, r24
    153c:	69 a3       	std	Y+33, r22	; 0x21
    153e:	7a a3       	std	Y+34, r23	; 0x22
    1540:	8b a3       	std	Y+35, r24	; 0x23
    1542:	9c a3       	std	Y+36, r25	; 0x24

		float dErr = (input - lastinput);
		
		output = kp * error + Iterm - kd * dErr;
    1544:	29 81       	ldd	r18, Y+1	; 0x01
    1546:	3a 81       	ldd	r19, Y+2	; 0x02
    1548:	4b 81       	ldd	r20, Y+3	; 0x03
    154a:	5c 81       	ldd	r21, Y+4	; 0x04
    154c:	c5 01       	movw	r24, r10
    154e:	b4 01       	movw	r22, r8
    1550:	58 d3       	rcall	.+1712   	; 0x1c02 <__mulsf3>
    1552:	9b 01       	movw	r18, r22
    1554:	ac 01       	movw	r20, r24
    1556:	c3 01       	movw	r24, r6
    1558:	b2 01       	movw	r22, r4
    155a:	9c d1       	rcall	.+824    	; 0x1894 <__addsf3>
    155c:	4b 01       	movw	r8, r22
    155e:	5c 01       	movw	r10, r24
float PID::Compute_PID(float input)
{
		error   = setPoint - input;
 		Iterm += (ki*error);

		float dErr = (input - lastinput);
    1560:	2d a1       	ldd	r18, Y+37	; 0x25
    1562:	3e a1       	ldd	r19, Y+38	; 0x26
    1564:	4f a1       	ldd	r20, Y+39	; 0x27
    1566:	58 a5       	ldd	r21, Y+40	; 0x28
    1568:	c7 01       	movw	r24, r14
    156a:	b6 01       	movw	r22, r12
    156c:	92 d1       	rcall	.+804    	; 0x1892 <__subsf3>
		
		output = kp * error + Iterm - kd * dErr;
    156e:	29 85       	ldd	r18, Y+9	; 0x09
    1570:	3a 85       	ldd	r19, Y+10	; 0x0a
    1572:	4b 85       	ldd	r20, Y+11	; 0x0b
    1574:	5c 85       	ldd	r21, Y+12	; 0x0c
    1576:	45 d3       	rcall	.+1674   	; 0x1c02 <__mulsf3>
    1578:	9b 01       	movw	r18, r22
    157a:	ac 01       	movw	r20, r24
    157c:	c5 01       	movw	r24, r10
    157e:	b4 01       	movw	r22, r8
    1580:	88 d1       	rcall	.+784    	; 0x1892 <__subsf3>
    1582:	6d 8f       	std	Y+29, r22	; 0x1d
    1584:	7e 8f       	std	Y+30, r23	; 0x1e
    1586:	8f 8f       	std	Y+31, r24	; 0x1f
    1588:	98 a3       	std	Y+32, r25	; 0x20
	
		constrain(output,minOut,maxOut);
    158a:	09 89       	ldd	r16, Y+17	; 0x11
    158c:	1a 89       	ldd	r17, Y+18	; 0x12
    158e:	2b 89       	ldd	r18, Y+19	; 0x13
    1590:	3c 89       	ldd	r19, Y+20	; 0x14
    1592:	4d 89       	ldd	r20, Y+21	; 0x15
    1594:	5e 89       	ldd	r21, Y+22	; 0x16
    1596:	6f 89       	ldd	r22, Y+23	; 0x17
    1598:	78 8d       	ldd	r23, Y+24	; 0x18
    159a:	ce 01       	movw	r24, r28
    159c:	4d 96       	adiw	r24, 0x1d	; 29
    159e:	2b df       	rcall	.-426    	; 0x13f6 <_Z9constrainRfff>
		//Remember some variables for next time
		lastinput = input;
    15a0:	cd a2       	std	Y+37, r12	; 0x25
    15a2:	de a2       	std	Y+38, r13	; 0x26
    15a4:	ef a2       	std	Y+39, r14	; 0x27
    15a6:	f8 a6       	std	Y+40, r15	; 0x28

	return output;
    15a8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15aa:	7e 8d       	ldd	r23, Y+30	; 0x1e
    15ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15ae:	98 a1       	ldd	r25, Y+32	; 0x20
}
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	df 90       	pop	r13
    15be:	cf 90       	pop	r12
    15c0:	bf 90       	pop	r11
    15c2:	af 90       	pop	r10
    15c4:	9f 90       	pop	r9
    15c6:	8f 90       	pop	r8
    15c8:	7f 90       	pop	r7
    15ca:	6f 90       	pop	r6
    15cc:	5f 90       	pop	r5
    15ce:	4f 90       	pop	r4
    15d0:	08 95       	ret

000015d2 <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
    15d2:	1f 92       	push	r1
    15d4:	0f 92       	push	r0
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	0f 92       	push	r0
    15da:	11 24       	eor	r1, r1
    15dc:	0b b6       	in	r0, 0x3b	; 59
    15de:	0f 92       	push	r0
    15e0:	2f 93       	push	r18
    15e2:	8f 93       	push	r24
    15e4:	9f 93       	push	r25
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
    15ea:	80 91 c0 00 	lds	r24, 0x00C0
    15ee:	20 91 c6 00 	lds	r18, 0x00C6
    15f2:	88 71       	andi	r24, 0x18	; 24
    15f4:	e0 91 7b 03 	lds	r30, 0x037B
    15f8:	ef 5f       	subi	r30, 0xFF	; 255
    15fa:	ef 71       	andi	r30, 0x1F	; 31
    15fc:	90 91 7a 03 	lds	r25, 0x037A
    1600:	e9 17       	cp	r30, r25
    1602:	39 f0       	breq	.+14     	; 0x1612 <__vector_25+0x40>
    1604:	e0 93 7b 03 	sts	0x037B, r30
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	e2 58       	subi	r30, 0x82	; 130
    160c:	fc 4f       	sbci	r31, 0xFC	; 252
    160e:	20 83       	st	Z, r18
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <__vector_25+0x42>
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	80 93 79 03 	sts	0x0379, r24
    1618:	ff 91       	pop	r31
    161a:	ef 91       	pop	r30
    161c:	9f 91       	pop	r25
    161e:	8f 91       	pop	r24
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	0b be       	out	0x3b, r0	; 59
    1626:	0f 90       	pop	r0
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	0f 90       	pop	r0
    162c:	1f 90       	pop	r1
    162e:	18 95       	reti

00001630 <__vector_26>:
    1630:	1f 92       	push	r1
    1632:	0f 92       	push	r0
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	0f 92       	push	r0
    1638:	11 24       	eor	r1, r1
    163a:	0b b6       	in	r0, 0x3b	; 59
    163c:	0f 92       	push	r0
    163e:	8f 93       	push	r24
    1640:	9f 93       	push	r25
    1642:	ef 93       	push	r30
    1644:	ff 93       	push	r31
    1646:	90 91 7d 03 	lds	r25, 0x037D
    164a:	80 91 7c 03 	lds	r24, 0x037C
    164e:	98 17       	cp	r25, r24
    1650:	69 f0       	breq	.+26     	; 0x166c <__vector_26+0x3c>
    1652:	e0 91 7c 03 	lds	r30, 0x037C
    1656:	ef 5f       	subi	r30, 0xFF	; 255
    1658:	ef 71       	andi	r30, 0x1F	; 31
    165a:	e0 93 7c 03 	sts	0x037C, r30
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	e2 56       	subi	r30, 0x62	; 98
    1662:	fc 4f       	sbci	r31, 0xFC	; 252
    1664:	80 81       	ld	r24, Z
    1666:	80 93 c6 00 	sts	0x00C6, r24
    166a:	05 c0       	rjmp	.+10     	; 0x1676 <__vector_26+0x46>
    166c:	e1 ec       	ldi	r30, 0xC1	; 193
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	8f 7d       	andi	r24, 0xDF	; 223
    1674:	80 83       	st	Z, r24
    1676:	ff 91       	pop	r31
    1678:	ef 91       	pop	r30
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	0f 90       	pop	r0
    1680:	0b be       	out	0x3b, r0	; 59
    1682:	0f 90       	pop	r0
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	0f 90       	pop	r0
    1688:	1f 90       	pop	r1
    168a:	18 95       	reti

0000168c <__vector_51>:
    168c:	1f 92       	push	r1
    168e:	0f 92       	push	r0
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	0f 92       	push	r0
    1694:	11 24       	eor	r1, r1
    1696:	0b b6       	in	r0, 0x3b	; 59
    1698:	0f 92       	push	r0
    169a:	2f 93       	push	r18
    169c:	8f 93       	push	r24
    169e:	9f 93       	push	r25
    16a0:	ef 93       	push	r30
    16a2:	ff 93       	push	r31
    16a4:	80 91 d0 00 	lds	r24, 0x00D0
    16a8:	20 91 d6 00 	lds	r18, 0x00D6
    16ac:	88 71       	andi	r24, 0x18	; 24
    16ae:	e0 91 36 03 	lds	r30, 0x0336
    16b2:	ef 5f       	subi	r30, 0xFF	; 255
    16b4:	ef 71       	andi	r30, 0x1F	; 31
    16b6:	90 91 35 03 	lds	r25, 0x0335
    16ba:	e9 17       	cp	r30, r25
    16bc:	39 f0       	breq	.+14     	; 0x16cc <__vector_51+0x40>
    16be:	e0 93 36 03 	sts	0x0336, r30
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	e7 5c       	subi	r30, 0xC7	; 199
    16c6:	fc 4f       	sbci	r31, 0xFC	; 252
    16c8:	20 83       	st	Z, r18
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <__vector_51+0x42>
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	80 93 34 03 	sts	0x0334, r24
    16d2:	ff 91       	pop	r31
    16d4:	ef 91       	pop	r30
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	2f 91       	pop	r18
    16dc:	0f 90       	pop	r0
    16de:	0b be       	out	0x3b, r0	; 59
    16e0:	0f 90       	pop	r0
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	0f 90       	pop	r0
    16e6:	1f 90       	pop	r1
    16e8:	18 95       	reti

000016ea <__vector_52>:
    16ea:	1f 92       	push	r1
    16ec:	0f 92       	push	r0
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	0f 92       	push	r0
    16f2:	11 24       	eor	r1, r1
    16f4:	0b b6       	in	r0, 0x3b	; 59
    16f6:	0f 92       	push	r0
    16f8:	8f 93       	push	r24
    16fa:	9f 93       	push	r25
    16fc:	ef 93       	push	r30
    16fe:	ff 93       	push	r31
    1700:	90 91 38 03 	lds	r25, 0x0338
    1704:	80 91 37 03 	lds	r24, 0x0337
    1708:	98 17       	cp	r25, r24
    170a:	69 f0       	breq	.+26     	; 0x1726 <__vector_52+0x3c>
    170c:	e0 91 37 03 	lds	r30, 0x0337
    1710:	ef 5f       	subi	r30, 0xFF	; 255
    1712:	ef 71       	andi	r30, 0x1F	; 31
    1714:	e0 93 37 03 	sts	0x0337, r30
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	e7 5a       	subi	r30, 0xA7	; 167
    171c:	fc 4f       	sbci	r31, 0xFC	; 252
    171e:	80 81       	ld	r24, Z
    1720:	80 93 d6 00 	sts	0x00D6, r24
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <__vector_52+0x46>
    1726:	e1 ed       	ldi	r30, 0xD1	; 209
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	8f 7d       	andi	r24, 0xDF	; 223
    172e:	80 83       	st	Z, r24
    1730:	ff 91       	pop	r31
    1732:	ef 91       	pop	r30
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	0f 90       	pop	r0
    173a:	0b be       	out	0x3b, r0	; 59
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    1746:	1f 92       	push	r1
    1748:	0f 92       	push	r0
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	0f 92       	push	r0
    174e:	11 24       	eor	r1, r1
    1750:	0b b6       	in	r0, 0x3b	; 59
    1752:	0f 92       	push	r0
    1754:	2f 93       	push	r18
    1756:	8f 93       	push	r24
    1758:	9f 93       	push	r25
    175a:	ef 93       	push	r30
    175c:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    175e:	80 91 30 01 	lds	r24, 0x0130
	data = UART3_DATA;
    1762:	20 91 36 01 	lds	r18, 0x0136
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    1766:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    1768:	e0 91 f1 02 	lds	r30, 0x02F1
    176c:	ef 5f       	subi	r30, 0xFF	; 255
    176e:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    1770:	90 91 f0 02 	lds	r25, 0x02F0
    1774:	e9 17       	cp	r30, r25
    1776:	39 f0       	breq	.+14     	; 0x1786 <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    1778:	e0 93 f1 02 	sts	0x02F1, r30
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	ec 50       	subi	r30, 0x0C	; 12
    1780:	fd 4f       	sbci	r31, 0xFD	; 253
    1782:	20 83       	st	Z, r18
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1786:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    1788:	80 93 ef 02 	sts	0x02EF, r24
}
    178c:	ff 91       	pop	r31
    178e:	ef 91       	pop	r30
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	2f 91       	pop	r18
    1796:	0f 90       	pop	r0
    1798:	0b be       	out	0x3b, r0	; 59
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    17a4:	1f 92       	push	r1
    17a6:	0f 92       	push	r0
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	0f 92       	push	r0
    17ac:	11 24       	eor	r1, r1
    17ae:	0b b6       	in	r0, 0x3b	; 59
    17b0:	0f 92       	push	r0
    17b2:	8f 93       	push	r24
    17b4:	9f 93       	push	r25
    17b6:	ef 93       	push	r30
    17b8:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    17ba:	90 91 f3 02 	lds	r25, 0x02F3
    17be:	80 91 f2 02 	lds	r24, 0x02F2
    17c2:	98 17       	cp	r25, r24
    17c4:	69 f0       	breq	.+26     	; 0x17e0 <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    17c6:	e0 91 f2 02 	lds	r30, 0x02F2
    17ca:	ef 5f       	subi	r30, 0xFF	; 255
    17cc:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    17ce:	e0 93 f2 02 	sts	0x02F2, r30
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	ec 5e       	subi	r30, 0xEC	; 236
    17d6:	fc 4f       	sbci	r31, 0xFC	; 252
    17d8:	80 81       	ld	r24, Z
    17da:	80 93 36 01 	sts	0x0136, r24
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    17e0:	e1 e3       	ldi	r30, 0x31	; 49
    17e2:	f1 e0       	ldi	r31, 0x01	; 1
    17e4:	80 81       	ld	r24, Z
    17e6:	8f 7d       	andi	r24, 0xDF	; 223
    17e8:	80 83       	st	Z, r24
	}
}
    17ea:	ff 91       	pop	r31
    17ec:	ef 91       	pop	r30
    17ee:	9f 91       	pop	r25
    17f0:	8f 91       	pop	r24
    17f2:	0f 90       	pop	r0
    17f4:	0b be       	out	0x3b, r0	; 59
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0
    17fc:	1f 90       	pop	r1
    17fe:	18 95       	reti

00001800 <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
    1800:	10 92 f3 02 	sts	0x02F3, r1
	UART3_TxTail = 0;
    1804:	10 92 f2 02 	sts	0x02F2, r1
	UART3_RxHead = 0;
    1808:	10 92 f1 02 	sts	0x02F1, r1
	UART3_RxTail = 0;
    180c:	10 92 f0 02 	sts	0x02F0, r1


	/* Set baud rate */
	if (baudrate & 0x8000)
    1810:	99 23       	and	r25, r25
    1812:	24 f4       	brge	.+8      	; 0x181c <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
    1814:	26 e0       	ldi	r18, 0x06	; 6
    1816:	20 93 30 01 	sts	0x0130, r18
		baudrate &= ~0x8000;
    181a:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
    181c:	90 93 35 01 	sts	0x0135, r25
	UBRR3L = (unsigned char)baudrate;
    1820:	80 93 34 01 	sts	0x0134, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    1824:	88 e9       	ldi	r24, 0x98	; 152
    1826:	80 93 31 01 	sts	0x0131, r24

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
    182a:	86 e0       	ldi	r24, 0x06	; 6
    182c:	80 93 32 01 	sts	0x0132, r24
    1830:	08 95       	ret

00001832 <_Z10uart3_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
    1832:	90 91 f1 02 	lds	r25, 0x02F1
    1836:	80 91 f0 02 	lds	r24, 0x02F0
    183a:	98 17       	cp	r25, r24
    183c:	91 f0       	breq	.+36     	; 0x1862 <_Z10uart3_getcv+0x30>
		 return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART3_RxTail + 1) & UART_RX_BUFFER_MASK;
    183e:	e0 91 f0 02 	lds	r30, 0x02F0
    1842:	ef 5f       	subi	r30, 0xFF	; 255
    1844:	ef 71       	andi	r30, 0x1F	; 31
	UART3_RxTail = tmptail;
    1846:	e0 93 f0 02 	sts	0x02F0, r30

	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	ec 50       	subi	r30, 0x0C	; 12
    184e:	fd 4f       	sbci	r31, 0xFD	; 253
    1850:	20 81       	ld	r18, Z

	return (UART3_LastRxError << 8) + data;
    1852:	80 91 ef 02 	lds	r24, 0x02EF
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	98 2f       	mov	r25, r24
    185a:	88 27       	eor	r24, r24
    185c:	82 0f       	add	r24, r18
    185e:	91 1d       	adc	r25, r1
    1860:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
		 return UART_NO_DATA;   /* no data available */
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    1866:	08 95       	ret

00001868 <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    1868:	20 91 f3 02 	lds	r18, 0x02F3
    186c:	2f 5f       	subi	r18, 0xFF	; 255
    186e:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    1870:	90 91 f2 02 	lds	r25, 0x02F2
    1874:	29 17       	cp	r18, r25
    1876:	e1 f3       	breq	.-8      	; 0x1870 <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    1878:	e2 2f       	mov	r30, r18
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	ec 5e       	subi	r30, 0xEC	; 236
    187e:	fc 4f       	sbci	r31, 0xFC	; 252
    1880:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    1882:	20 93 f3 02 	sts	0x02F3, r18

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    1886:	e1 e3       	ldi	r30, 0x31	; 49
    1888:	f1 e0       	ldi	r31, 0x01	; 1
    188a:	80 81       	ld	r24, Z
    188c:	80 62       	ori	r24, 0x20	; 32
    188e:	80 83       	st	Z, r24
    1890:	08 95       	ret

00001892 <__subsf3>:
    1892:	50 58       	subi	r21, 0x80	; 128

00001894 <__addsf3>:
    1894:	bb 27       	eor	r27, r27
    1896:	aa 27       	eor	r26, r26
    1898:	0e d0       	rcall	.+28     	; 0x18b6 <__addsf3x>
    189a:	75 c1       	rjmp	.+746    	; 0x1b86 <__fp_round>
    189c:	66 d1       	rcall	.+716    	; 0x1b6a <__fp_pscA>
    189e:	30 f0       	brcs	.+12     	; 0x18ac <__addsf3+0x18>
    18a0:	6b d1       	rcall	.+726    	; 0x1b78 <__fp_pscB>
    18a2:	20 f0       	brcs	.+8      	; 0x18ac <__addsf3+0x18>
    18a4:	31 f4       	brne	.+12     	; 0x18b2 <__addsf3+0x1e>
    18a6:	9f 3f       	cpi	r25, 0xFF	; 255
    18a8:	11 f4       	brne	.+4      	; 0x18ae <__addsf3+0x1a>
    18aa:	1e f4       	brtc	.+6      	; 0x18b2 <__addsf3+0x1e>
    18ac:	5b c1       	rjmp	.+694    	; 0x1b64 <__fp_nan>
    18ae:	0e f4       	brtc	.+2      	; 0x18b2 <__addsf3+0x1e>
    18b0:	e0 95       	com	r30
    18b2:	e7 fb       	bst	r30, 7
    18b4:	51 c1       	rjmp	.+674    	; 0x1b58 <__fp_inf>

000018b6 <__addsf3x>:
    18b6:	e9 2f       	mov	r30, r25
    18b8:	77 d1       	rcall	.+750    	; 0x1ba8 <__fp_split3>
    18ba:	80 f3       	brcs	.-32     	; 0x189c <__addsf3+0x8>
    18bc:	ba 17       	cp	r27, r26
    18be:	62 07       	cpc	r22, r18
    18c0:	73 07       	cpc	r23, r19
    18c2:	84 07       	cpc	r24, r20
    18c4:	95 07       	cpc	r25, r21
    18c6:	18 f0       	brcs	.+6      	; 0x18ce <__addsf3x+0x18>
    18c8:	71 f4       	brne	.+28     	; 0x18e6 <__addsf3x+0x30>
    18ca:	9e f5       	brtc	.+102    	; 0x1932 <__addsf3x+0x7c>
    18cc:	8f c1       	rjmp	.+798    	; 0x1bec <__fp_zero>
    18ce:	0e f4       	brtc	.+2      	; 0x18d2 <__addsf3x+0x1c>
    18d0:	e0 95       	com	r30
    18d2:	0b 2e       	mov	r0, r27
    18d4:	ba 2f       	mov	r27, r26
    18d6:	a0 2d       	mov	r26, r0
    18d8:	0b 01       	movw	r0, r22
    18da:	b9 01       	movw	r22, r18
    18dc:	90 01       	movw	r18, r0
    18de:	0c 01       	movw	r0, r24
    18e0:	ca 01       	movw	r24, r20
    18e2:	a0 01       	movw	r20, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	ff 27       	eor	r31, r31
    18e8:	59 1b       	sub	r21, r25
    18ea:	99 f0       	breq	.+38     	; 0x1912 <__addsf3x+0x5c>
    18ec:	59 3f       	cpi	r21, 0xF9	; 249
    18ee:	50 f4       	brcc	.+20     	; 0x1904 <__addsf3x+0x4e>
    18f0:	50 3e       	cpi	r21, 0xE0	; 224
    18f2:	68 f1       	brcs	.+90     	; 0x194e <__addsf3x+0x98>
    18f4:	1a 16       	cp	r1, r26
    18f6:	f0 40       	sbci	r31, 0x00	; 0
    18f8:	a2 2f       	mov	r26, r18
    18fa:	23 2f       	mov	r18, r19
    18fc:	34 2f       	mov	r19, r20
    18fe:	44 27       	eor	r20, r20
    1900:	58 5f       	subi	r21, 0xF8	; 248
    1902:	f3 cf       	rjmp	.-26     	; 0x18ea <__addsf3x+0x34>
    1904:	46 95       	lsr	r20
    1906:	37 95       	ror	r19
    1908:	27 95       	ror	r18
    190a:	a7 95       	ror	r26
    190c:	f0 40       	sbci	r31, 0x00	; 0
    190e:	53 95       	inc	r21
    1910:	c9 f7       	brne	.-14     	; 0x1904 <__addsf3x+0x4e>
    1912:	7e f4       	brtc	.+30     	; 0x1932 <__addsf3x+0x7c>
    1914:	1f 16       	cp	r1, r31
    1916:	ba 0b       	sbc	r27, r26
    1918:	62 0b       	sbc	r22, r18
    191a:	73 0b       	sbc	r23, r19
    191c:	84 0b       	sbc	r24, r20
    191e:	ba f0       	brmi	.+46     	; 0x194e <__addsf3x+0x98>
    1920:	91 50       	subi	r25, 0x01	; 1
    1922:	a1 f0       	breq	.+40     	; 0x194c <__addsf3x+0x96>
    1924:	ff 0f       	add	r31, r31
    1926:	bb 1f       	adc	r27, r27
    1928:	66 1f       	adc	r22, r22
    192a:	77 1f       	adc	r23, r23
    192c:	88 1f       	adc	r24, r24
    192e:	c2 f7       	brpl	.-16     	; 0x1920 <__addsf3x+0x6a>
    1930:	0e c0       	rjmp	.+28     	; 0x194e <__addsf3x+0x98>
    1932:	ba 0f       	add	r27, r26
    1934:	62 1f       	adc	r22, r18
    1936:	73 1f       	adc	r23, r19
    1938:	84 1f       	adc	r24, r20
    193a:	48 f4       	brcc	.+18     	; 0x194e <__addsf3x+0x98>
    193c:	87 95       	ror	r24
    193e:	77 95       	ror	r23
    1940:	67 95       	ror	r22
    1942:	b7 95       	ror	r27
    1944:	f7 95       	ror	r31
    1946:	9e 3f       	cpi	r25, 0xFE	; 254
    1948:	08 f0       	brcs	.+2      	; 0x194c <__addsf3x+0x96>
    194a:	b3 cf       	rjmp	.-154    	; 0x18b2 <__addsf3+0x1e>
    194c:	93 95       	inc	r25
    194e:	88 0f       	add	r24, r24
    1950:	08 f0       	brcs	.+2      	; 0x1954 <__addsf3x+0x9e>
    1952:	99 27       	eor	r25, r25
    1954:	ee 0f       	add	r30, r30
    1956:	97 95       	ror	r25
    1958:	87 95       	ror	r24
    195a:	08 95       	ret

0000195c <__cmpsf2>:
    195c:	d9 d0       	rcall	.+434    	; 0x1b10 <__fp_cmp>
    195e:	08 f4       	brcc	.+2      	; 0x1962 <__cmpsf2+0x6>
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	08 95       	ret

00001964 <__divsf3>:
    1964:	0c d0       	rcall	.+24     	; 0x197e <__divsf3x>
    1966:	0f c1       	rjmp	.+542    	; 0x1b86 <__fp_round>
    1968:	07 d1       	rcall	.+526    	; 0x1b78 <__fp_pscB>
    196a:	40 f0       	brcs	.+16     	; 0x197c <__divsf3+0x18>
    196c:	fe d0       	rcall	.+508    	; 0x1b6a <__fp_pscA>
    196e:	30 f0       	brcs	.+12     	; 0x197c <__divsf3+0x18>
    1970:	21 f4       	brne	.+8      	; 0x197a <__divsf3+0x16>
    1972:	5f 3f       	cpi	r21, 0xFF	; 255
    1974:	19 f0       	breq	.+6      	; 0x197c <__divsf3+0x18>
    1976:	f0 c0       	rjmp	.+480    	; 0x1b58 <__fp_inf>
    1978:	51 11       	cpse	r21, r1
    197a:	39 c1       	rjmp	.+626    	; 0x1bee <__fp_szero>
    197c:	f3 c0       	rjmp	.+486    	; 0x1b64 <__fp_nan>

0000197e <__divsf3x>:
    197e:	14 d1       	rcall	.+552    	; 0x1ba8 <__fp_split3>
    1980:	98 f3       	brcs	.-26     	; 0x1968 <__divsf3+0x4>

00001982 <__divsf3_pse>:
    1982:	99 23       	and	r25, r25
    1984:	c9 f3       	breq	.-14     	; 0x1978 <__divsf3+0x14>
    1986:	55 23       	and	r21, r21
    1988:	b1 f3       	breq	.-20     	; 0x1976 <__divsf3+0x12>
    198a:	95 1b       	sub	r25, r21
    198c:	55 0b       	sbc	r21, r21
    198e:	bb 27       	eor	r27, r27
    1990:	aa 27       	eor	r26, r26
    1992:	62 17       	cp	r22, r18
    1994:	73 07       	cpc	r23, r19
    1996:	84 07       	cpc	r24, r20
    1998:	38 f0       	brcs	.+14     	; 0x19a8 <__divsf3_pse+0x26>
    199a:	9f 5f       	subi	r25, 0xFF	; 255
    199c:	5f 4f       	sbci	r21, 0xFF	; 255
    199e:	22 0f       	add	r18, r18
    19a0:	33 1f       	adc	r19, r19
    19a2:	44 1f       	adc	r20, r20
    19a4:	aa 1f       	adc	r26, r26
    19a6:	a9 f3       	breq	.-22     	; 0x1992 <__divsf3_pse+0x10>
    19a8:	33 d0       	rcall	.+102    	; 0x1a10 <__divsf3_pse+0x8e>
    19aa:	0e 2e       	mov	r0, r30
    19ac:	3a f0       	brmi	.+14     	; 0x19bc <__divsf3_pse+0x3a>
    19ae:	e0 e8       	ldi	r30, 0x80	; 128
    19b0:	30 d0       	rcall	.+96     	; 0x1a12 <__divsf3_pse+0x90>
    19b2:	91 50       	subi	r25, 0x01	; 1
    19b4:	50 40       	sbci	r21, 0x00	; 0
    19b6:	e6 95       	lsr	r30
    19b8:	00 1c       	adc	r0, r0
    19ba:	ca f7       	brpl	.-14     	; 0x19ae <__divsf3_pse+0x2c>
    19bc:	29 d0       	rcall	.+82     	; 0x1a10 <__divsf3_pse+0x8e>
    19be:	fe 2f       	mov	r31, r30
    19c0:	27 d0       	rcall	.+78     	; 0x1a10 <__divsf3_pse+0x8e>
    19c2:	66 0f       	add	r22, r22
    19c4:	77 1f       	adc	r23, r23
    19c6:	88 1f       	adc	r24, r24
    19c8:	bb 1f       	adc	r27, r27
    19ca:	26 17       	cp	r18, r22
    19cc:	37 07       	cpc	r19, r23
    19ce:	48 07       	cpc	r20, r24
    19d0:	ab 07       	cpc	r26, r27
    19d2:	b0 e8       	ldi	r27, 0x80	; 128
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <__divsf3_pse+0x56>
    19d6:	bb 0b       	sbc	r27, r27
    19d8:	80 2d       	mov	r24, r0
    19da:	bf 01       	movw	r22, r30
    19dc:	ff 27       	eor	r31, r31
    19de:	93 58       	subi	r25, 0x83	; 131
    19e0:	5f 4f       	sbci	r21, 0xFF	; 255
    19e2:	2a f0       	brmi	.+10     	; 0x19ee <__divsf3_pse+0x6c>
    19e4:	9e 3f       	cpi	r25, 0xFE	; 254
    19e6:	51 05       	cpc	r21, r1
    19e8:	68 f0       	brcs	.+26     	; 0x1a04 <__divsf3_pse+0x82>
    19ea:	b6 c0       	rjmp	.+364    	; 0x1b58 <__fp_inf>
    19ec:	00 c1       	rjmp	.+512    	; 0x1bee <__fp_szero>
    19ee:	5f 3f       	cpi	r21, 0xFF	; 255
    19f0:	ec f3       	brlt	.-6      	; 0x19ec <__divsf3_pse+0x6a>
    19f2:	98 3e       	cpi	r25, 0xE8	; 232
    19f4:	dc f3       	brlt	.-10     	; 0x19ec <__divsf3_pse+0x6a>
    19f6:	86 95       	lsr	r24
    19f8:	77 95       	ror	r23
    19fa:	67 95       	ror	r22
    19fc:	b7 95       	ror	r27
    19fe:	f7 95       	ror	r31
    1a00:	9f 5f       	subi	r25, 0xFF	; 255
    1a02:	c9 f7       	brne	.-14     	; 0x19f6 <__divsf3_pse+0x74>
    1a04:	88 0f       	add	r24, r24
    1a06:	91 1d       	adc	r25, r1
    1a08:	96 95       	lsr	r25
    1a0a:	87 95       	ror	r24
    1a0c:	97 f9       	bld	r25, 7
    1a0e:	08 95       	ret
    1a10:	e1 e0       	ldi	r30, 0x01	; 1
    1a12:	66 0f       	add	r22, r22
    1a14:	77 1f       	adc	r23, r23
    1a16:	88 1f       	adc	r24, r24
    1a18:	bb 1f       	adc	r27, r27
    1a1a:	62 17       	cp	r22, r18
    1a1c:	73 07       	cpc	r23, r19
    1a1e:	84 07       	cpc	r24, r20
    1a20:	ba 07       	cpc	r27, r26
    1a22:	20 f0       	brcs	.+8      	; 0x1a2c <__divsf3_pse+0xaa>
    1a24:	62 1b       	sub	r22, r18
    1a26:	73 0b       	sbc	r23, r19
    1a28:	84 0b       	sbc	r24, r20
    1a2a:	ba 0b       	sbc	r27, r26
    1a2c:	ee 1f       	adc	r30, r30
    1a2e:	88 f7       	brcc	.-30     	; 0x1a12 <__divsf3_pse+0x90>
    1a30:	e0 95       	com	r30
    1a32:	08 95       	ret

00001a34 <__fixsfsi>:
    1a34:	04 d0       	rcall	.+8      	; 0x1a3e <__fixunssfsi>
    1a36:	68 94       	set
    1a38:	b1 11       	cpse	r27, r1
    1a3a:	d9 c0       	rjmp	.+434    	; 0x1bee <__fp_szero>
    1a3c:	08 95       	ret

00001a3e <__fixunssfsi>:
    1a3e:	bc d0       	rcall	.+376    	; 0x1bb8 <__fp_splitA>
    1a40:	88 f0       	brcs	.+34     	; 0x1a64 <__fixunssfsi+0x26>
    1a42:	9f 57       	subi	r25, 0x7F	; 127
    1a44:	90 f0       	brcs	.+36     	; 0x1a6a <__fixunssfsi+0x2c>
    1a46:	b9 2f       	mov	r27, r25
    1a48:	99 27       	eor	r25, r25
    1a4a:	b7 51       	subi	r27, 0x17	; 23
    1a4c:	a0 f0       	brcs	.+40     	; 0x1a76 <__fixunssfsi+0x38>
    1a4e:	d1 f0       	breq	.+52     	; 0x1a84 <__fixunssfsi+0x46>
    1a50:	66 0f       	add	r22, r22
    1a52:	77 1f       	adc	r23, r23
    1a54:	88 1f       	adc	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	1a f0       	brmi	.+6      	; 0x1a60 <__fixunssfsi+0x22>
    1a5a:	ba 95       	dec	r27
    1a5c:	c9 f7       	brne	.-14     	; 0x1a50 <__fixunssfsi+0x12>
    1a5e:	12 c0       	rjmp	.+36     	; 0x1a84 <__fixunssfsi+0x46>
    1a60:	b1 30       	cpi	r27, 0x01	; 1
    1a62:	81 f0       	breq	.+32     	; 0x1a84 <__fixunssfsi+0x46>
    1a64:	c3 d0       	rcall	.+390    	; 0x1bec <__fp_zero>
    1a66:	b1 e0       	ldi	r27, 0x01	; 1
    1a68:	08 95       	ret
    1a6a:	c0 c0       	rjmp	.+384    	; 0x1bec <__fp_zero>
    1a6c:	67 2f       	mov	r22, r23
    1a6e:	78 2f       	mov	r23, r24
    1a70:	88 27       	eor	r24, r24
    1a72:	b8 5f       	subi	r27, 0xF8	; 248
    1a74:	39 f0       	breq	.+14     	; 0x1a84 <__fixunssfsi+0x46>
    1a76:	b9 3f       	cpi	r27, 0xF9	; 249
    1a78:	cc f3       	brlt	.-14     	; 0x1a6c <__fixunssfsi+0x2e>
    1a7a:	86 95       	lsr	r24
    1a7c:	77 95       	ror	r23
    1a7e:	67 95       	ror	r22
    1a80:	b3 95       	inc	r27
    1a82:	d9 f7       	brne	.-10     	; 0x1a7a <__fixunssfsi+0x3c>
    1a84:	3e f4       	brtc	.+14     	; 0x1a94 <__fixunssfsi+0x56>
    1a86:	90 95       	com	r25
    1a88:	80 95       	com	r24
    1a8a:	70 95       	com	r23
    1a8c:	61 95       	neg	r22
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	8f 4f       	sbci	r24, 0xFF	; 255
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	08 95       	ret

00001a96 <__floatunsisf>:
    1a96:	e8 94       	clt
    1a98:	09 c0       	rjmp	.+18     	; 0x1aac <__floatsisf+0x12>

00001a9a <__floatsisf>:
    1a9a:	97 fb       	bst	r25, 7
    1a9c:	3e f4       	brtc	.+14     	; 0x1aac <__floatsisf+0x12>
    1a9e:	90 95       	com	r25
    1aa0:	80 95       	com	r24
    1aa2:	70 95       	com	r23
    1aa4:	61 95       	neg	r22
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	99 23       	and	r25, r25
    1aae:	a9 f0       	breq	.+42     	; 0x1ada <__floatsisf+0x40>
    1ab0:	f9 2f       	mov	r31, r25
    1ab2:	96 e9       	ldi	r25, 0x96	; 150
    1ab4:	bb 27       	eor	r27, r27
    1ab6:	93 95       	inc	r25
    1ab8:	f6 95       	lsr	r31
    1aba:	87 95       	ror	r24
    1abc:	77 95       	ror	r23
    1abe:	67 95       	ror	r22
    1ac0:	b7 95       	ror	r27
    1ac2:	f1 11       	cpse	r31, r1
    1ac4:	f8 cf       	rjmp	.-16     	; 0x1ab6 <__floatsisf+0x1c>
    1ac6:	fa f4       	brpl	.+62     	; 0x1b06 <__floatsisf+0x6c>
    1ac8:	bb 0f       	add	r27, r27
    1aca:	11 f4       	brne	.+4      	; 0x1ad0 <__floatsisf+0x36>
    1acc:	60 ff       	sbrs	r22, 0
    1ace:	1b c0       	rjmp	.+54     	; 0x1b06 <__floatsisf+0x6c>
    1ad0:	6f 5f       	subi	r22, 0xFF	; 255
    1ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad8:	16 c0       	rjmp	.+44     	; 0x1b06 <__floatsisf+0x6c>
    1ada:	88 23       	and	r24, r24
    1adc:	11 f0       	breq	.+4      	; 0x1ae2 <__floatsisf+0x48>
    1ade:	96 e9       	ldi	r25, 0x96	; 150
    1ae0:	11 c0       	rjmp	.+34     	; 0x1b04 <__floatsisf+0x6a>
    1ae2:	77 23       	and	r23, r23
    1ae4:	21 f0       	breq	.+8      	; 0x1aee <__floatsisf+0x54>
    1ae6:	9e e8       	ldi	r25, 0x8E	; 142
    1ae8:	87 2f       	mov	r24, r23
    1aea:	76 2f       	mov	r23, r22
    1aec:	05 c0       	rjmp	.+10     	; 0x1af8 <__floatsisf+0x5e>
    1aee:	66 23       	and	r22, r22
    1af0:	71 f0       	breq	.+28     	; 0x1b0e <__floatsisf+0x74>
    1af2:	96 e8       	ldi	r25, 0x86	; 134
    1af4:	86 2f       	mov	r24, r22
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	2a f0       	brmi	.+10     	; 0x1b06 <__floatsisf+0x6c>
    1afc:	9a 95       	dec	r25
    1afe:	66 0f       	add	r22, r22
    1b00:	77 1f       	adc	r23, r23
    1b02:	88 1f       	adc	r24, r24
    1b04:	da f7       	brpl	.-10     	; 0x1afc <__floatsisf+0x62>
    1b06:	88 0f       	add	r24, r24
    1b08:	96 95       	lsr	r25
    1b0a:	87 95       	ror	r24
    1b0c:	97 f9       	bld	r25, 7
    1b0e:	08 95       	ret

00001b10 <__fp_cmp>:
    1b10:	99 0f       	add	r25, r25
    1b12:	00 08       	sbc	r0, r0
    1b14:	55 0f       	add	r21, r21
    1b16:	aa 0b       	sbc	r26, r26
    1b18:	e0 e8       	ldi	r30, 0x80	; 128
    1b1a:	fe ef       	ldi	r31, 0xFE	; 254
    1b1c:	16 16       	cp	r1, r22
    1b1e:	17 06       	cpc	r1, r23
    1b20:	e8 07       	cpc	r30, r24
    1b22:	f9 07       	cpc	r31, r25
    1b24:	c0 f0       	brcs	.+48     	; 0x1b56 <__fp_cmp+0x46>
    1b26:	12 16       	cp	r1, r18
    1b28:	13 06       	cpc	r1, r19
    1b2a:	e4 07       	cpc	r30, r20
    1b2c:	f5 07       	cpc	r31, r21
    1b2e:	98 f0       	brcs	.+38     	; 0x1b56 <__fp_cmp+0x46>
    1b30:	62 1b       	sub	r22, r18
    1b32:	73 0b       	sbc	r23, r19
    1b34:	84 0b       	sbc	r24, r20
    1b36:	95 0b       	sbc	r25, r21
    1b38:	39 f4       	brne	.+14     	; 0x1b48 <__fp_cmp+0x38>
    1b3a:	0a 26       	eor	r0, r26
    1b3c:	61 f0       	breq	.+24     	; 0x1b56 <__fp_cmp+0x46>
    1b3e:	23 2b       	or	r18, r19
    1b40:	24 2b       	or	r18, r20
    1b42:	25 2b       	or	r18, r21
    1b44:	21 f4       	brne	.+8      	; 0x1b4e <__fp_cmp+0x3e>
    1b46:	08 95       	ret
    1b48:	0a 26       	eor	r0, r26
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <__fp_cmp+0x3e>
    1b4c:	a1 40       	sbci	r26, 0x01	; 1
    1b4e:	a6 95       	lsr	r26
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	81 1d       	adc	r24, r1
    1b54:	81 1d       	adc	r24, r1
    1b56:	08 95       	ret

00001b58 <__fp_inf>:
    1b58:	97 f9       	bld	r25, 7
    1b5a:	9f 67       	ori	r25, 0x7F	; 127
    1b5c:	80 e8       	ldi	r24, 0x80	; 128
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	08 95       	ret

00001b64 <__fp_nan>:
    1b64:	9f ef       	ldi	r25, 0xFF	; 255
    1b66:	80 ec       	ldi	r24, 0xC0	; 192
    1b68:	08 95       	ret

00001b6a <__fp_pscA>:
    1b6a:	00 24       	eor	r0, r0
    1b6c:	0a 94       	dec	r0
    1b6e:	16 16       	cp	r1, r22
    1b70:	17 06       	cpc	r1, r23
    1b72:	18 06       	cpc	r1, r24
    1b74:	09 06       	cpc	r0, r25
    1b76:	08 95       	ret

00001b78 <__fp_pscB>:
    1b78:	00 24       	eor	r0, r0
    1b7a:	0a 94       	dec	r0
    1b7c:	12 16       	cp	r1, r18
    1b7e:	13 06       	cpc	r1, r19
    1b80:	14 06       	cpc	r1, r20
    1b82:	05 06       	cpc	r0, r21
    1b84:	08 95       	ret

00001b86 <__fp_round>:
    1b86:	09 2e       	mov	r0, r25
    1b88:	03 94       	inc	r0
    1b8a:	00 0c       	add	r0, r0
    1b8c:	11 f4       	brne	.+4      	; 0x1b92 <__fp_round+0xc>
    1b8e:	88 23       	and	r24, r24
    1b90:	52 f0       	brmi	.+20     	; 0x1ba6 <__fp_round+0x20>
    1b92:	bb 0f       	add	r27, r27
    1b94:	40 f4       	brcc	.+16     	; 0x1ba6 <__fp_round+0x20>
    1b96:	bf 2b       	or	r27, r31
    1b98:	11 f4       	brne	.+4      	; 0x1b9e <__fp_round+0x18>
    1b9a:	60 ff       	sbrs	r22, 0
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <__fp_round+0x20>
    1b9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba6:	08 95       	ret

00001ba8 <__fp_split3>:
    1ba8:	57 fd       	sbrc	r21, 7
    1baa:	90 58       	subi	r25, 0x80	; 128
    1bac:	44 0f       	add	r20, r20
    1bae:	55 1f       	adc	r21, r21
    1bb0:	59 f0       	breq	.+22     	; 0x1bc8 <__fp_splitA+0x10>
    1bb2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb4:	71 f0       	breq	.+28     	; 0x1bd2 <__fp_splitA+0x1a>
    1bb6:	47 95       	ror	r20

00001bb8 <__fp_splitA>:
    1bb8:	88 0f       	add	r24, r24
    1bba:	97 fb       	bst	r25, 7
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	61 f0       	breq	.+24     	; 0x1bd8 <__fp_splitA+0x20>
    1bc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1bc2:	79 f0       	breq	.+30     	; 0x1be2 <__fp_splitA+0x2a>
    1bc4:	87 95       	ror	r24
    1bc6:	08 95       	ret
    1bc8:	12 16       	cp	r1, r18
    1bca:	13 06       	cpc	r1, r19
    1bcc:	14 06       	cpc	r1, r20
    1bce:	55 1f       	adc	r21, r21
    1bd0:	f2 cf       	rjmp	.-28     	; 0x1bb6 <__fp_split3+0xe>
    1bd2:	46 95       	lsr	r20
    1bd4:	f1 df       	rcall	.-30     	; 0x1bb8 <__fp_splitA>
    1bd6:	08 c0       	rjmp	.+16     	; 0x1be8 <__fp_splitA+0x30>
    1bd8:	16 16       	cp	r1, r22
    1bda:	17 06       	cpc	r1, r23
    1bdc:	18 06       	cpc	r1, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	f1 cf       	rjmp	.-30     	; 0x1bc4 <__fp_splitA+0xc>
    1be2:	86 95       	lsr	r24
    1be4:	71 05       	cpc	r23, r1
    1be6:	61 05       	cpc	r22, r1
    1be8:	08 94       	sec
    1bea:	08 95       	ret

00001bec <__fp_zero>:
    1bec:	e8 94       	clt

00001bee <__fp_szero>:
    1bee:	bb 27       	eor	r27, r27
    1bf0:	66 27       	eor	r22, r22
    1bf2:	77 27       	eor	r23, r23
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	97 f9       	bld	r25, 7
    1bf8:	08 95       	ret

00001bfa <__gesf2>:
    1bfa:	8a df       	rcall	.-236    	; 0x1b10 <__fp_cmp>
    1bfc:	08 f4       	brcc	.+2      	; 0x1c00 <__gesf2+0x6>
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	08 95       	ret

00001c02 <__mulsf3>:
    1c02:	0b d0       	rcall	.+22     	; 0x1c1a <__mulsf3x>
    1c04:	c0 cf       	rjmp	.-128    	; 0x1b86 <__fp_round>
    1c06:	b1 df       	rcall	.-158    	; 0x1b6a <__fp_pscA>
    1c08:	28 f0       	brcs	.+10     	; 0x1c14 <__mulsf3+0x12>
    1c0a:	b6 df       	rcall	.-148    	; 0x1b78 <__fp_pscB>
    1c0c:	18 f0       	brcs	.+6      	; 0x1c14 <__mulsf3+0x12>
    1c0e:	95 23       	and	r25, r21
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <__mulsf3+0x12>
    1c12:	a2 cf       	rjmp	.-188    	; 0x1b58 <__fp_inf>
    1c14:	a7 cf       	rjmp	.-178    	; 0x1b64 <__fp_nan>
    1c16:	11 24       	eor	r1, r1
    1c18:	ea cf       	rjmp	.-44     	; 0x1bee <__fp_szero>

00001c1a <__mulsf3x>:
    1c1a:	c6 df       	rcall	.-116    	; 0x1ba8 <__fp_split3>
    1c1c:	a0 f3       	brcs	.-24     	; 0x1c06 <__mulsf3+0x4>

00001c1e <__mulsf3_pse>:
    1c1e:	95 9f       	mul	r25, r21
    1c20:	d1 f3       	breq	.-12     	; 0x1c16 <__mulsf3+0x14>
    1c22:	95 0f       	add	r25, r21
    1c24:	50 e0       	ldi	r21, 0x00	; 0
    1c26:	55 1f       	adc	r21, r21
    1c28:	62 9f       	mul	r22, r18
    1c2a:	f0 01       	movw	r30, r0
    1c2c:	72 9f       	mul	r23, r18
    1c2e:	bb 27       	eor	r27, r27
    1c30:	f0 0d       	add	r31, r0
    1c32:	b1 1d       	adc	r27, r1
    1c34:	63 9f       	mul	r22, r19
    1c36:	aa 27       	eor	r26, r26
    1c38:	f0 0d       	add	r31, r0
    1c3a:	b1 1d       	adc	r27, r1
    1c3c:	aa 1f       	adc	r26, r26
    1c3e:	64 9f       	mul	r22, r20
    1c40:	66 27       	eor	r22, r22
    1c42:	b0 0d       	add	r27, r0
    1c44:	a1 1d       	adc	r26, r1
    1c46:	66 1f       	adc	r22, r22
    1c48:	82 9f       	mul	r24, r18
    1c4a:	22 27       	eor	r18, r18
    1c4c:	b0 0d       	add	r27, r0
    1c4e:	a1 1d       	adc	r26, r1
    1c50:	62 1f       	adc	r22, r18
    1c52:	73 9f       	mul	r23, r19
    1c54:	b0 0d       	add	r27, r0
    1c56:	a1 1d       	adc	r26, r1
    1c58:	62 1f       	adc	r22, r18
    1c5a:	83 9f       	mul	r24, r19
    1c5c:	a0 0d       	add	r26, r0
    1c5e:	61 1d       	adc	r22, r1
    1c60:	22 1f       	adc	r18, r18
    1c62:	74 9f       	mul	r23, r20
    1c64:	33 27       	eor	r19, r19
    1c66:	a0 0d       	add	r26, r0
    1c68:	61 1d       	adc	r22, r1
    1c6a:	23 1f       	adc	r18, r19
    1c6c:	84 9f       	mul	r24, r20
    1c6e:	60 0d       	add	r22, r0
    1c70:	21 1d       	adc	r18, r1
    1c72:	82 2f       	mov	r24, r18
    1c74:	76 2f       	mov	r23, r22
    1c76:	6a 2f       	mov	r22, r26
    1c78:	11 24       	eor	r1, r1
    1c7a:	9f 57       	subi	r25, 0x7F	; 127
    1c7c:	50 40       	sbci	r21, 0x00	; 0
    1c7e:	8a f0       	brmi	.+34     	; 0x1ca2 <__mulsf3_pse+0x84>
    1c80:	e1 f0       	breq	.+56     	; 0x1cba <__mulsf3_pse+0x9c>
    1c82:	88 23       	and	r24, r24
    1c84:	4a f0       	brmi	.+18     	; 0x1c98 <__mulsf3_pse+0x7a>
    1c86:	ee 0f       	add	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	bb 1f       	adc	r27, r27
    1c8c:	66 1f       	adc	r22, r22
    1c8e:	77 1f       	adc	r23, r23
    1c90:	88 1f       	adc	r24, r24
    1c92:	91 50       	subi	r25, 0x01	; 1
    1c94:	50 40       	sbci	r21, 0x00	; 0
    1c96:	a9 f7       	brne	.-22     	; 0x1c82 <__mulsf3_pse+0x64>
    1c98:	9e 3f       	cpi	r25, 0xFE	; 254
    1c9a:	51 05       	cpc	r21, r1
    1c9c:	70 f0       	brcs	.+28     	; 0x1cba <__mulsf3_pse+0x9c>
    1c9e:	5c cf       	rjmp	.-328    	; 0x1b58 <__fp_inf>
    1ca0:	a6 cf       	rjmp	.-180    	; 0x1bee <__fp_szero>
    1ca2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca4:	ec f3       	brlt	.-6      	; 0x1ca0 <__mulsf3_pse+0x82>
    1ca6:	98 3e       	cpi	r25, 0xE8	; 232
    1ca8:	dc f3       	brlt	.-10     	; 0x1ca0 <__mulsf3_pse+0x82>
    1caa:	86 95       	lsr	r24
    1cac:	77 95       	ror	r23
    1cae:	67 95       	ror	r22
    1cb0:	b7 95       	ror	r27
    1cb2:	f7 95       	ror	r31
    1cb4:	e7 95       	ror	r30
    1cb6:	9f 5f       	subi	r25, 0xFF	; 255
    1cb8:	c1 f7       	brne	.-16     	; 0x1caa <__mulsf3_pse+0x8c>
    1cba:	fe 2b       	or	r31, r30
    1cbc:	88 0f       	add	r24, r24
    1cbe:	91 1d       	adc	r25, r1
    1cc0:	96 95       	lsr	r25
    1cc2:	87 95       	ror	r24
    1cc4:	97 f9       	bld	r25, 7
    1cc6:	08 95       	ret

00001cc8 <__tablejump2__>:
    1cc8:	ee 0f       	add	r30, r30
    1cca:	ff 1f       	adc	r31, r31
    1ccc:	88 1f       	adc	r24, r24
    1cce:	8b bf       	out	0x3b, r24	; 59
    1cd0:	07 90       	elpm	r0, Z+
    1cd2:	f6 91       	elpm	r31, Z
    1cd4:	e0 2d       	mov	r30, r0
    1cd6:	19 94       	eijmp

00001cd8 <_exit>:
    1cd8:	f8 94       	cli

00001cda <__stop_program>:
    1cda:	ff cf       	rjmp	.-2      	; 0x1cda <__stop_program>
