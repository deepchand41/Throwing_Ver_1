
Geneva_Pneumatic_Improvement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00001db0  00001e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001db0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b7  00800214  00800214  00001e58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035be  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d46  00000000  00000000  000057a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a59  00000000  00000000  000064ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  00007f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013d9  00000000  00000000  000088a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002434  00000000  00000000  00009c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000c0ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_1>
       8:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_2>
       c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__vector_3>
      10:	e1 c0       	rjmp	.+450    	; 0x1d4 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__vector_5>
      18:	dd c0       	rjmp	.+442    	; 0x1d4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	db c0       	rjmp	.+438    	; 0x1d4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d9 c0       	rjmp	.+434    	; 0x1d4 <__bad_interrupt>
      22:	00 00       	nop
      24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__bad_interrupt>
      26:	00 00       	nop
      28:	d5 c0       	rjmp	.+426    	; 0x1d4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d3 c0       	rjmp	.+422    	; 0x1d4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d1 c0       	rjmp	.+418    	; 0x1d4 <__bad_interrupt>
      32:	00 00       	nop
      34:	cf c0       	rjmp	.+414    	; 0x1d4 <__bad_interrupt>
      36:	00 00       	nop
      38:	cd c0       	rjmp	.+410    	; 0x1d4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c2       	rjmp	.+1092   	; 0x482 <__vector_15>
      3e:	00 00       	nop
      40:	c9 c0       	rjmp	.+402    	; 0x1d4 <__bad_interrupt>
      42:	00 00       	nop
      44:	c7 c0       	rjmp	.+398    	; 0x1d4 <__bad_interrupt>
      46:	00 00       	nop
      48:	c5 c0       	rjmp	.+394    	; 0x1d4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c3 c0       	rjmp	.+390    	; 0x1d4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c1 c0       	rjmp	.+386    	; 0x1d4 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__vector_21>
      58:	bd c0       	rjmp	.+378    	; 0x1d4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bb c0       	rjmp	.+374    	; 0x1d4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b9 c0       	rjmp	.+370    	; 0x1d4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__vector_25>
      68:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__vector_26>
      6c:	b3 c0       	rjmp	.+358    	; 0x1d4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b1 c0       	rjmp	.+354    	; 0x1d4 <__bad_interrupt>
      72:	00 00       	nop
      74:	af c0       	rjmp	.+350    	; 0x1d4 <__bad_interrupt>
      76:	00 00       	nop
      78:	ad c0       	rjmp	.+346    	; 0x1d4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ab c0       	rjmp	.+342    	; 0x1d4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a9 c0       	rjmp	.+338    	; 0x1d4 <__bad_interrupt>
      82:	00 00       	nop
      84:	a7 c0       	rjmp	.+334    	; 0x1d4 <__bad_interrupt>
      86:	00 00       	nop
      88:	a5 c0       	rjmp	.+330    	; 0x1d4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a3 c0       	rjmp	.+326    	; 0x1d4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a1 c0       	rjmp	.+322    	; 0x1d4 <__bad_interrupt>
      92:	00 00       	nop
      94:	9f c0       	rjmp	.+318    	; 0x1d4 <__bad_interrupt>
      96:	00 00       	nop
      98:	9d c0       	rjmp	.+314    	; 0x1d4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	9b c0       	rjmp	.+310    	; 0x1d4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	99 c0       	rjmp	.+306    	; 0x1d4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	97 c0       	rjmp	.+302    	; 0x1d4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	95 c0       	rjmp	.+298    	; 0x1d4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	93 c0       	rjmp	.+294    	; 0x1d4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	91 c0       	rjmp	.+290    	; 0x1d4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	8f c0       	rjmp	.+286    	; 0x1d4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	8d c0       	rjmp	.+282    	; 0x1d4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8b c0       	rjmp	.+278    	; 0x1d4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	89 c0       	rjmp	.+274    	; 0x1d4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	87 c0       	rjmp	.+270    	; 0x1d4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	85 c0       	rjmp	.+266    	; 0x1d4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_51>
      d0:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__vector_52>
      d4:	7f c0       	rjmp	.+254    	; 0x1d4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__vector_54>
      dc:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__vector_55>
      e0:	79 c0       	rjmp	.+242    	; 0x1d4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	70 04       	cpc	r7, r0
      e6:	95 04       	cpc	r9, r5
      e8:	ba 04       	cpc	r11, r10
      ea:	3d 05       	cpc	r19, r13
      ec:	3d 05       	cpc	r19, r13
      ee:	3d 05       	cpc	r19, r13
      f0:	3d 05       	cpc	r19, r13
      f2:	3d 05       	cpc	r19, r13
      f4:	3d 05       	cpc	r19, r13
      f6:	3d 05       	cpc	r19, r13
      f8:	3d 05       	cpc	r19, r13
      fa:	3d 05       	cpc	r19, r13
      fc:	3d 05       	cpc	r19, r13
      fe:	3d 05       	cpc	r19, r13
     100:	3d 05       	cpc	r19, r13
     102:	3d 05       	cpc	r19, r13
     104:	3d 05       	cpc	r19, r13
     106:	3d 05       	cpc	r19, r13
     108:	3d 05       	cpc	r19, r13
     10a:	3d 05       	cpc	r19, r13
     10c:	3d 05       	cpc	r19, r13
     10e:	3d 05       	cpc	r19, r13
     110:	3d 05       	cpc	r19, r13
     112:	3d 05       	cpc	r19, r13
     114:	3d 05       	cpc	r19, r13
     116:	3d 05       	cpc	r19, r13
     118:	3d 05       	cpc	r19, r13
     11a:	3d 05       	cpc	r19, r13
     11c:	3d 05       	cpc	r19, r13
     11e:	3d 05       	cpc	r19, r13
     120:	3d 05       	cpc	r19, r13
     122:	3d 05       	cpc	r19, r13
     124:	3d 05       	cpc	r19, r13
     126:	3d 05       	cpc	r19, r13
     128:	3d 05       	cpc	r19, r13
     12a:	3d 05       	cpc	r19, r13
     12c:	3d 05       	cpc	r19, r13
     12e:	3d 05       	cpc	r19, r13
     130:	3d 05       	cpc	r19, r13
     132:	3d 05       	cpc	r19, r13
     134:	3d 05       	cpc	r19, r13
     136:	3d 05       	cpc	r19, r13
     138:	3d 05       	cpc	r19, r13
     13a:	3d 05       	cpc	r19, r13
     13c:	3d 05       	cpc	r19, r13
     13e:	3d 05       	cpc	r19, r13
     140:	3d 05       	cpc	r19, r13
     142:	3d 05       	cpc	r19, r13
     144:	3d 05       	cpc	r19, r13
     146:	3d 05       	cpc	r19, r13
     148:	3d 05       	cpc	r19, r13
     14a:	2d 05       	cpc	r18, r13
     14c:	3d 05       	cpc	r19, r13
     14e:	3d 05       	cpc	r19, r13
     150:	3d 05       	cpc	r19, r13
     152:	f5 04       	cpc	r15, r5
     154:	23 05       	cpc	r18, r3
     156:	11 05       	cpc	r17, r1
     158:	6e 04       	cpc	r6, r14
     15a:	3d 05       	cpc	r19, r13
     15c:	1d 05       	cpc	r17, r13
     15e:	17 05       	cpc	r17, r7
     160:	0e 05       	cpc	r16, r14
     162:	3d 05       	cpc	r19, r13
     164:	3d 05       	cpc	r19, r13
     166:	0c 05       	cpc	r16, r12
     168:	df 04       	cpc	r13, r15
     16a:	3d 05       	cpc	r19, r13
     16c:	3d 05       	cpc	r19, r13
     16e:	3d 05       	cpc	r19, r13
     170:	37 05       	cpc	r19, r7

00000172 <__ctors_start>:
     172:	79 09       	sbc	r23, r9

00000174 <__ctors_end>:
     174:	11 24       	eor	r1, r1
     176:	1f be       	out	0x3f, r1	; 63
     178:	cf ef       	ldi	r28, 0xFF	; 255
     17a:	d1 e2       	ldi	r29, 0x21	; 33
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	cd bf       	out	0x3d, r28	; 61
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0c bf       	out	0x3c, r16	; 60

00000184 <__do_copy_data>:
     184:	12 e0       	ldi	r17, 0x02	; 2
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b2 e0       	ldi	r27, 0x02	; 2
     18a:	e0 eb       	ldi	r30, 0xB0	; 176
     18c:	fd e1       	ldi	r31, 0x1D	; 29
     18e:	00 e0       	ldi	r16, 0x00	; 0
     190:	0b bf       	out	0x3b, r16	; 59
     192:	02 c0       	rjmp	.+4      	; 0x198 <__do_copy_data+0x14>
     194:	07 90       	elpm	r0, Z+
     196:	0d 92       	st	X+, r0
     198:	a4 31       	cpi	r26, 0x14	; 20
     19a:	b1 07       	cpc	r27, r17
     19c:	d9 f7       	brne	.-10     	; 0x194 <__do_copy_data+0x10>

0000019e <__do_clear_bss>:
     19e:	23 e0       	ldi	r18, 0x03	; 3
     1a0:	a4 e1       	ldi	r26, 0x14	; 20
     1a2:	b2 e0       	ldi	r27, 0x02	; 2
     1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <.do_clear_bss_start>

000001a6 <.do_clear_bss_loop>:
     1a6:	1d 92       	st	X+, r1

000001a8 <.do_clear_bss_start>:
     1a8:	ab 3c       	cpi	r26, 0xCB	; 203
     1aa:	b2 07       	cpc	r27, r18
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <.do_clear_bss_loop>

000001ae <__do_global_ctors>:
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	ca eb       	ldi	r28, 0xBA	; 186
     1b2:	d0 e0       	ldi	r29, 0x00	; 0
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	06 c0       	rjmp	.+12     	; 0x1c4 <__do_global_ctors+0x16>
     1b8:	21 97       	sbiw	r28, 0x01	; 1
     1ba:	01 09       	sbc	r16, r1
     1bc:	80 2f       	mov	r24, r16
     1be:	fe 01       	movw	r30, r28
     1c0:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__tablejump2__>
     1c4:	c9 3b       	cpi	r28, 0xB9	; 185
     1c6:	d1 07       	cpc	r29, r17
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	08 07       	cpc	r16, r24
     1cc:	a9 f7       	brne	.-22     	; 0x1b8 <__do_global_ctors+0xa>
     1ce:	a6 d2       	rcall	.+1356   	; 0x71c <main>
     1d0:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <_exit>

000001d4 <__bad_interrupt>:
     1d4:	15 cf       	rjmp	.-470    	; 0x0 <__vectors>

000001d6 <_ZN7EncoderC1Ev>:
{
	return Encoder_rpm;
}

void Encoder::Encoder_Increase_Angle_Counter(void)
{
     1d6:	fc 01       	movw	r30, r24
     1d8:	16 8a       	std	Z+22, r1	; 0x16
     1da:	17 8a       	std	Z+23, r1	; 0x17
     1dc:	10 8e       	std	Z+24, r1	; 0x18
     1de:	11 8e       	std	Z+25, r1	; 0x19
     1e0:	17 8e       	std	Z+31, r1	; 0x1f
     1e2:	16 8e       	std	Z+30, r1	; 0x1e
     1e4:	11 82       	std	Z+1, r1	; 0x01
     1e6:	10 82       	st	Z, r1
     1e8:	11 a2       	std	Z+33, r1	; 0x21
     1ea:	10 a2       	std	Z+32, r1	; 0x20
     1ec:	13 a2       	std	Z+35, r1	; 0x23
     1ee:	12 a2       	std	Z+34, r1	; 0x22
     1f0:	08 95       	ret

000001f2 <_ZN7Encoder24Encoder_Initialize_TimerEv>:
     1f2:	85 b5       	in	r24, 0x25	; 37
     1f4:	85 60       	ori	r24, 0x05	; 5
     1f6:	85 bd       	out	0x25, r24	; 37
     1f8:	8b e9       	ldi	r24, 0x9B	; 155
     1fa:	87 bd       	out	0x27, r24	; 39
     1fc:	ee e6       	ldi	r30, 0x6E	; 110
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	82 60       	ori	r24, 0x02	; 2
     204:	80 83       	st	Z, r24
     206:	a9 9a       	sbi	0x15, 1	; 21
     208:	16 bc       	out	0x26, r1	; 38
     20a:	08 95       	ret

0000020c <_ZN7Encoder37Encoder_Initialize_External_InterruptEv>:
     20c:	e9 e6       	ldi	r30, 0x69	; 105
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	82 60       	ori	r24, 0x02	; 2
     214:	80 83       	st	Z, r24
     216:	e8 9a       	sbi	0x1d, 0	; 29
     218:	e0 9a       	sbi	0x1c, 0	; 28
     21a:	08 95       	ret

0000021c <_ZN7Encoder18Encoder_InitializeEv>:
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	ec 01       	movw	r28, r24
     222:	50 98       	cbi	0x0a, 0	; 10
     224:	08 98       	cbi	0x01, 0	; 1
     226:	f2 df       	rcall	.-28     	; 0x20c <_ZN7Encoder37Encoder_Initialize_External_InterruptEv>
     228:	ce 01       	movw	r24, r28
     22a:	e3 df       	rcall	.-58     	; 0x1f2 <_ZN7Encoder24Encoder_Initialize_TimerEv>
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv>:
     232:	fc 01       	movw	r30, r24
     234:	00 9b       	sbis	0x00, 0	; 0
     236:	1c c0       	rjmp	.+56     	; 0x270 <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv+0x3e>
     238:	86 89       	ldd	r24, Z+22	; 0x16
     23a:	97 89       	ldd	r25, Z+23	; 0x17
     23c:	a0 8d       	ldd	r26, Z+24	; 0x18
     23e:	b1 8d       	ldd	r27, Z+25	; 0x19
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	a1 09       	sbc	r26, r1
     244:	b1 09       	sbc	r27, r1
     246:	86 8b       	std	Z+22, r24	; 0x16
     248:	97 8b       	std	Z+23, r25	; 0x17
     24a:	a0 8f       	std	Z+24, r26	; 0x18
     24c:	b1 8f       	std	Z+25, r27	; 0x19
     24e:	82 8d       	ldd	r24, Z+26	; 0x1a
     250:	93 8d       	ldd	r25, Z+27	; 0x1b
     252:	a4 8d       	ldd	r26, Z+28	; 0x1c
     254:	b5 8d       	ldd	r27, Z+29	; 0x1d
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	a1 09       	sbc	r26, r1
     25a:	b1 09       	sbc	r27, r1
     25c:	82 8f       	std	Z+26, r24	; 0x1a
     25e:	93 8f       	std	Z+27, r25	; 0x1b
     260:	a4 8f       	std	Z+28, r26	; 0x1c
     262:	b5 8f       	std	Z+29, r27	; 0x1d
     264:	86 8d       	ldd	r24, Z+30	; 0x1e
     266:	97 8d       	ldd	r25, Z+31	; 0x1f
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	97 8f       	std	Z+31, r25	; 0x1f
     26c:	86 8f       	std	Z+30, r24	; 0x1e
     26e:	08 95       	ret
     270:	00 99       	sbic	0x00, 0	; 0
     272:	1b c0       	rjmp	.+54     	; 0x2aa <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv+0x78>
     274:	86 89       	ldd	r24, Z+22	; 0x16
     276:	97 89       	ldd	r25, Z+23	; 0x17
     278:	a0 8d       	ldd	r26, Z+24	; 0x18
     27a:	b1 8d       	ldd	r27, Z+25	; 0x19
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	a1 1d       	adc	r26, r1
     280:	b1 1d       	adc	r27, r1
     282:	86 8b       	std	Z+22, r24	; 0x16
     284:	97 8b       	std	Z+23, r25	; 0x17
     286:	a0 8f       	std	Z+24, r26	; 0x18
     288:	b1 8f       	std	Z+25, r27	; 0x19
     28a:	82 8d       	ldd	r24, Z+26	; 0x1a
     28c:	93 8d       	ldd	r25, Z+27	; 0x1b
     28e:	a4 8d       	ldd	r26, Z+28	; 0x1c
     290:	b5 8d       	ldd	r27, Z+29	; 0x1d
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	a1 1d       	adc	r26, r1
     296:	b1 1d       	adc	r27, r1
     298:	82 8f       	std	Z+26, r24	; 0x1a
     29a:	93 8f       	std	Z+27, r25	; 0x1b
     29c:	a4 8f       	std	Z+28, r26	; 0x1c
     29e:	b5 8f       	std	Z+29, r27	; 0x1d
     2a0:	86 8d       	ldd	r24, Z+30	; 0x1e
     2a2:	97 8d       	ldd	r25, Z+31	; 0x1f
     2a4:	01 96       	adiw	r24, 0x01	; 1
     2a6:	97 8f       	std	Z+31, r25	; 0x1f
     2a8:	86 8f       	std	Z+30, r24	; 0x1e
     2aa:	08 95       	ret

000002ac <_ZN7Encoder17Encoder_Get_angleEv>:

}

int Encoder::Encoder_Get_angle()
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	ec 01       	movw	r28, r24
	Angle = (float(Angle_count)*(float(ENCODER_MOTOR_FACTOR)/ENCODER_PPR))*360;
     2b2:	6e 8d       	ldd	r22, Y+30	; 0x1e
     2b4:	7f 8d       	ldd	r23, Y+31	; 0x1f
     2b6:	07 2e       	mov	r0, r23
     2b8:	00 0c       	add	r0, r0
     2ba:	88 0b       	sbc	r24, r24
     2bc:	99 0b       	sbc	r25, r25
     2be:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__floatsisf>
     2c2:	21 e8       	ldi	r18, 0x81	; 129
     2c4:	30 e8       	ldi	r19, 0x80	; 128
     2c6:	40 e8       	ldi	r20, 0x80	; 128
     2c8:	5a e3       	ldi	r21, 0x3A	; 58
     2ca:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__mulsf3>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	44 eb       	ldi	r20, 0xB4	; 180
     2d4:	53 e4       	ldi	r21, 0x43	; 67
     2d6:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__mulsf3>
     2da:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fixsfsi>
     2de:	79 83       	std	Y+1, r23	; 0x01
     2e0:	68 83       	st	Y, r22
	return Angle;
}
     2e2:	cb 01       	movw	r24, r22
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <_ZN7Encoder20Encoder_update_SpeedEv>:

void Encoder::Encoder_update_Speed()
{
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	fc 01       	movw	r30, r24
	EncoderBuffer[3] = EncoderBuffer[2];
     2f8:	02 85       	ldd	r16, Z+10	; 0x0a
     2fa:	13 85       	ldd	r17, Z+11	; 0x0b
     2fc:	24 85       	ldd	r18, Z+12	; 0x0c
     2fe:	35 85       	ldd	r19, Z+13	; 0x0d
     300:	06 87       	std	Z+14, r16	; 0x0e
     302:	17 87       	std	Z+15, r17	; 0x0f
     304:	20 8b       	std	Z+16, r18	; 0x10
     306:	31 8b       	std	Z+17, r19	; 0x11
	EncoderBuffer[2] = EncoderBuffer[1];
     308:	c6 80       	ldd	r12, Z+6	; 0x06
     30a:	d7 80       	ldd	r13, Z+7	; 0x07
     30c:	e0 84       	ldd	r14, Z+8	; 0x08
     30e:	f1 84       	ldd	r15, Z+9	; 0x09
     310:	c2 86       	std	Z+10, r12	; 0x0a
     312:	d3 86       	std	Z+11, r13	; 0x0b
     314:	e4 86       	std	Z+12, r14	; 0x0c
     316:	f5 86       	std	Z+13, r15	; 0x0d
	EncoderBuffer[1] = EncoderBuffer[0];
     318:	42 81       	ldd	r20, Z+2	; 0x02
     31a:	53 81       	ldd	r21, Z+3	; 0x03
     31c:	64 81       	ldd	r22, Z+4	; 0x04
     31e:	75 81       	ldd	r23, Z+5	; 0x05
     320:	46 83       	std	Z+6, r20	; 0x06
     322:	57 83       	std	Z+7, r21	; 0x07
     324:	60 87       	std	Z+8, r22	; 0x08
     326:	71 87       	std	Z+9, r23	; 0x09
	EncoderBuffer[0] = Count;
     328:	86 89       	ldd	r24, Z+22	; 0x16
     32a:	97 89       	ldd	r25, Z+23	; 0x17
     32c:	a0 8d       	ldd	r26, Z+24	; 0x18
     32e:	b1 8d       	ldd	r27, Z+25	; 0x19
     330:	82 83       	std	Z+2, r24	; 0x02
     332:	93 83       	std	Z+3, r25	; 0x03
     334:	a4 83       	std	Z+4, r26	; 0x04
     336:	b5 83       	std	Z+5, r27	; 0x05
	speed   =  ((EncoderBuffer[0]+EncoderBuffer[1]+EncoderBuffer[2]+EncoderBuffer[3])>>2);
     338:	48 0f       	add	r20, r24
     33a:	59 1f       	adc	r21, r25
     33c:	6a 1f       	adc	r22, r26
     33e:	7b 1f       	adc	r23, r27
     340:	d7 01       	movw	r26, r14
     342:	c6 01       	movw	r24, r12
     344:	84 0f       	add	r24, r20
     346:	95 1f       	adc	r25, r21
     348:	a6 1f       	adc	r26, r22
     34a:	b7 1f       	adc	r27, r23
     34c:	80 0f       	add	r24, r16
     34e:	91 1f       	adc	r25, r17
     350:	a2 1f       	adc	r26, r18
     352:	b3 1f       	adc	r27, r19
     354:	b5 95       	asr	r27
     356:	a7 95       	ror	r26
     358:	97 95       	ror	r25
     35a:	87 95       	ror	r24
     35c:	b5 95       	asr	r27
     35e:	a7 95       	ror	r26
     360:	97 95       	ror	r25
     362:	87 95       	ror	r24
     364:	82 8b       	std	Z+18, r24	; 0x12
     366:	93 8b       	std	Z+19, r25	; 0x13
     368:	a4 8b       	std	Z+20, r26	; 0x14
     36a:	b5 8b       	std	Z+21, r27	; 0x15
	Count = 0;
     36c:	16 8a       	std	Z+22, r1	; 0x16
     36e:	17 8a       	std	Z+23, r1	; 0x17
     370:	10 8e       	std	Z+24, r1	; 0x18
     372:	11 8e       	std	Z+25, r1	; 0x19
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	08 95       	ret

00000382 <_ZN13GenevaEncoder25Initialize_Geneva_EncoderEv>:
		int Geneva_Angle;
	public:
		GenevaEncoder();
		void Initialize_Geneva_Encoder(void);
		inline void Inc_Count(){Encoder_Count++;};
		inline void Dcr_Count(){Encoder_Count--;};
     382:	6c 98       	cbi	0x0d, 4	; 13
     384:	09 98       	cbi	0x01, 1	; 1
     386:	6c 98       	cbi	0x0d, 4	; 13
     388:	74 9a       	sbi	0x0e, 4	; 14
     38a:	09 98       	cbi	0x01, 1	; 1
     38c:	11 9a       	sbi	0x02, 1	; 2
     38e:	ea e6       	ldi	r30, 0x6A	; 106
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	82 60       	ori	r24, 0x02	; 2
     396:	80 83       	st	Z, r24
     398:	ec 9a       	sbi	0x1d, 4	; 29
     39a:	e4 9a       	sbi	0x1c, 4	; 28
     39c:	08 95       	ret

0000039e <_ZN13GenevaEncoderC1Ev>:
     39e:	fc 01       	movw	r30, r24
     3a0:	11 82       	std	Z+1, r1	; 0x01
     3a2:	10 82       	st	Z, r1
     3a4:	ee cf       	rjmp	.-36     	; 0x382 <_ZN13GenevaEncoder25Initialize_Geneva_EncoderEv>
     3a6:	08 95       	ret

000003a8 <_ZN13GenevaEncoder16Enoder_Get_AngleEv>:
		Dcr_Count();
	}
}

int GenevaEncoder::Enoder_Get_Angle()
{
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ec 01       	movw	r28, r24
	Geneva_Angle = (float(Encoder_Count)/PPR)*360;
     3ae:	68 81       	ld	r22, Y
     3b0:	79 81       	ldd	r23, Y+1	; 0x01
     3b2:	07 2e       	mov	r0, r23
     3b4:	00 0c       	add	r0, r0
     3b6:	88 0b       	sbc	r24, r24
     3b8:	99 0b       	sbc	r25, r25
     3ba:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__floatsisf>
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	44 e3       	ldi	r20, 0x34	; 52
     3c4:	53 e4       	ldi	r21, 0x43	; 67
     3c6:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__divsf3>
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	44 eb       	ldi	r20, 0xB4	; 180
     3d0:	53 e4       	ldi	r21, 0x43	; 67
     3d2:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__mulsf3>
     3d6:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__fixsfsi>
     3da:	7f 83       	std	Y+7, r23	; 0x07
     3dc:	6e 83       	std	Y+6, r22	; 0x06
	return Geneva_Angle;
}
     3de:	cb 01       	movw	r24, r22
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <_ZN11GenevaMotor7InitPWMEv>:
	SetOcrValue(0);
}

void GenevaMotor::InitPWM()
{
	OUTPUT(DD_F_G);
     3e6:	24 9a       	sbi	0x04, 4	; 4
	OUTPUT(DD_B_G);
     3e8:	27 9a       	sbi	0x04, 7	; 4
	
	OUTPUT(DD_PWM_G);
     3ea:	25 9a       	sbi	0x04, 5	; 4
	 
	PWM_TCCRA_G |= (1 << PWM_G_COM1)| (1 << PWM_G_WGM1);                                   //Fast PWM
     3ec:	e0 e8       	ldi	r30, 0x80	; 128
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	82 68       	ori	r24, 0x82	; 130
     3f4:	80 83       	st	Z, r24
	
	
	PWM_TCCRB_G |= (1 << PWM_G_WGM2) | (1 << PWM_G_WGM3) | (1 << PWM_G_CS1);
     3f6:	e1 e8       	ldi	r30, 0x81	; 129
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	8a 61       	ori	r24, 0x1A	; 26
     3fe:	80 83       	st	Z, r24
	PWM_ICR_G    = ICR_TOP;
     400:	89 ef       	ldi	r24, 0xF9	; 249
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	90 93 87 00 	sts	0x0087, r25
     408:	80 93 86 00 	sts	0x0086, r24
     40c:	08 95       	ret

0000040e <_ZN11GenevaMotor19SetForwardDirectionEv>:
}

void GenevaMotor::SetForwardDirection()
{
	SET(DD_F_G);
     40e:	2c 9a       	sbi	0x05, 4	; 5
	CLEAR(DD_B_G);
     410:	2f 98       	cbi	0x05, 7	; 5
     412:	08 95       	ret

00000414 <_ZN11GenevaMotor19SetReverseDirectionEv>:
}

void GenevaMotor::SetReverseDirection()
{
	CLEAR(DD_F_G);
     414:	2c 98       	cbi	0x05, 4	; 5
	SET(DD_B_G);
     416:	2f 9a       	sbi	0x05, 7	; 5
     418:	08 95       	ret

0000041a <_ZN11GenevaMotor9StopMotorEv>:
}

void GenevaMotor::StopMotor()
{
	SET(DD_F_G);
     41a:	2c 9a       	sbi	0x05, 4	; 5
	SET(DD_B_G);
     41c:	2f 9a       	sbi	0x05, 7	; 5
	
	PWM_OCR_G = 0;
     41e:	10 92 89 00 	sts	0x0089, r1
     422:	10 92 88 00 	sts	0x0088, r1
     426:	08 95       	ret

00000428 <_ZN11GenevaMotor11SetOcrValueEi>:
}

void GenevaMotor::SetOcrValue(int ocr)
{
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	8c 01       	movw	r16, r24
     432:	eb 01       	movw	r28, r22
	if (ocr > 0)
     434:	1c 16       	cp	r1, r28
     436:	1d 06       	cpc	r1, r29
     438:	0c f4       	brge	.+2      	; 0x43c <_ZN11GenevaMotor11SetOcrValueEi+0x14>
		SetForwardDirection();
     43a:	e9 df       	rcall	.-46     	; 0x40e <_ZN11GenevaMotor19SetForwardDirectionEv>
	if(ocr >= MAX_VALUE)
     43c:	c9 3f       	cpi	r28, 0xF9	; 249
     43e:	d1 05       	cpc	r29, r1
     440:	44 f4       	brge	.+16     	; 0x452 <_ZN11GenevaMotor11SetOcrValueEi+0x2a>
		ocr = MAX_VALUE;
		
	if (ocr < 0)
     442:	dd 23       	and	r29, r29
     444:	44 f4       	brge	.+16     	; 0x456 <_ZN11GenevaMotor11SetOcrValueEi+0x2e>
	{
		ocr = -ocr;
     446:	d1 95       	neg	r29
     448:	c1 95       	neg	r28
     44a:	d1 09       	sbc	r29, r1
		SetReverseDirection();
     44c:	c8 01       	movw	r24, r16
     44e:	e2 df       	rcall	.-60     	; 0x414 <_ZN11GenevaMotor19SetReverseDirectionEv>
     450:	02 c0       	rjmp	.+4      	; 0x456 <_ZN11GenevaMotor11SetOcrValueEi+0x2e>
void GenevaMotor::SetOcrValue(int ocr)
{
	if (ocr > 0)
		SetForwardDirection();
	if(ocr >= MAX_VALUE)
		ocr = MAX_VALUE;
     452:	c9 ef       	ldi	r28, 0xF9	; 249
     454:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ocr = -ocr;
		SetReverseDirection();
	}
	
	PWM_OCR_G = ocr;
     456:	d0 93 89 00 	sts	0x0089, r29
     45a:	c0 93 88 00 	sts	0x0088, r28
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	08 95       	ret

00000468 <_ZN11GenevaMotor23Initialize_Geneva_MotorEv>:


#include "GenevaMotor.h"

void GenevaMotor::Initialize_Geneva_Motor()
{
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	ec 01       	movw	r28, r24
	InitPWM();
     46e:	bb df       	rcall	.-138    	; 0x3e6 <_ZN11GenevaMotor7InitPWMEv>
	StopMotor();
     470:	ce 01       	movw	r24, r28
     472:	d3 df       	rcall	.-90     	; 0x41a <_ZN11GenevaMotor9StopMotorEv>
	SetOcrValue(0);
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	ce 01       	movw	r24, r28
     47a:	d6 df       	rcall	.-84     	; 0x428 <_ZN11GenevaMotor11SetOcrValueEi>
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <__vector_15>:
void Initialize_Global_Timer()
{
	TCNT2 = 0;
	TCCR2B |= (1<<CS20)|(1<<CS21)|(1<<CS22);
	TIMSK2 |= (1<<TOIE2);
	TIFR2  |= (1<<TOV2);
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	8f 93       	push	r24
     48e:	9f 93       	push	r25
     490:	af 93       	push	r26
     492:	bf 93       	push	r27
     494:	80 91 f8 02 	lds	r24, 0x02F8
     498:	90 91 f9 02 	lds	r25, 0x02F9
     49c:	a0 91 fa 02 	lds	r26, 0x02FA
     4a0:	b0 91 fb 02 	lds	r27, 0x02FB
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	a1 1d       	adc	r26, r1
     4a8:	b1 1d       	adc	r27, r1
     4aa:	80 93 f8 02 	sts	0x02F8, r24
     4ae:	90 93 f9 02 	sts	0x02F9, r25
     4b2:	a0 93 fa 02 	sts	0x02FA, r26
     4b6:	b0 93 fb 02 	sts	0x02FB, r27
     4ba:	80 91 f4 02 	lds	r24, 0x02F4
     4be:	90 91 f5 02 	lds	r25, 0x02F5
     4c2:	a0 91 f6 02 	lds	r26, 0x02F6
     4c6:	b0 91 f7 02 	lds	r27, 0x02F7
     4ca:	03 96       	adiw	r24, 0x03	; 3
     4cc:	a1 1d       	adc	r26, r1
     4ce:	b1 1d       	adc	r27, r1
     4d0:	80 93 f4 02 	sts	0x02F4, r24
     4d4:	90 93 f5 02 	sts	0x02F5, r25
     4d8:	a0 93 f6 02 	sts	0x02F6, r26
     4dc:	b0 93 f7 02 	sts	0x02F7, r27
     4e0:	80 91 f4 02 	lds	r24, 0x02F4
     4e4:	90 91 f5 02 	lds	r25, 0x02F5
     4e8:	a0 91 f6 02 	lds	r26, 0x02F6
     4ec:	b0 91 f7 02 	lds	r27, 0x02F7
     4f0:	8d 37       	cpi	r24, 0x7D	; 125
     4f2:	91 05       	cpc	r25, r1
     4f4:	a1 05       	cpc	r26, r1
     4f6:	b1 05       	cpc	r27, r1
     4f8:	38 f1       	brcs	.+78     	; 0x548 <__vector_15+0xc6>
     4fa:	80 91 f4 02 	lds	r24, 0x02F4
     4fe:	90 91 f5 02 	lds	r25, 0x02F5
     502:	a0 91 f6 02 	lds	r26, 0x02F6
     506:	b0 91 f7 02 	lds	r27, 0x02F7
     50a:	8d 57       	subi	r24, 0x7D	; 125
     50c:	91 09       	sbc	r25, r1
     50e:	a1 09       	sbc	r26, r1
     510:	b1 09       	sbc	r27, r1
     512:	80 93 f4 02 	sts	0x02F4, r24
     516:	90 93 f5 02 	sts	0x02F5, r25
     51a:	a0 93 f6 02 	sts	0x02F6, r26
     51e:	b0 93 f7 02 	sts	0x02F7, r27
     522:	80 91 f8 02 	lds	r24, 0x02F8
     526:	90 91 f9 02 	lds	r25, 0x02F9
     52a:	a0 91 fa 02 	lds	r26, 0x02FA
     52e:	b0 91 fb 02 	lds	r27, 0x02FB
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	a1 1d       	adc	r26, r1
     536:	b1 1d       	adc	r27, r1
     538:	80 93 f8 02 	sts	0x02F8, r24
     53c:	90 93 f9 02 	sts	0x02F9, r25
     540:	a0 93 fa 02 	sts	0x02FA, r26
     544:	b0 93 fb 02 	sts	0x02FB, r27
     548:	bf 91       	pop	r27
     54a:	af 91       	pop	r26
     54c:	9f 91       	pop	r25
     54e:	8f 91       	pop	r24
     550:	0f 90       	pop	r0
     552:	0f be       	out	0x3f, r0	; 63
     554:	0f 90       	pop	r0
     556:	1f 90       	pop	r1
     558:	18 95       	reti

0000055a <_Z6millisv>:
     55a:	2f b7       	in	r18, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	60 91 f8 02 	lds	r22, 0x02F8
     562:	70 91 f9 02 	lds	r23, 0x02F9
     566:	80 91 fa 02 	lds	r24, 0x02FA
     56a:	90 91 fb 02 	lds	r25, 0x02FB
     56e:	2f bf       	out	0x3f, r18	; 63
     570:	08 95       	ret

00000572 <_Z21initialise_timeperiodv>:
     572:	e1 eb       	ldi	r30, 0xB1	; 177
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	84 60       	ori	r24, 0x04	; 4
     57a:	80 83       	st	Z, r24
     57c:	e0 e7       	ldi	r30, 0x70	; 112
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	81 60       	ori	r24, 0x01	; 1
     584:	80 83       	st	Z, r24
     586:	10 92 b2 00 	sts	0x00B2, r1
     58a:	08 95       	ret

0000058c <_Z10Run_Genevav>:
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	80 93 ea 02 	sts	0x02EA, r24
     592:	80 ed       	ldi	r24, 0xD0	; 208
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	90 93 57 02 	sts	0x0257, r25
     59a:	80 93 56 02 	sts	0x0256, r24
     59e:	08 95       	ret

000005a0 <_Z35Initialize_Throwing12TCRT_Interruptv>:
     5a0:	51 98       	cbi	0x0a, 1	; 10
     5a2:	59 9a       	sbi	0x0b, 1	; 11
     5a4:	e9 e6       	ldi	r30, 0x69	; 105
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	80 62       	ori	r24, 0x20	; 32
     5ac:	80 83       	st	Z, r24
     5ae:	ea 9a       	sbi	0x1d, 2	; 29
     5b0:	e2 9a       	sbi	0x1c, 2	; 28
     5b2:	08 95       	ret

000005b4 <_Z34Initialize_Throwing3TCRT_Interruptv>:
     5b4:	52 98       	cbi	0x0a, 2	; 10
     5b6:	5a 9a       	sbi	0x0b, 2	; 11
     5b8:	e9 e6       	ldi	r30, 0x69	; 105
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	88 60       	ori	r24, 0x08	; 8
     5c0:	80 83       	st	Z, r24
     5c2:	e9 9a       	sbi	0x1d, 1	; 29
     5c4:	e1 9a       	sbi	0x1c, 1	; 28
     5c6:	08 95       	ret

000005c8 <_Z14Initialize_Allv>:
     5c8:	eb df       	rcall	.-42     	; 0x5a0 <_Z35Initialize_Throwing12TCRT_Interruptv>
     5ca:	f4 df       	rcall	.-24     	; 0x5b4 <_Z34Initialize_Throwing3TCRT_Interruptv>
     5cc:	82 ee       	ldi	r24, 0xE2	; 226
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	f1 d6       	rcall	.+3554   	; 0x13b4 <_ZN5Motor10InitialiseEv>
     5d2:	8e eb       	ldi	r24, 0xBE	; 190
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	22 de       	rcall	.-956    	; 0x21c <_ZN7Encoder18Encoder_InitializeEv>
     5d8:	83 ee       	ldi	r24, 0xE3	; 227
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	45 df       	rcall	.-374    	; 0x468 <_ZN11GenevaMotor23Initialize_Geneva_MotorEv>
     5de:	86 eb       	ldi	r24, 0xB6	; 182
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	cf ce       	rjmp	.-610    	; 0x382 <_ZN13GenevaEncoder25Initialize_Geneva_EncoderEv>
     5e4:	08 95       	ret

000005e6 <_Z27Initial_Position_Of_The_ARMv>:
}

void Initial_Position_Of_The_ARM(void)
{
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
	sei();
     5ea:	78 94       	sei
	while(!READ(Throwing_3TCRT))
     5ec:	4a 99       	sbic	0x09, 2	; 9
     5ee:	07 c0       	rjmp	.+14     	; 0x5fe <_Z27Initial_Position_Of_The_ARMv+0x18>
	{
		M.SetOcrValue(-60);
     5f0:	64 ec       	ldi	r22, 0xC4	; 196
     5f2:	7f ef       	ldi	r23, 0xFF	; 255
     5f4:	82 ee       	ldi	r24, 0xE2	; 226
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	bd d6       	rcall	.+3450   	; 0x1374 <_ZN5Motor11SetOcrValueEi>
}

void Initial_Position_Of_The_ARM(void)
{
	sei();
	while(!READ(Throwing_3TCRT))
     5fa:	4a 9b       	sbis	0x09, 2	; 9
     5fc:	f9 cf       	rjmp	.-14     	; 0x5f0 <_Z27Initial_Position_Of_The_ARMv+0xa>
	{
		M.SetOcrValue(-60);
	}
	E.Angle_count = 0;
     5fe:	ce eb       	ldi	r28, 0xBE	; 190
     600:	d2 e0       	ldi	r29, 0x02	; 2
     602:	1f 8e       	std	Y+31, r1	; 0x1f
     604:	1e 8e       	std	Y+30, r1	; 0x1e
	M.StopMotor();
     606:	82 ee       	ldi	r24, 0xE2	; 226
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	a7 d6       	rcall	.+3406   	; 0x135a <_ZN5Motor9StopMotorEv>
	TCRTRevolutionCount = 0;
     60c:	10 92 28 02 	sts	0x0228, r1
     610:	10 92 27 02 	sts	0x0227, r1
	E.ExtraCount = 0;
     614:	1a 8e       	std	Y+26, r1	; 0x1a
     616:	1b 8e       	std	Y+27, r1	; 0x1b
     618:	1c 8e       	std	Y+28, r1	; 0x1c
     61a:	1d 8e       	std	Y+29, r1	; 0x1d
				kd=KD;
				Set_PID(kp,ki,kd);
			}
			void SetSetPoint(float x)
			{
				setPoint = x;
     61c:	e7 e8       	ldi	r30, 0x87	; 135
     61e:	f2 e0       	ldi	r31, 0x02	; 2
     620:	16 a6       	std	Z+46, r1	; 0x2e
     622:	15 a6       	std	Z+45, r1	; 0x2d
     624:	8e 8d       	ldd	r24, Y+30	; 0x1e
     626:	9f 8d       	ldd	r25, Y+31	; 0x1f
     628:	90 93 86 02 	sts	0x0286, r25
     62c:	80 93 85 02 	sts	0x0285, r24
	
	
	Speed_PID.SetSetPoint(0);
	Angle_PID.SetSetPoint(E.Angle_count);
	PIDFlag = false;
     630:	10 92 00 02 	sts	0x0200, r1
	Speed_PID.lastinput = 0;
     634:	15 a2       	std	Z+37, r1	; 0x25
     636:	16 a2       	std	Z+38, r1	; 0x26
     638:	17 a2       	std	Z+39, r1	; 0x27
     63a:	10 a6       	std	Z+40, r1	; 0x28
	Speed_PID.output    = 0;
     63c:	15 8e       	std	Z+29, r1	; 0x1d
     63e:	16 8e       	std	Z+30, r1	; 0x1e
     640:	17 8e       	std	Z+31, r1	; 0x1f
     642:	10 a2       	std	Z+32, r1	; 0x20
	Speed_PID.Iterm     = 0;
     644:	11 a2       	std	Z+33, r1	; 0x21
     646:	12 a2       	std	Z+34, r1	; 0x22
     648:	13 a2       	std	Z+35, r1	; 0x23
     64a:	14 a2       	std	Z+36, r1	; 0x24
}
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <_Z8GoToHomev>:

void GoToHome()
{
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
	sei();
     656:	78 94       	sei
	while(!READ(Home_TCRT))
     658:	4b 99       	sbic	0x09, 3	; 9
     65a:	07 c0       	rjmp	.+14     	; 0x66a <_Z8GoToHomev+0x18>
	{
		M.SetOcrValue(-50);	
     65c:	6e ec       	ldi	r22, 0xCE	; 206
     65e:	7f ef       	ldi	r23, 0xFF	; 255
     660:	82 ee       	ldi	r24, 0xE2	; 226
     662:	92 e0       	ldi	r25, 0x02	; 2
     664:	87 d6       	rcall	.+3342   	; 0x1374 <_ZN5Motor11SetOcrValueEi>
}

void GoToHome()
{
	sei();
	while(!READ(Home_TCRT))
     666:	4b 9b       	sbis	0x09, 3	; 9
     668:	f9 cf       	rjmp	.-14     	; 0x65c <_Z8GoToHomev+0xa>
	{
		M.SetOcrValue(-50);	
	}
	E.Angle_count = 0;
     66a:	ce eb       	ldi	r28, 0xBE	; 190
     66c:	d2 e0       	ldi	r29, 0x02	; 2
     66e:	1f 8e       	std	Y+31, r1	; 0x1f
     670:	1e 8e       	std	Y+30, r1	; 0x1e
	M.StopMotor();
     672:	82 ee       	ldi	r24, 0xE2	; 226
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	71 d6       	rcall	.+3298   	; 0x135a <_ZN5Motor9StopMotorEv>
	
	TCRTRevolutionCount = 0;
     678:	10 92 28 02 	sts	0x0228, r1
     67c:	10 92 27 02 	sts	0x0227, r1
	E.ExtraCount = 0;
     680:	1a 8e       	std	Y+26, r1	; 0x1a
     682:	1b 8e       	std	Y+27, r1	; 0x1b
     684:	1c 8e       	std	Y+28, r1	; 0x1c
     686:	1d 8e       	std	Y+29, r1	; 0x1d
     688:	e7 e8       	ldi	r30, 0x87	; 135
     68a:	f2 e0       	ldi	r31, 0x02	; 2
     68c:	16 a6       	std	Z+46, r1	; 0x2e
     68e:	15 a6       	std	Z+45, r1	; 0x2d
     690:	8e 8d       	ldd	r24, Y+30	; 0x1e
     692:	9f 8d       	ldd	r25, Y+31	; 0x1f
     694:	90 93 86 02 	sts	0x0286, r25
     698:	80 93 85 02 	sts	0x0285, r24
	Speed_PID.SetSetPoint(0);
	Angle_PID.SetSetPoint(E.Angle_count);
	PIDFlag = false;
     69c:	10 92 00 02 	sts	0x0200, r1
	Speed_PID.lastinput  = 0;
     6a0:	15 a2       	std	Z+37, r1	; 0x25
     6a2:	16 a2       	std	Z+38, r1	; 0x26
     6a4:	17 a2       	std	Z+39, r1	; 0x27
     6a6:	10 a6       	std	Z+40, r1	; 0x28
	Speed_PID.Iterm      = 0;
     6a8:	11 a2       	std	Z+33, r1	; 0x21
     6aa:	12 a2       	std	Z+34, r1	; 0x22
     6ac:	13 a2       	std	Z+35, r1	; 0x23
     6ae:	14 a2       	std	Z+36, r1	; 0x24
	Speed_PID.output     = 0;
     6b0:	15 8e       	std	Z+29, r1	; 0x1d
     6b2:	16 8e       	std	Z+30, r1	; 0x1e
     6b4:	17 8e       	std	Z+31, r1	; 0x1f
     6b6:	10 a2       	std	Z+32, r1	; 0x20
		
	Stopping = true;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 93 e4 02 	sts	0x02E4, r24
// 	if (!Golden_Rack && !ShuttleCockArm_home)
// 	{
// 		ShuttleCockArm_home = true;
// 		previous_time_gone_home = millis();
// 	}	
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <_Z12FlyingDragonv>:
	}
}

void FlyingDragon()
{
	TZ3 = true;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	80 93 ec 02 	sts	0x02EC, r24
	TZ1 = false;
     6ca:	10 92 ee 02 	sts	0x02EE, r1
	TZ2 = false;
     6ce:	10 92 ed 02 	sts	0x02ED, r1
	motor_speed = -49;         //56
     6d2:	2f ec       	ldi	r18, 0xCF	; 207
     6d4:	3f ef       	ldi	r19, 0xFF	; 255
     6d6:	30 93 21 02 	sts	0x0221, r19
     6da:	20 93 20 02 	sts	0x0220, r18
	Goflag = true;
     6de:	80 93 f1 02 	sts	0x02F1, r24
	PIDFlag = true;
     6e2:	80 93 00 02 	sts	0x0200, r24
	Ramp_up_flag = true;
     6e6:	80 93 f0 02 	sts	0x02F0, r24
     6ea:	80 91 24 02 	lds	r24, 0x0224
     6ee:	90 91 25 02 	lds	r25, 0x0225
     6f2:	90 93 b5 02 	sts	0x02B5, r25
     6f6:	80 93 b4 02 	sts	0x02B4, r24
	Speed_PID.SetSetPoint(Speed);
	TCRTRevolutionCount = 0;
     6fa:	10 92 28 02 	sts	0x0228, r1
     6fe:	10 92 27 02 	sts	0x0227, r1
	E.ExtraCount = 0;
     702:	10 92 d8 02 	sts	0x02D8, r1
     706:	10 92 d9 02 	sts	0x02D9, r1
     70a:	10 92 da 02 	sts	0x02DA, r1
     70e:	10 92 db 02 	sts	0x02DB, r1
	ReachedHome = false;
     712:	10 92 e5 02 	sts	0x02E5, r1
	
	SET(Plick_Plick);
     716:	46 9a       	sbi	0x08, 6	; 8
	SET(Plick_Plick_2);
     718:	40 9a       	sbi	0x08, 0	; 8
     71a:	08 95       	ret

0000071c <main>:
 int add;
 int geneva_count;


int main(void)
{
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	2f 97       	sbiw	r28, 0x0f	; 15
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	de bf       	out	0x3e, r29	; 62
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	cd bf       	out	0x3d, r28	; 61
	OUTPUT(Pneumatic);
     730:	ea e0       	ldi	r30, 0x0A	; 10
     732:	f1 e0       	ldi	r31, 0x01	; 1
     734:	80 81       	ld	r24, Z
     736:	81 60       	ori	r24, 0x01	; 1
     738:	80 83       	st	Z, r24
	CLEAR(Pneumatic);
     73a:	eb e0       	ldi	r30, 0x0B	; 11
     73c:	f1 e0       	ldi	r31, 0x01	; 1
     73e:	80 81       	ld	r24, Z
     740:	8e 7f       	andi	r24, 0xFE	; 254
     742:	80 83       	st	Z, r24
	
	OUTPUT(ShuttleCockArm_P);
     744:	9a 9a       	sbi	0x13, 2	; 19
	CLEAR(ShuttleCockArm_P);
     746:	a2 98       	cbi	0x14, 2	; 20
	
	OUTPUT(Grip_P);
     748:	98 9a       	sbi	0x13, 0	; 19
	CLEAR(Grip_P);
     74a:	a0 98       	cbi	0x14, 0	; 20
	
	OUTPUT(Plick_Plick);
     74c:	3e 9a       	sbi	0x07, 6	; 7
	OUTPUT(Plick_Plick_2);
     74e:	38 9a       	sbi	0x07, 0	; 7
	
	Initialize_All();
     750:	3b df       	rcall	.-394    	; 0x5c8 <_Z14Initialize_Allv>
	initialise_timeperiod();
     752:	0f df       	rcall	.-482    	; 0x572 <_Z21initialise_timeperiodv>
	
	
	Speed_PID.Initialize();
     754:	87 e8       	ldi	r24, 0x87	; 135
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	72 d6       	rcall	.+3300   	; 0x143e <_ZN3PID10InitializeEv>
	public:
			float lastinput;
			float offset;
			int setPoint;
			void Initialize();
			void Set_Range(float min,float max){minOut=min;maxOut=max;}
     75a:	e7 e8       	ldi	r30, 0x87	; 135
     75c:	f2 e0       	ldi	r31, 0x02	; 2
     75e:	0f 2e       	mov	r0, r31
     760:	41 2c       	mov	r4, r1
     762:	51 2c       	mov	r5, r1
     764:	f9 e7       	ldi	r31, 0x79	; 121
     766:	6f 2e       	mov	r6, r31
     768:	f3 ec       	ldi	r31, 0xC3	; 195
     76a:	7f 2e       	mov	r7, r31
     76c:	f0 2d       	mov	r31, r0
     76e:	45 8a       	std	Z+21, r4	; 0x15
     770:	56 8a       	std	Z+22, r5	; 0x16
     772:	67 8a       	std	Z+23, r6	; 0x17
     774:	70 8e       	std	Z+24, r7	; 0x18
     776:	0f 2e       	mov	r0, r31
     778:	81 2c       	mov	r8, r1
     77a:	91 2c       	mov	r9, r1
     77c:	f9 e7       	ldi	r31, 0x79	; 121
     77e:	af 2e       	mov	r10, r31
     780:	f3 e4       	ldi	r31, 0x43	; 67
     782:	bf 2e       	mov	r11, r31
     784:	f0 2d       	mov	r31, r0
     786:	81 8a       	std	Z+17, r8	; 0x11
     788:	92 8a       	std	Z+18, r9	; 0x12
     78a:	a3 8a       	std	Z+19, r10	; 0x13
     78c:	b4 8a       	std	Z+20, r11	; 0x14
	Speed_PID.Set_Range(-249,249);
	Speed_PID.Set_PID(4.1,0.399,8.4);     //   6.65,0.234,3.949    8.10,0.454,11.10   7.00,0.259,3.799   7.00,0.259,3.799  10.00,0.489,10.150  8.80,0.169,5.550      //8.05,0.115,4.299	 10.95,0.329,18.650  8.10,0.169,11.10// 9.25,0.454,6.800   8.30,0.504,9.650
     78e:	0f 2e       	mov	r0, r31
     790:	f6 e6       	ldi	r31, 0x66	; 102
     792:	cf 2e       	mov	r12, r31
     794:	dc 2c       	mov	r13, r12
     796:	f6 e0       	ldi	r31, 0x06	; 6
     798:	ef 2e       	mov	r14, r31
     79a:	f1 e4       	ldi	r31, 0x41	; 65
     79c:	ff 2e       	mov	r15, r31
     79e:	f0 2d       	mov	r31, r0
     7a0:	0a eb       	ldi	r16, 0xBA	; 186
     7a2:	19 e4       	ldi	r17, 0x49	; 73
     7a4:	2c ec       	ldi	r18, 0xCC	; 204
     7a6:	3e e3       	ldi	r19, 0x3E	; 62
     7a8:	43 e3       	ldi	r20, 0x33	; 51
     7aa:	53 e3       	ldi	r21, 0x33	; 51
     7ac:	63 e8       	ldi	r22, 0x83	; 131
     7ae:	70 e4       	ldi	r23, 0x40	; 64
     7b0:	cf 01       	movw	r24, r30
     7b2:	67 d6       	rcall	.+3278   	; 0x1482 <_ZN3PID7Set_PIDEfff>

	Angle_PID.Initialize();
     7b4:	88 e5       	ldi	r24, 0x58	; 88
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	42 d6       	rcall	.+3204   	; 0x143e <_ZN3PID10InitializeEv>
     7ba:	0f 2e       	mov	r0, r31
     7bc:	f8 e5       	ldi	r31, 0x58	; 88
     7be:	2f 2e       	mov	r2, r31
     7c0:	f2 e0       	ldi	r31, 0x02	; 2
     7c2:	3f 2e       	mov	r3, r31
     7c4:	f0 2d       	mov	r31, r0
     7c6:	f1 01       	movw	r30, r2
     7c8:	45 8a       	std	Z+21, r4	; 0x15
     7ca:	56 8a       	std	Z+22, r5	; 0x16
     7cc:	67 8a       	std	Z+23, r6	; 0x17
     7ce:	70 8e       	std	Z+24, r7	; 0x18
     7d0:	81 8a       	std	Z+17, r8	; 0x11
     7d2:	92 8a       	std	Z+18, r9	; 0x12
     7d4:	a3 8a       	std	Z+19, r10	; 0x13
     7d6:	b4 8a       	std	Z+20, r11	; 0x14
	Angle_PID.Set_Range(-249,249);
	Angle_PID.Set_PID(3.49,0.080,8.699 );                  //3.19,0.029,7.599  3.49,0.080,8.699   5.19,0.1,3.699
     7d8:	0f 2e       	mov	r0, r31
     7da:	fb e1       	ldi	r31, 0x1B	; 27
     7dc:	cf 2e       	mov	r12, r31
     7de:	ff e2       	ldi	r31, 0x2F	; 47
     7e0:	df 2e       	mov	r13, r31
     7e2:	fb e0       	ldi	r31, 0x0B	; 11
     7e4:	ef 2e       	mov	r14, r31
     7e6:	f1 e4       	ldi	r31, 0x41	; 65
     7e8:	ff 2e       	mov	r15, r31
     7ea:	f0 2d       	mov	r31, r0
     7ec:	0a e0       	ldi	r16, 0x0A	; 10
     7ee:	17 ed       	ldi	r17, 0xD7	; 215
     7f0:	23 ea       	ldi	r18, 0xA3	; 163
     7f2:	3d e3       	ldi	r19, 0x3D	; 61
     7f4:	49 e2       	ldi	r20, 0x29	; 41
     7f6:	5c e5       	ldi	r21, 0x5C	; 92
     7f8:	6f e5       	ldi	r22, 0x5F	; 95
     7fa:	70 e4       	ldi	r23, 0x40	; 64
     7fc:	c1 01       	movw	r24, r2
     7fe:	41 d6       	rcall	.+3202   	; 0x1482 <_ZN3PID7Set_PIDEfff>
	
	
	Geneva_PID.Initialize();
     800:	89 e2       	ldi	r24, 0x29	; 41
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	1c d6       	rcall	.+3128   	; 0x143e <_ZN3PID10InitializeEv>
     806:	e9 e2       	ldi	r30, 0x29	; 41
     808:	f2 e0       	ldi	r31, 0x02	; 2
     80a:	45 8a       	std	Z+21, r4	; 0x15
     80c:	56 8a       	std	Z+22, r5	; 0x16
     80e:	67 8a       	std	Z+23, r6	; 0x17
     810:	70 8e       	std	Z+24, r7	; 0x18
     812:	81 8a       	std	Z+17, r8	; 0x11
     814:	92 8a       	std	Z+18, r9	; 0x12
     816:	a3 8a       	std	Z+19, r10	; 0x13
     818:	b4 8a       	std	Z+20, r11	; 0x14
	Geneva_PID.Set_Range(-249,249);
	Geneva_PID.Set_PID(26.0,0,18);                        //15.50 0.015 0            60.50,0.219,4.199   54.40,0.045,10.70
     81a:	0f 2e       	mov	r0, r31
     81c:	c1 2c       	mov	r12, r1
     81e:	d1 2c       	mov	r13, r1
     820:	f0 e9       	ldi	r31, 0x90	; 144
     822:	ef 2e       	mov	r14, r31
     824:	f1 e4       	ldi	r31, 0x41	; 65
     826:	ff 2e       	mov	r15, r31
     828:	f0 2d       	mov	r31, r0
     82a:	00 e0       	ldi	r16, 0x00	; 0
     82c:	10 e0       	ldi	r17, 0x00	; 0
     82e:	98 01       	movw	r18, r16
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	60 ed       	ldi	r22, 0xD0	; 208
     836:	71 e4       	ldi	r23, 0x41	; 65
     838:	cf 01       	movw	r24, r30
     83a:	23 d6       	rcall	.+3142   	; 0x1482 <_ZN3PID7Set_PIDEfff>
	sei();
     83c:	78 94       	sei
	
	uart2_init(UART_BAUD_SELECT(9600,F_CPU));
     83e:	87 e6       	ldi	r24, 0x67	; 103
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	6d d7       	rcall	.+3802   	; 0x171e <_Z10uart2_initj>
// 	uart0_init(UART_BAUD_SELECT(38400,F_CPU));
// 	uart0_puts("ready\r\n");
	uart2_puts("Give Commands!!!\r\n");
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	db d7       	rcall	.+4022   	; 0x1800 <_Z10uart2_putsPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     84a:	8f e3       	ldi	r24, 0x3F	; 63
     84c:	9c e9       	ldi	r25, 0x9C	; 156
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <main+0x132>
     852:	00 c0       	rjmp	.+0      	; 0x854 <main+0x138>
     854:	00 00       	nop

	_delay_ms(10);
	
  	Initial_Position_Of_The_ARM();
     856:	c7 de       	rcall	.-626    	; 0x5e6 <_Z27Initial_Position_Of_The_ARMv>
				kd=KD;
				Set_PID(kp,ki,kd);
			}
			void SetSetPoint(float x)
			{
				setPoint = x;
     858:	89 e1       	ldi	r24, 0x19	; 25
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	f1 01       	movw	r30, r2
     85e:	96 a7       	std	Z+46, r25	; 0x2e
     860:	85 a7       	std	Z+45, r24	; 0x2d
	  
	 
	//GoToHome(); 
	int previous_data = 0;
	int8_t dir = -1;         //1 for forward direction and -1 for reverse direction
    motor_speed = -60;
     862:	84 ec       	ldi	r24, 0xC4	; 196
     864:	9f ef       	ldi	r25, 0xFF	; 255
     866:	90 93 21 02 	sts	0x0221, r25
     86a:	80 93 20 02 	sts	0x0220, r24
	
	Speed = -30;
     86e:	82 ee       	ldi	r24, 0xE2	; 226
     870:	9f ef       	ldi	r25, 0xFF	; 255
     872:	90 93 25 02 	sts	0x0225, r25
     876:	80 93 24 02 	sts	0x0224, r24
	bool UnArmed    = false;
	
	bool run_geneva_once  = false;	
	bool run_geneva_in_loop = false;
	
	unsigned long previous_time = 0;
     87a:	41 2c       	mov	r4, r1
     87c:	51 2c       	mov	r5, r1
     87e:	32 01       	movw	r6, r4
	bool Loaded     = false;
	bool UnGrab     = false;
	bool UnArmed    = false;
	
	bool run_geneva_once  = false;	
	bool run_geneva_in_loop = false;
     880:	21 2c       	mov	r2, r1
	bool Armed      = false;
	bool Loaded     = false;
	bool UnGrab     = false;
	bool UnArmed    = false;
	
	bool run_geneva_once  = false;	
     882:	1c 82       	std	Y+4, r1	; 0x04
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
	bool Loaded     = false;
	bool UnGrab     = false;
	bool UnArmed    = false;
     884:	18 86       	std	Y+8, r1	; 0x08
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
	bool Loaded     = false;
	bool UnGrab     = false;
     886:	1f 82       	std	Y+7, r1	; 0x07
	bool throwGolden   = false;
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
	bool Loaded     = false;
     888:	1d 82       	std	Y+5, r1	; 0x05
	bool geneva_start  = false;
	bool throwGolden   = false;
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
	bool Armed      = false;
     88a:	19 82       	std	Y+1, r1	; 0x01
	bool unarmed       = false;
	bool geneva_start  = false;
	bool throwGolden   = false;
	bool caught        = false;
/*******************************Normal ShuttleCock Boolean*********************************************/	
    bool Grabbed    = false;
     88c:	1e 82       	std	Y+6, r1	; 0x06
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
	bool geneva_start  = false;
	bool throwGolden   = false;
	bool caught        = false;
     88e:	1f 86       	std	Y+15, r1	; 0x0f
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
	bool geneva_start  = false;
	bool throwGolden   = false;
     890:	1e 86       	std	Y+14, r1	; 0x0e
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
	bool geneva_start  = false;
     892:	1b 86       	std	Y+11, r1	; 0x0b
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
	bool unarmed       = false;
     894:	1c 86       	std	Y+12, r1	; 0x0c
	
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
	bool ungripp       = false;
     896:	1d 86       	std	Y+13, r1	; 0x0d
    motor_speed = -60;
	
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
	bool armed         = false;
     898:	19 86       	std	Y+9, r1	; 0x09
	int8_t dir = -1;         //1 for forward direction and -1 for reverse direction
    motor_speed = -60;
	
	Speed = -30;
/*********************************GOlden Rack Boolean*************************************************/	
	bool Gripp         = false;
     89a:	1a 86       	std	Y+10, r1	; 0x0a
  	Initial_Position_Of_The_ARM();
  	Angle_PID.SetSetPoint(25);
	  
	 
	//GoToHome(); 
	int previous_data = 0;
     89c:	1b 82       	std	Y+3, r1	; 0x03
     89e:	1a 82       	std	Y+2, r1	; 0x02
					
			case 'w':
			{
				if (!Home)
				{
					ReceiveShuttleCock = true;	
     8a0:	33 24       	eor	r3, r3
     8a2:	33 94       	inc	r3
     8a4:	0f 2e       	mov	r0, r31
     8a6:	f9 e2       	ldi	r31, 0x29	; 41
     8a8:	af 2e       	mov	r10, r31
     8aa:	f2 e0       	ldi	r31, 0x02	; 2
     8ac:	bf 2e       	mov	r11, r31
     8ae:	f0 2d       	mov	r31, r0
		}
		if (Angle_PID.PID_Flag && !PIDFlag)
		{
			M.SetOcrValue(Angle_PID.Compute_PID(E.Encoder_Get_angle()));

			check_homeBuffer[3] = check_homeBuffer[2];
     8b0:	0f 2e       	mov	r0, r31
     8b2:	f8 e1       	ldi	r31, 0x18	; 24
     8b4:	8f 2e       	mov	r8, r31
     8b6:	f2 e0       	ldi	r31, 0x02	; 2
     8b8:	9f 2e       	mov	r9, r31
     8ba:	f0 2d       	mov	r31, r0
	
	unsigned long previous_time = 0;
	
	while (1)
	{
		data = uart2_getc();
     8bc:	49 d7       	rcall	.+3730   	; 0x1750 <_Z10uart2_getcv>
     8be:	80 93 26 02 	sts	0x0226, r24
		switch (data)
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	fc 01       	movw	r30, r24
     8c6:	f1 97       	sbiw	r30, 0x31	; 49
     8c8:	e7 34       	cpi	r30, 0x47	; 71
     8ca:	f1 05       	cpc	r31, r1
     8cc:	08 f0       	brcs	.+2      	; 0x8d0 <main+0x1b4>
     8ce:	d5 c0       	rjmp	.+426    	; 0xa7a <main+0x35e>
     8d0:	88 27       	eor	r24, r24
     8d2:	ee 58       	subi	r30, 0x8E	; 142
     8d4:	ff 4f       	sbci	r31, 0xFF	; 255
     8d6:	8f 4f       	sbci	r24, 0xFF	; 255
     8d8:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__tablejump2__>
// 				break;
// 			}
			
			case 'k':
			{
				run_geneva_in_loop = true;
     8dc:	23 2c       	mov	r2, r3
     8de:	cd c0       	rjmp	.+410    	; 0xa7a <main+0x35e>
		data = uart2_getc();
		switch (data)
		{
			case '1':
			{
				TZ1 = true;
     8e0:	30 92 ee 02 	sts	0x02EE, r3
				TZ2 = false;
     8e4:	10 92 ed 02 	sts	0x02ED, r1
				TZ3 = false;
     8e8:	10 92 ec 02 	sts	0x02EC, r1
				//motor_speed = -64;                   //60
				Goflag = true;
     8ec:	30 92 f1 02 	sts	0x02F1, r3
				PIDFlag = true;
     8f0:	30 92 00 02 	sts	0x0200, r3
				G_PID   = false;
     8f4:	10 92 ea 02 	sts	0x02EA, r1
				Ramp_up_flag = true;
     8f8:	30 92 f0 02 	sts	0x02F0, r3
     8fc:	80 91 24 02 	lds	r24, 0x0224
     900:	90 91 25 02 	lds	r25, 0x0225
     904:	90 93 b5 02 	sts	0x02B5, r25
     908:	80 93 b4 02 	sts	0x02B4, r24
				Speed_PID.SetSetPoint(Speed);
				TCRTRevolutionCount = 0;
     90c:	10 92 28 02 	sts	0x0228, r1
     910:	10 92 27 02 	sts	0x0227, r1
				E.ExtraCount = 0;
     914:	10 92 d8 02 	sts	0x02D8, r1
     918:	10 92 d9 02 	sts	0x02D9, r1
     91c:	10 92 da 02 	sts	0x02DA, r1
     920:	10 92 db 02 	sts	0x02DB, r1
				SET(Plick_Plick);
     924:	46 9a       	sbi	0x08, 6	; 8
				SET(Plick_Plick_2);
     926:	40 9a       	sbi	0x08, 0	; 8
				break;
     928:	a8 c0       	rjmp	.+336    	; 0xa7a <main+0x35e>
			}
			case '2':
			{
				TZ2 = true;
     92a:	30 92 ed 02 	sts	0x02ED, r3
				TZ1 = false;
     92e:	10 92 ee 02 	sts	0x02EE, r1
				TZ3 = false;
     932:	10 92 ec 02 	sts	0x02EC, r1
				G_PID = false;
     936:	10 92 ea 02 	sts	0x02EA, r1
				//motor_speed = -60;                                                               // -55;
				Goflag = true;
     93a:	30 92 f1 02 	sts	0x02F1, r3
				PIDFlag = true;
     93e:	30 92 00 02 	sts	0x0200, r3
				Ramp_up_flag = true;
     942:	30 92 f0 02 	sts	0x02F0, r3
     946:	80 91 24 02 	lds	r24, 0x0224
     94a:	90 91 25 02 	lds	r25, 0x0225
     94e:	90 93 b5 02 	sts	0x02B5, r25
     952:	80 93 b4 02 	sts	0x02B4, r24
				Speed_PID.SetSetPoint(Speed);
				TCRTRevolutionCount = 0;
     956:	10 92 28 02 	sts	0x0228, r1
     95a:	10 92 27 02 	sts	0x0227, r1
				E.ExtraCount = 0;
     95e:	10 92 d8 02 	sts	0x02D8, r1
     962:	10 92 d9 02 	sts	0x02D9, r1
     966:	10 92 da 02 	sts	0x02DA, r1
     96a:	10 92 db 02 	sts	0x02DB, r1
				SET(Plick_Plick);
     96e:	46 9a       	sbi	0x08, 6	; 8
				SET(Plick_Plick_2);
     970:	40 9a       	sbi	0x08, 0	; 8
				break;
     972:	83 c0       	rjmp	.+262    	; 0xa7a <main+0x35e>
			}	
			
				case '3':
				{
					TZ2 = false;
     974:	10 92 ed 02 	sts	0x02ED, r1
					TZ1 = false;
     978:	10 92 ee 02 	sts	0x02EE, r1
					TZ3 = true;
     97c:	30 92 ec 02 	sts	0x02EC, r3
					G_PID = false;
     980:	10 92 ea 02 	sts	0x02EA, r1
					//motor_speed = -58;                                                               // -55;
					Goflag = true;
     984:	30 92 f1 02 	sts	0x02F1, r3
					PIDFlag = true;
     988:	30 92 00 02 	sts	0x0200, r3
					Ramp_up_flag = true;
     98c:	30 92 f0 02 	sts	0x02F0, r3
     990:	80 91 24 02 	lds	r24, 0x0224
     994:	90 91 25 02 	lds	r25, 0x0225
     998:	90 93 b5 02 	sts	0x02B5, r25
     99c:	80 93 b4 02 	sts	0x02B4, r24
					Speed_PID.SetSetPoint(Speed);
					TCRTRevolutionCount = 0;
     9a0:	10 92 28 02 	sts	0x0228, r1
     9a4:	10 92 27 02 	sts	0x0227, r1
					E.ExtraCount = 0;
     9a8:	10 92 d8 02 	sts	0x02D8, r1
     9ac:	10 92 d9 02 	sts	0x02D9, r1
     9b0:	10 92 da 02 	sts	0x02DA, r1
     9b4:	10 92 db 02 	sts	0x02DB, r1
					SET(Plick_Plick);
     9b8:	46 9a       	sbi	0x08, 6	; 8
					SET(Plick_Plick_2);
     9ba:	40 9a       	sbi	0x08, 0	; 8
					break;
     9bc:	5e c0       	rjmp	.+188    	; 0xa7a <main+0x35e>
				}
			
			case 's':
			{
				Goflag = false;
     9be:	10 92 f1 02 	sts	0x02F1, r1
				PIDFlag = true;
     9c2:	30 92 00 02 	sts	0x0200, r3
     9c6:	10 92 b5 02 	sts	0x02B5, r1
     9ca:	10 92 b4 02 	sts	0x02B4, r1
				Speed_PID.SetSetPoint(0);
				M.StopMotor();
     9ce:	82 ee       	ldi	r24, 0xE2	; 226
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	c3 d4       	rcall	.+2438   	; 0x135a <_ZN5Motor9StopMotorEv>
				Speed = 0;
     9d4:	10 92 25 02 	sts	0x0225, r1
     9d8:	10 92 24 02 	sts	0x0224, r1
				TCRTRevolutionCount = 0;
     9dc:	10 92 28 02 	sts	0x0228, r1
     9e0:	10 92 27 02 	sts	0x0227, r1
				Ramp_up_flag = false;
     9e4:	10 92 f0 02 	sts	0x02F0, r1
				break;
     9e8:	48 c0       	rjmp	.+144    	; 0xa7a <main+0x35e>
			}
			case 'h':
			{ 
				Angle_PID.Set_PID(6.59,0.09,10.1);    // 4.29,0.024,11.9   2.99,0.1,15.0 6.39,0,26.80  5.79,0,22  6.29,0,4.899   3.19,0.029,7.599   6,0,25.0  //3.49,0.080,8.699   4.59,0.079,10.5
     9ea:	0f 2e       	mov	r0, r31
     9ec:	fa e9       	ldi	r31, 0x9A	; 154
     9ee:	cf 2e       	mov	r12, r31
     9f0:	f9 e9       	ldi	r31, 0x99	; 153
     9f2:	df 2e       	mov	r13, r31
     9f4:	f1 e2       	ldi	r31, 0x21	; 33
     9f6:	ef 2e       	mov	r14, r31
     9f8:	f1 e4       	ldi	r31, 0x41	; 65
     9fa:	ff 2e       	mov	r15, r31
     9fc:	f0 2d       	mov	r31, r0
     9fe:	0c ee       	ldi	r16, 0xEC	; 236
     a00:	11 e5       	ldi	r17, 0x51	; 81
     a02:	28 eb       	ldi	r18, 0xB8	; 184
     a04:	3d e3       	ldi	r19, 0x3D	; 61
     a06:	48 e4       	ldi	r20, 0x48	; 72
     a08:	51 ee       	ldi	r21, 0xE1	; 225
     a0a:	62 ed       	ldi	r22, 0xD2	; 210
     a0c:	70 e4       	ldi	r23, 0x40	; 64
     a0e:	88 e5       	ldi	r24, 0x58	; 88
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	37 d5       	rcall	.+2670   	; 0x1482 <_ZN3PID7Set_PIDEfff>
				GoToHome();
     a14:	1e de       	rcall	.-964    	; 0x652 <_Z8GoToHomev>
				break;
     a16:	31 c0       	rjmp	.+98     	; 0xa7a <main+0x35e>
			}
			case 'r':
			{
				Run_Geneva();
     a18:	b9 dd       	rcall	.-1166   	; 0x58c <_Z10Run_Genevav>
				break;
     a1a:	2f c0       	rjmp	.+94     	; 0xa7a <main+0x35e>
			}
			case 'o':
			{
				Grab_ShuttleCock = true;
     a1c:	30 92 e9 02 	sts	0x02E9, r3
				break;
     a20:	2c c0       	rjmp	.+88     	; 0xa7a <main+0x35e>
			}
			
			case 'j':
			{
				gotRack        = true;
     a22:	30 92 e7 02 	sts	0x02E7, r3
				run_geneva_once = true;
				first_Golden = true;
     a26:	30 92 e8 02 	sts	0x02E8, r3
			}
			
			case 'j':
			{
				gotRack        = true;
				run_geneva_once = true;
     a2a:	3c 82       	std	Y+4, r3	; 0x04
				first_Golden = true;
				break;
     a2c:	26 c0       	rjmp	.+76     	; 0xa7a <main+0x35e>
			}
			
			case 'n':
			{
				SET(Pneumatic);
     a2e:	eb e0       	ldi	r30, 0x0B	; 11
     a30:	f1 e0       	ldi	r31, 0x01	; 1
     a32:	80 81       	ld	r24, Z
     a34:	81 60       	ori	r24, 0x01	; 1
     a36:	80 83       	st	Z, r24
				break;
     a38:	20 c0       	rjmp	.+64     	; 0xa7a <main+0x35e>
			}
			
			case 'm':
			{
				CLEAR(Pneumatic);
     a3a:	eb e0       	ldi	r30, 0x0B	; 11
     a3c:	f1 e0       	ldi	r31, 0x01	; 1
     a3e:	80 81       	ld	r24, Z
     a40:	8e 7f       	andi	r24, 0xFE	; 254
     a42:	80 83       	st	Z, r24
				break;
     a44:	1a c0       	rjmp	.+52     	; 0xa7a <main+0x35e>
			}
			
			case 'i':
			{
				motor_speed += 1;
     a46:	80 91 20 02 	lds	r24, 0x0220
     a4a:	90 91 21 02 	lds	r25, 0x0221
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	90 93 21 02 	sts	0x0221, r25
     a54:	80 93 20 02 	sts	0x0220, r24
				break;
     a58:	10 c0       	rjmp	.+32     	; 0xa7a <main+0x35e>
			}
			
			case 'd':
			{
				motor_speed -= 1;
     a5a:	80 91 20 02 	lds	r24, 0x0220
     a5e:	90 91 21 02 	lds	r25, 0x0221
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	90 93 21 02 	sts	0x0221, r25
     a68:	80 93 20 02 	sts	0x0220, r24
				break;
     a6c:	06 c0       	rjmp	.+12     	; 0xa7a <main+0x35e>
				break;
			}
					
			case 'w':
			{
				if (!Home)
     a6e:	80 91 ef 02 	lds	r24, 0x02EF
     a72:	81 11       	cpse	r24, r1
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <main+0x35e>
				{
					ReceiveShuttleCock = true;	
     a76:	30 92 eb 02 	sts	0x02EB, r3
			}

			default:break;
		}
		
		data = 0;
     a7a:	10 92 26 02 	sts	0x0226, r1


	uart2_putint(Speed);
     a7e:	80 91 24 02 	lds	r24, 0x0224
     a82:	90 91 25 02 	lds	r25, 0x0225
     a86:	94 d6       	rcall	.+3368   	; 0x17b0 <_Z12uart2_putinti>
	uart2_putc(' ');
     a88:	80 e2       	ldi	r24, 0x20	; 32
     a8a:	7d d6       	rcall	.+3322   	; 0x1786 <_Z10uart2_putch>
	uart2_putint(motor_speed);
     a8c:	80 91 20 02 	lds	r24, 0x0220
     a90:	90 91 21 02 	lds	r25, 0x0221
     a94:	8d d6       	rcall	.+3354   	; 0x17b0 <_Z12uart2_putinti>
	uart2_puts("\r\n");
     a96:	81 e1       	ldi	r24, 0x11	; 17
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	b2 d6       	rcall	.+3428   	; 0x1800 <_Z10uart2_putsPKc>
// 				}
// 			}
			
		
		/******************************************Grabbing Shuttle Cock On Masters Command************************************************/
		if (Grab_ShuttleCock)
     a9c:	80 91 e9 02 	lds	r24, 0x02E9
     aa0:	88 23       	and	r24, r24
     aa2:	f1 f0       	breq	.+60     	; 0xae0 <main+0x3c4>
		{
			if (!Grabbed && !Armed && !Loaded && !UnGrab && !UnArmed)
     aa4:	fe 81       	ldd	r31, Y+6	; 0x06
     aa6:	f1 11       	cpse	r31, r1
     aa8:	71 c2       	rjmp	.+1250   	; 0xf8c <main+0x870>
     aaa:	29 81       	ldd	r18, Y+1	; 0x01
     aac:	21 11       	cpse	r18, r1
     aae:	18 c0       	rjmp	.+48     	; 0xae0 <main+0x3c4>
     ab0:	8d 81       	ldd	r24, Y+5	; 0x05
     ab2:	81 11       	cpse	r24, r1
     ab4:	15 c0       	rjmp	.+42     	; 0xae0 <main+0x3c4>
     ab6:	9f 81       	ldd	r25, Y+7	; 0x07
     ab8:	91 11       	cpse	r25, r1
     aba:	12 c0       	rjmp	.+36     	; 0xae0 <main+0x3c4>
     abc:	e8 85       	ldd	r30, Y+8	; 0x08
     abe:	e1 11       	cpse	r30, r1
     ac0:	0f c0       	rjmp	.+30     	; 0xae0 <main+0x3c4>
			{
				CLEAR(ShuttleCockArm_P);
     ac2:	a2 98       	cbi	0x14, 2	; 20
				Grabbed = true;
				previous_time = millis();
     ac4:	4a dd       	rcall	.-1388   	; 0x55a <_Z6millisv>
     ac6:	2b 01       	movw	r4, r22
     ac8:	3c 01       	movw	r6, r24
     aca:	60 c2       	rjmp	.+1216   	; 0xf8c <main+0x870>
			}
			//_delay_ms(500);
			if (Grabbed && (millis()-previous_time) >= 800)
			{
				SET(Grip_P);
     acc:	a0 9a       	sbi	0x14, 0	; 20
				Armed = true;
				//previous_time = millis();
				Grab_ShuttleCock = false;
     ace:	10 92 e9 02 	sts	0x02E9, r1
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     ad2:	80 91 eb 02 	lds	r24, 0x02EB
     ad6:	81 11       	cpse	r24, r1
     ad8:	0c c0       	rjmp	.+24     	; 0xaf2 <main+0x3d6>
			}
			//_delay_ms(500);
			if (Grabbed && (millis()-previous_time) >= 800)
			{
				SET(Grip_P);
				Armed = true;
     ada:	39 82       	std	Y+1, r3	; 0x01
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     adc:	3e 82       	std	Y+6, r3	; 0x06
     ade:	65 c0       	rjmp	.+202    	; 0xbaa <main+0x48e>
     ae0:	80 91 eb 02 	lds	r24, 0x02EB
     ae4:	88 23       	and	r24, r24
     ae6:	09 f4       	brne	.+2      	; 0xaea <main+0x3ce>
     ae8:	60 c0       	rjmp	.+192    	; 0xbaa <main+0x48e>
		{
			if (Armed && !Loaded && !UnGrab && !UnArmed)
     aea:	f9 81       	ldd	r31, Y+1	; 0x01
     aec:	ff 23       	and	r31, r31
     aee:	81 f0       	breq	.+32     	; 0xb10 <main+0x3f4>
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <main+0x3d8>
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     af2:	3e 82       	std	Y+6, r3	; 0x06
		{
			if (Armed && !Loaded && !UnGrab && !UnArmed)
     af4:	2d 81       	ldd	r18, Y+5	; 0x05
     af6:	21 11       	cpse	r18, r1
     af8:	58 c2       	rjmp	.+1200   	; 0xfaa <main+0x88e>
     afa:	8f 81       	ldd	r24, Y+7	; 0x07
     afc:	81 11       	cpse	r24, r1
     afe:	21 c0       	rjmp	.+66     	; 0xb42 <main+0x426>
     b00:	98 85       	ldd	r25, Y+8	; 0x08
     b02:	91 11       	cpse	r25, r1
     b04:	20 c0       	rjmp	.+64     	; 0xb46 <main+0x42a>
			{
				SET(ShuttleCockArm_P);
     b06:	a2 9a       	sbi	0x14, 2	; 20
				Loaded = true;
				previous_time = millis();
     b08:	28 dd       	rcall	.-1456   	; 0x55a <_Z6millisv>
     b0a:	2b 01       	movw	r4, r22
     b0c:	3c 01       	movw	r6, r24
     b0e:	4d c2       	rjmp	.+1178   	; 0xfaa <main+0x88e>
			}
			//_delay_ms(700);
			if (Loaded && (millis()-previous_time) >= 900)
     b10:	ed 81       	ldd	r30, Y+5	; 0x05
     b12:	ee 23       	and	r30, r30
     b14:	d9 f0       	breq	.+54     	; 0xb4c <main+0x430>
     b16:	21 dd       	rcall	.-1470   	; 0x55a <_Z6millisv>
     b18:	dc 01       	movw	r26, r24
     b1a:	cb 01       	movw	r24, r22
     b1c:	84 19       	sub	r24, r4
     b1e:	95 09       	sbc	r25, r5
     b20:	a6 09       	sbc	r26, r6
     b22:	b7 09       	sbc	r27, r7
     b24:	84 38       	cpi	r24, 0x84	; 132
     b26:	93 40       	sbci	r25, 0x03	; 3
     b28:	a1 05       	cpc	r26, r1
     b2a:	b1 05       	cpc	r27, r1
     b2c:	70 f0       	brcs	.+28     	; 0xb4a <main+0x42e>
			{
				SET(Pneumatic);
     b2e:	eb e0       	ldi	r30, 0x0B	; 11
     b30:	f1 e0       	ldi	r31, 0x01	; 1
     b32:	80 81       	ld	r24, Z
     b34:	81 60       	ori	r24, 0x01	; 1
     b36:	80 83       	st	Z, r24
				UnGrab = true;
				Loaded = false;
				previous_time = millis();
     b38:	10 dd       	rcall	.-1504   	; 0x55a <_Z6millisv>
     b3a:	2b 01       	movw	r4, r22
     b3c:	3c 01       	movw	r6, r24
			//_delay_ms(700);
			if (Loaded && (millis()-previous_time) >= 900)
			{
				SET(Pneumatic);
				UnGrab = true;
				Loaded = false;
     b3e:	1d 82       	std	Y+5, r1	; 0x05
     b40:	08 c0       	rjmp	.+16     	; 0xb52 <main+0x436>
     b42:	39 82       	std	Y+1, r3	; 0x01
     b44:	03 c0       	rjmp	.+6      	; 0xb4c <main+0x430>
     b46:	39 82       	std	Y+1, r3	; 0x01
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <main+0x430>
     b4a:	3d 82       	std	Y+5, r3	; 0x05
				previous_time = millis();
			}
			//_delay_ms(100);
			if (UnGrab && (millis()-previous_time) >= 200)
     b4c:	ff 81       	ldd	r31, Y+7	; 0x07
     b4e:	ff 23       	and	r31, r31
     b50:	99 f0       	breq	.+38     	; 0xb78 <main+0x45c>
     b52:	03 dd       	rcall	.-1530   	; 0x55a <_Z6millisv>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	84 19       	sub	r24, r4
     b5a:	95 09       	sbc	r25, r5
     b5c:	a6 09       	sbc	r26, r6
     b5e:	b7 09       	sbc	r27, r7
     b60:	88 3c       	cpi	r24, 0xC8	; 200
     b62:	91 05       	cpc	r25, r1
     b64:	a1 05       	cpc	r26, r1
     b66:	b1 05       	cpc	r27, r1
     b68:	30 f0       	brcs	.+12     	; 0xb76 <main+0x45a>
			{
				CLEAR(Grip_P);
     b6a:	a0 98       	cbi	0x14, 0	; 20
				UnArmed = true;
				UnGrab = false;
				previous_time = millis();	
     b6c:	f6 dc       	rcall	.-1556   	; 0x55a <_Z6millisv>
     b6e:	2b 01       	movw	r4, r22
     b70:	3c 01       	movw	r6, r24
			//_delay_ms(100);
			if (UnGrab && (millis()-previous_time) >= 200)
			{
				CLEAR(Grip_P);
				UnArmed = true;
				UnGrab = false;
     b72:	1f 82       	std	Y+7, r1	; 0x07
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <main+0x462>
     b76:	3f 82       	std	Y+7, r3	; 0x07
				previous_time = millis();	
			}
			if (UnArmed && (millis()-previous_time) >= 200)
     b78:	28 85       	ldd	r18, Y+8	; 0x08
     b7a:	22 23       	and	r18, r18
     b7c:	b1 f0       	breq	.+44     	; 0xbaa <main+0x48e>
     b7e:	ed dc       	rcall	.-1574   	; 0x55a <_Z6millisv>
     b80:	dc 01       	movw	r26, r24
     b82:	cb 01       	movw	r24, r22
     b84:	84 19       	sub	r24, r4
     b86:	95 09       	sbc	r25, r5
     b88:	a6 09       	sbc	r26, r6
     b8a:	b7 09       	sbc	r27, r7
     b8c:	88 3c       	cpi	r24, 0xC8	; 200
     b8e:	91 05       	cpc	r25, r1
     b90:	a1 05       	cpc	r26, r1
     b92:	b1 05       	cpc	r27, r1
     b94:	48 f0       	brcs	.+18     	; 0xba8 <main+0x48c>
			{
				CLEAR(ShuttleCockArm_P);
     b96:	a2 98       	cbi	0x14, 2	; 20
				ReceiveShuttleCock = false;
     b98:	10 92 eb 02 	sts	0x02EB, r1
				Grabbed = false;
				Armed   = false;
				Loaded  = false;
				UnGrab  = false;
				UnArmed = false;
     b9c:	18 86       	std	Y+8, r1	; 0x08
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
				Armed   = false;
				Loaded  = false;
				UnGrab  = false;
     b9e:	1f 82       	std	Y+7, r1	; 0x07
			{
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
				Armed   = false;
				Loaded  = false;
     ba0:	1d 82       	std	Y+5, r1	; 0x05
			if (UnArmed && (millis()-previous_time) >= 200)
			{
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
				Armed   = false;
     ba2:	19 82       	std	Y+1, r1	; 0x01
			}
			if (UnArmed && (millis()-previous_time) >= 200)
			{
				CLEAR(ShuttleCockArm_P);
				ReceiveShuttleCock = false;
				Grabbed = false;
     ba4:	1e 82       	std	Y+6, r1	; 0x06
     ba6:	01 c0       	rjmp	.+2      	; 0xbaa <main+0x48e>
     ba8:	38 86       	std	Y+8, r3	; 0x08
				UnGrab  = false;
				UnArmed = false;
			}
		}
		
		if(abs(E1.Enoder_Get_Angle()) >= 720)
     baa:	86 eb       	ldi	r24, 0xB6	; 182
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	fc db       	rcall	.-2056   	; 0x3a8 <_ZN13GenevaEncoder16Enoder_Get_AngleEv>
     bb0:	99 23       	and	r25, r25
     bb2:	1c f4       	brge	.+6      	; 0xbba <main+0x49e>
     bb4:	91 95       	neg	r25
     bb6:	81 95       	neg	r24
     bb8:	91 09       	sbc	r25, r1
     bba:	80 3d       	cpi	r24, 0xD0	; 208
     bbc:	92 40       	sbci	r25, 0x02	; 2
     bbe:	94 f0       	brlt	.+36     	; 0xbe4 <main+0x4c8>
		{
			G.StopMotor();
     bc0:	83 ee       	ldi	r24, 0xE3	; 227
     bc2:	92 e0       	ldi	r25, 0x02	; 2
     bc4:	2a dc       	rcall	.-1964   	; 0x41a <_ZN11GenevaMotor9StopMotorEv>
		inline void Reset_Count(){Encoder_Count = 0;};
     bc6:	10 92 b7 02 	sts	0x02B7, r1
     bca:	10 92 b6 02 	sts	0x02B6, r1
     bce:	f5 01       	movw	r30, r10
     bd0:	16 a6       	std	Z+46, r1	; 0x2e
     bd2:	15 a6       	std	Z+45, r1	; 0x2d
			E1.Reset_Count();
			Geneva_PID.SetSetPoint(0);
			Geneva_PID.Iterm = 0;
     bd4:	11 a2       	std	Z+33, r1	; 0x21
     bd6:	12 a2       	std	Z+34, r1	; 0x22
     bd8:	13 a2       	std	Z+35, r1	; 0x23
     bda:	14 a2       	std	Z+36, r1	; 0x24
			Geneva_PID.output = 0;
     bdc:	15 8e       	std	Z+29, r1	; 0x1d
     bde:	16 8e       	std	Z+30, r1	; 0x1e
     be0:	17 8e       	std	Z+31, r1	; 0x1f
     be2:	10 a2       	std	Z+32, r1	; 0x20
		}
/***********************************************************************************************************************************/
		if (run_geneva_in_loop)
     be4:	21 10       	cpse	r2, r1
		{
			Run_Geneva();
     be6:	d2 dc       	rcall	.-1628   	; 0x58c <_Z10Run_Genevav>
		}
 /****************************************************Golden Rack Section***********************************************************/		
  		if (gotRack)
     be8:	80 91 e7 02 	lds	r24, 0x02E7
     bec:	88 23       	and	r24, r24
     bee:	11 f1       	breq	.+68     	; 0xc34 <main+0x518>
  		{
			if (run_geneva_once)
     bf0:	fc 81       	ldd	r31, Y+4	; 0x04
     bf2:	ff 23       	and	r31, r31
     bf4:	29 f0       	breq	.+10     	; 0xc00 <main+0x4e4>
			{
				Run_Geneva();
     bf6:	ca dc       	rcall	.-1644   	; 0x58c <_Z10Run_Genevav>
				run_geneva_once = false;
				run_geneva_in_loop = false;
				previous_time = millis();
     bf8:	b0 dc       	rcall	.-1696   	; 0x55a <_Z6millisv>
     bfa:	2b 01       	movw	r4, r22
     bfc:	3c 01       	movw	r6, r24
  		{
			if (run_geneva_once)
			{
				Run_Geneva();
				run_geneva_once = false;
				run_geneva_in_loop = false;
     bfe:	21 2c       	mov	r2, r1
				previous_time = millis();
			}
			
			if (first_Golden && (millis()-previous_time) >= 800)
     c00:	80 91 e8 02 	lds	r24, 0x02E8
     c04:	88 23       	and	r24, r24
     c06:	99 f0       	breq	.+38     	; 0xc2e <main+0x512>
     c08:	a8 dc       	rcall	.-1712   	; 0x55a <_Z6millisv>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	84 19       	sub	r24, r4
     c10:	95 09       	sbc	r25, r5
     c12:	a6 09       	sbc	r26, r6
     c14:	b7 09       	sbc	r27, r7
     c16:	80 32       	cpi	r24, 0x20	; 32
     c18:	93 40       	sbci	r25, 0x03	; 3
     c1a:	a1 05       	cpc	r26, r1
     c1c:	b1 05       	cpc	r27, r1
     c1e:	48 f0       	brcs	.+18     	; 0xc32 <main+0x516>
			{
				CLEAR(ShuttleCockArm_P);
     c20:	a2 98       	cbi	0x14, 2	; 20
				first_Golden = false;
     c22:	10 92 e8 02 	sts	0x02E8, r1
				run_geneva_once = false;
				gotRack = false;
     c26:	10 92 e7 02 	sts	0x02E7, r1
			
			if (first_Golden && (millis()-previous_time) >= 800)
			{
				CLEAR(ShuttleCockArm_P);
				first_Golden = false;
				run_geneva_once = false;
     c2a:	1c 82       	std	Y+4, r1	; 0x04
     c2c:	03 c0       	rjmp	.+6      	; 0xc34 <main+0x518>
     c2e:	1c 82       	std	Y+4, r1	; 0x04
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <main+0x518>
     c32:	1c 82       	std	Y+4, r1	; 0x04
			}
			  
  		}
		  
		  
		  if (Golden_Rack )
     c34:	80 91 e6 02 	lds	r24, 0x02E6
     c38:	88 23       	and	r24, r24
     c3a:	09 f4       	brne	.+2      	; 0xc3e <main+0x522>
     c3c:	cd c0       	rjmp	.+410    	; 0xdd8 <main+0x6bc>
  		{
  			if ((GoldenShuttle_count < 6))
     c3e:	80 91 22 02 	lds	r24, 0x0222
     c42:	90 91 23 02 	lds	r25, 0x0223
     c46:	06 97       	sbiw	r24, 0x06	; 6
     c48:	0c f0       	brlt	.+2      	; 0xc4c <main+0x530>
     c4a:	c6 c0       	rjmp	.+396    	; 0xdd8 <main+0x6bc>
  			{
  				if ((Speed == -30) && (ReachedHome))
     c4c:	80 91 24 02 	lds	r24, 0x0224
     c50:	90 91 25 02 	lds	r25, 0x0225
     c54:	4e 96       	adiw	r24, 0x1e	; 30
     c56:	09 f0       	breq	.+2      	; 0xc5a <main+0x53e>
     c58:	bf c0       	rjmp	.+382    	; 0xdd8 <main+0x6bc>
     c5a:	80 91 e5 02 	lds	r24, 0x02E5
     c5e:	81 11       	cpse	r24, r1
     c60:	a6 c1       	rjmp	.+844    	; 0xfae <main+0x892>
     c62:	ba c0       	rjmp	.+372    	; 0xdd8 <main+0x6bc>
  				{ 
					 if (!geneva_start && !Gripp && !armed && !unarmed && !ungripp && !throwGolden && !caught)
     c64:	fa 85       	ldd	r31, Y+10	; 0x0a
     c66:	f1 11       	cpse	r31, r1
     c68:	17 c0       	rjmp	.+46     	; 0xc98 <main+0x57c>
     c6a:	29 85       	ldd	r18, Y+9	; 0x09
     c6c:	21 11       	cpse	r18, r1
     c6e:	27 c0       	rjmp	.+78     	; 0xcbe <main+0x5a2>
     c70:	8c 85       	ldd	r24, Y+12	; 0x0c
     c72:	81 11       	cpse	r24, r1
     c74:	24 c0       	rjmp	.+72     	; 0xcbe <main+0x5a2>
     c76:	9d 85       	ldd	r25, Y+13	; 0x0d
     c78:	91 11       	cpse	r25, r1
     c7a:	21 c0       	rjmp	.+66     	; 0xcbe <main+0x5a2>
     c7c:	ee 85       	ldd	r30, Y+14	; 0x0e
     c7e:	e1 11       	cpse	r30, r1
     c80:	1e c0       	rjmp	.+60     	; 0xcbe <main+0x5a2>
     c82:	ff 85       	ldd	r31, Y+15	; 0x0f
     c84:	f1 11       	cpse	r31, r1
     c86:	1b c0       	rjmp	.+54     	; 0xcbe <main+0x5a2>
					 {
						//SET(ShuttleCockArm_P);
 						Gripp = true;
						previous_time = millis();
     c88:	68 dc       	rcall	.-1840   	; 0x55a <_Z6millisv>
     c8a:	2b 01       	movw	r4, r22
     c8c:	3c 01       	movw	r6, r24
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <main+0x57c>
					}
  					/*_delay_ms(500);*/
					if (Gripp && (millis()-previous_time) >= 200)
     c90:	2a 85       	ldd	r18, Y+10	; 0x0a
     c92:	22 23       	and	r18, r18
     c94:	09 f4       	brne	.+2      	; 0xc98 <main+0x57c>
     c96:	30 c2       	rjmp	.+1120   	; 0x10f8 <main+0x9dc>
     c98:	60 dc       	rcall	.-1856   	; 0x55a <_Z6millisv>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	84 19       	sub	r24, r4
     ca0:	95 09       	sbc	r25, r5
     ca2:	a6 09       	sbc	r26, r6
     ca4:	b7 09       	sbc	r27, r7
     ca6:	88 3c       	cpi	r24, 0xC8	; 200
     ca8:	91 05       	cpc	r25, r1
     caa:	a1 05       	cpc	r26, r1
     cac:	b1 05       	cpc	r27, r1
     cae:	30 f0       	brcs	.+12     	; 0xcbc <main+0x5a0>
					{
						SET(Grip_P);
     cb0:	a0 9a       	sbi	0x14, 0	; 20
						 armed = true;
						 previous_time = millis(); 
     cb2:	53 dc       	rcall	.-1882   	; 0x55a <_Z6millisv>
     cb4:	2b 01       	movw	r4, r22
     cb6:	3c 01       	movw	r6, r24
						 Gripp = false;
     cb8:	1a 86       	std	Y+10, r1	; 0x0a
     cba:	04 c0       	rjmp	.+8      	; 0xcc4 <main+0x5a8>
     cbc:	3a 86       	std	Y+10, r3	; 0x0a
					}
					
					/*_delay_ms(100);*/
					
					if (armed && (millis()-previous_time) >= 150)
     cbe:	89 85       	ldd	r24, Y+9	; 0x09
     cc0:	88 23       	and	r24, r24
     cc2:	99 f0       	breq	.+38     	; 0xcea <main+0x5ce>
     cc4:	4a dc       	rcall	.-1900   	; 0x55a <_Z6millisv>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	84 19       	sub	r24, r4
     ccc:	95 09       	sbc	r25, r5
     cce:	a6 09       	sbc	r26, r6
     cd0:	b7 09       	sbc	r27, r7
     cd2:	86 39       	cpi	r24, 0x96	; 150
     cd4:	91 05       	cpc	r25, r1
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	30 f0       	brcs	.+12     	; 0xce8 <main+0x5cc>
					{
						SET(ShuttleCockArm_P);
     cdc:	a2 9a       	sbi	0x14, 2	; 20
						geneva_start = true;
						previous_time = millis();
     cde:	3d dc       	rcall	.-1926   	; 0x55a <_Z6millisv>
     ce0:	2b 01       	movw	r4, r22
     ce2:	3c 01       	movw	r6, r24
						armed = false;
     ce4:	19 86       	std	Y+9, r1	; 0x09
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <main+0x5d4>
     ce8:	39 86       	std	Y+9, r3	; 0x09
					}
					
					if (geneva_start && (millis()-previous_time) >= 50)
     cea:	9b 85       	ldd	r25, Y+11	; 0x0b
     cec:	99 23       	and	r25, r25
     cee:	91 f0       	breq	.+36     	; 0xd14 <main+0x5f8>
     cf0:	34 dc       	rcall	.-1944   	; 0x55a <_Z6millisv>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	84 19       	sub	r24, r4
     cf8:	95 09       	sbc	r25, r5
     cfa:	a6 09       	sbc	r26, r6
     cfc:	b7 09       	sbc	r27, r7
     cfe:	c2 97       	sbiw	r24, 0x32	; 50
     d00:	a1 05       	cpc	r26, r1
     d02:	b1 05       	cpc	r27, r1
     d04:	30 f0       	brcs	.+12     	; 0xd12 <main+0x5f6>
					{
						 Run_Geneva();
     d06:	42 dc       	rcall	.-1916   	; 0x58c <_Z10Run_Genevav>
						 caught = true;
						 previous_time = millis();
     d08:	28 dc       	rcall	.-1968   	; 0x55a <_Z6millisv>
     d0a:	2b 01       	movw	r4, r22
     d0c:	3c 01       	movw	r6, r24
						 geneva_start = false;
     d0e:	1b 86       	std	Y+11, r1	; 0x0b
     d10:	04 c0       	rjmp	.+8      	; 0xd1a <main+0x5fe>
     d12:	3b 86       	std	Y+11, r3	; 0x0b
					}
					if (caught && (millis()-previous_time) >= 800)
     d14:	ef 85       	ldd	r30, Y+15	; 0x0f
     d16:	ee 23       	and	r30, r30
     d18:	b9 f0       	breq	.+46     	; 0xd48 <main+0x62c>
     d1a:	1f dc       	rcall	.-1986   	; 0x55a <_Z6millisv>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	84 19       	sub	r24, r4
     d22:	95 09       	sbc	r25, r5
     d24:	a6 09       	sbc	r26, r6
     d26:	b7 09       	sbc	r27, r7
     d28:	80 32       	cpi	r24, 0x20	; 32
     d2a:	93 40       	sbci	r25, 0x03	; 3
     d2c:	a1 05       	cpc	r26, r1
     d2e:	b1 05       	cpc	r27, r1
     d30:	50 f0       	brcs	.+20     	; 0xd46 <main+0x62a>
					{
						SET(Pneumatic);
     d32:	eb e0       	ldi	r30, 0x0B	; 11
     d34:	f1 e0       	ldi	r31, 0x01	; 1
     d36:	80 81       	ld	r24, Z
     d38:	81 60       	ori	r24, 0x01	; 1
     d3a:	80 83       	st	Z, r24
						ungripp = true;
						previous_time = millis();
     d3c:	0e dc       	rcall	.-2020   	; 0x55a <_Z6millisv>
     d3e:	2b 01       	movw	r4, r22
     d40:	3c 01       	movw	r6, r24
						caught = false;
     d42:	1f 86       	std	Y+15, r1	; 0x0f
     d44:	04 c0       	rjmp	.+8      	; 0xd4e <main+0x632>
     d46:	3f 86       	std	Y+15, r3	; 0x0f
					}
					if(ungripp && (millis()-previous_time) >= 300)
     d48:	fd 85       	ldd	r31, Y+13	; 0x0d
     d4a:	ff 23       	and	r31, r31
     d4c:	99 f0       	breq	.+38     	; 0xd74 <main+0x658>
     d4e:	05 dc       	rcall	.-2038   	; 0x55a <_Z6millisv>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	84 19       	sub	r24, r4
     d56:	95 09       	sbc	r25, r5
     d58:	a6 09       	sbc	r26, r6
     d5a:	b7 09       	sbc	r27, r7
     d5c:	8c 32       	cpi	r24, 0x2C	; 44
     d5e:	91 40       	sbci	r25, 0x01	; 1
     d60:	a1 05       	cpc	r26, r1
     d62:	b1 05       	cpc	r27, r1
     d64:	30 f0       	brcs	.+12     	; 0xd72 <main+0x656>
					{
						CLEAR(Grip_P);
     d66:	a0 98       	cbi	0x14, 0	; 20
						unarmed = true;
						ungripp = false;
						previous_time = millis();
     d68:	f8 db       	rcall	.-2064   	; 0x55a <_Z6millisv>
     d6a:	2b 01       	movw	r4, r22
     d6c:	3c 01       	movw	r6, r24
					}
					if(ungripp && (millis()-previous_time) >= 300)
					{
						CLEAR(Grip_P);
						unarmed = true;
						ungripp = false;
     d6e:	1d 86       	std	Y+13, r1	; 0x0d
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <main+0x65e>
     d72:	3d 86       	std	Y+13, r3	; 0x0d
						previous_time = millis();
					}
					if (unarmed && (millis()-previous_time) >= 300)
     d74:	8c 85       	ldd	r24, Y+12	; 0x0c
     d76:	88 23       	and	r24, r24
     d78:	99 f0       	breq	.+38     	; 0xda0 <main+0x684>
     d7a:	ef db       	rcall	.-2082   	; 0x55a <_Z6millisv>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	84 19       	sub	r24, r4
     d82:	95 09       	sbc	r25, r5
     d84:	a6 09       	sbc	r26, r6
     d86:	b7 09       	sbc	r27, r7
     d88:	8c 32       	cpi	r24, 0x2C	; 44
     d8a:	91 40       	sbci	r25, 0x01	; 1
     d8c:	a1 05       	cpc	r26, r1
     d8e:	b1 05       	cpc	r27, r1
     d90:	30 f0       	brcs	.+12     	; 0xd9e <main+0x682>
					{
						CLEAR(ShuttleCockArm_P);
     d92:	a2 98       	cbi	0x14, 2	; 20
						throwGolden = true;
						unarmed = false;
						previous_time = millis();
     d94:	e2 db       	rcall	.-2108   	; 0x55a <_Z6millisv>
     d96:	2b 01       	movw	r4, r22
     d98:	3c 01       	movw	r6, r24
					}
					if (unarmed && (millis()-previous_time) >= 300)
					{
						CLEAR(ShuttleCockArm_P);
						throwGolden = true;
						unarmed = false;
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <main+0x68a>
     d9e:	3c 86       	std	Y+12, r3	; 0x0c
						previous_time = millis();
					}
						 
					if (throwGolden && (millis()-previous_time) >= 500)
     da0:	fe 85       	ldd	r31, Y+14	; 0x0e
     da2:	ff 23       	and	r31, r31
     da4:	c9 f0       	breq	.+50     	; 0xdd8 <main+0x6bc>
     da6:	d9 db       	rcall	.-2126   	; 0x55a <_Z6millisv>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	84 19       	sub	r24, r4
     dae:	95 09       	sbc	r25, r5
     db0:	a6 09       	sbc	r26, r6
     db2:	b7 09       	sbc	r27, r7
     db4:	84 3f       	cpi	r24, 0xF4	; 244
     db6:	91 40       	sbci	r25, 0x01	; 1
     db8:	a1 05       	cpc	r26, r1
     dba:	b1 05       	cpc	r27, r1
     dbc:	60 f0       	brcs	.+24     	; 0xdd6 <main+0x6ba>
					{
						GoldenShuttle_count++;
     dbe:	80 91 22 02 	lds	r24, 0x0222
     dc2:	90 91 23 02 	lds	r25, 0x0223
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	90 93 23 02 	sts	0x0223, r25
     dcc:	80 93 22 02 	sts	0x0222, r24
						FlyingDragon();
     dd0:	79 dc       	rcall	.-1806   	; 0x6c4 <_Z12FlyingDragonv>
						throwGolden = false;
     dd2:	1e 86       	std	Y+14, r1	; 0x0e
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <main+0x6bc>
     dd6:	3e 86       	std	Y+14, r3	; 0x0e

		/***********************************************************************************************************************************/
		/**********************************************Ramping_UP******************************************************************************/


		if (Ramp_up_flag && TCRTRevolutionCount < 5)
     dd8:	80 91 f0 02 	lds	r24, 0x02F0
     ddc:	88 23       	and	r24, r24
     dde:	c1 f1       	breq	.+112    	; 0xe50 <main+0x734>
     de0:	80 91 27 02 	lds	r24, 0x0227
     de4:	90 91 28 02 	lds	r25, 0x0228
     de8:	05 97       	sbiw	r24, 0x05	; 5
     dea:	0c f4       	brge	.+2      	; 0xdee <main+0x6d2>
     dec:	e4 c0       	rjmp	.+456    	; 0xfb6 <main+0x89a>
     dee:	30 c0       	rjmp	.+96     	; 0xe50 <main+0x734>
		{
			if ( abs(E.ExtraCount - previous_data) >= 40)
			{
				Speed = Speed + (dir*RAMP_STEP);
     df0:	80 91 24 02 	lds	r24, 0x0224
     df4:	90 91 25 02 	lds	r25, 0x0225
     df8:	03 97       	sbiw	r24, 0x03	; 3
     dfa:	90 93 25 02 	sts	0x0225, r25
     dfe:	80 93 24 02 	sts	0x0224, r24
				previous_data = E.ExtraCount;
     e02:	5b 83       	std	Y+3, r21	; 0x03
     e04:	4a 83       	std	Y+2, r20	; 0x02
			}
			
			Speed_PID.SetSetPoint(Speed);
     e06:	40 91 24 02 	lds	r20, 0x0224
     e0a:	50 91 25 02 	lds	r21, 0x0225
     e0e:	50 93 b5 02 	sts	0x02B5, r21
     e12:	40 93 b4 02 	sts	0x02B4, r20
			PIDFlag = true;
     e16:	30 92 00 02 	sts	0x0200, r3
			if (abs(Speed) > abs(motor_speed))
     e1a:	80 91 20 02 	lds	r24, 0x0220
     e1e:	90 91 21 02 	lds	r25, 0x0221
     e22:	9a 01       	movw	r18, r20
     e24:	55 23       	and	r21, r21
     e26:	24 f4       	brge	.+8      	; 0xe30 <main+0x714>
     e28:	22 27       	eor	r18, r18
     e2a:	33 27       	eor	r19, r19
     e2c:	24 1b       	sub	r18, r20
     e2e:	35 0b       	sbc	r19, r21
     e30:	ac 01       	movw	r20, r24
     e32:	99 23       	and	r25, r25
     e34:	24 f4       	brge	.+8      	; 0xe3e <main+0x722>
     e36:	44 27       	eor	r20, r20
     e38:	55 27       	eor	r21, r21
     e3a:	48 1b       	sub	r20, r24
     e3c:	59 0b       	sbc	r21, r25
     e3e:	42 17       	cp	r20, r18
     e40:	53 07       	cpc	r21, r19
     e42:	34 f4       	brge	.+12     	; 0xe50 <main+0x734>
			{
				Speed = motor_speed;
     e44:	90 93 25 02 	sts	0x0225, r25
     e48:	80 93 24 02 	sts	0x0224, r24
				Ramp_up_flag = false;
     e4c:	10 92 f0 02 	sts	0x02F0, r1
		}
		
		
		/**************************************Ramping_Down************************************************************************/
		
		if (Throwflag && TCRTRevolutionCount >= 6 )
     e50:	80 91 f2 02 	lds	r24, 0x02F2
     e54:	88 23       	and	r24, r24
     e56:	09 f4       	brne	.+2      	; 0xe5a <main+0x73e>
     e58:	5d c0       	rjmp	.+186    	; 0xf14 <main+0x7f8>
     e5a:	80 91 27 02 	lds	r24, 0x0227
     e5e:	90 91 28 02 	lds	r25, 0x0228
     e62:	06 97       	sbiw	r24, 0x06	; 6
     e64:	0c f0       	brlt	.+2      	; 0xe68 <main+0x74c>
     e66:	bf c0       	rjmp	.+382    	; 0xfe6 <main+0x8ca>
     e68:	55 c0       	rjmp	.+170    	; 0xf14 <main+0x7f8>
		{
			
			if ( abs(E.ExtraCount - previous_data) >= 50 )
			{
				Speed = Speed - (dir*RAMP_STEP);
     e6a:	80 91 24 02 	lds	r24, 0x0224
     e6e:	90 91 25 02 	lds	r25, 0x0225
     e72:	03 96       	adiw	r24, 0x03	; 3
     e74:	90 93 25 02 	sts	0x0225, r25
     e78:	80 93 24 02 	sts	0x0224, r24
				previous_data = E.ExtraCount;
     e7c:	5b 83       	std	Y+3, r21	; 0x03
     e7e:	4a 83       	std	Y+2, r20	; 0x02
     e80:	80 91 24 02 	lds	r24, 0x0224
     e84:	90 91 25 02 	lds	r25, 0x0225
     e88:	90 93 b5 02 	sts	0x02B5, r25
     e8c:	80 93 b4 02 	sts	0x02B4, r24
			}
			Speed_PID.SetSetPoint(Speed);
			PIDFlag = true;
     e90:	30 92 00 02 	sts	0x0200, r3
			
			if ((TCRTRevolutionCount >= 6) && ACKSentFlag && ((TZ1||TZ2) && !TZ3))
     e94:	80 91 27 02 	lds	r24, 0x0227
     e98:	90 91 28 02 	lds	r25, 0x0228
     e9c:	06 97       	sbiw	r24, 0x06	; 6
     e9e:	8c f0       	brlt	.+34     	; 0xec2 <main+0x7a6>
     ea0:	80 91 f3 02 	lds	r24, 0x02F3
     ea4:	88 23       	and	r24, r24
     ea6:	69 f0       	breq	.+26     	; 0xec2 <main+0x7a6>
     ea8:	80 91 ee 02 	lds	r24, 0x02EE
     eac:	81 11       	cpse	r24, r1
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <main+0x79c>
     eb0:	80 91 ed 02 	lds	r24, 0x02ED
     eb4:	88 23       	and	r24, r24
     eb6:	29 f0       	breq	.+10     	; 0xec2 <main+0x7a6>
     eb8:	80 91 ec 02 	lds	r24, 0x02EC
     ebc:	88 23       	and	r24, r24
     ebe:	09 f4       	brne	.+2      	; 0xec2 <main+0x7a6>
     ec0:	aa c0       	rjmp	.+340    	; 0x1016 <main+0x8fa>
				/*uart0_putc('g');*/
				uart3_putc('g');
				ACKSentFlag = false;
			}
			
			if ((dir*Speed) <= 8)
     ec2:	80 91 24 02 	lds	r24, 0x0224
     ec6:	90 91 25 02 	lds	r25, 0x0225
     eca:	91 95       	neg	r25
     ecc:	81 95       	neg	r24
     ece:	91 09       	sbc	r25, r1
     ed0:	09 97       	sbiw	r24, 0x09	; 9
     ed2:	04 f5       	brge	.+64     	; 0xf14 <main+0x7f8>
			{
				Goflag = false;
     ed4:	10 92 f1 02 	sts	0x02F1, r1
				Throwflag = false;
     ed8:	10 92 f2 02 	sts	0x02F2, r1
				Speed = 0 ;
     edc:	10 92 25 02 	sts	0x0225, r1
     ee0:	10 92 24 02 	sts	0x0224, r1
				Home  = true;
     ee4:	30 92 ef 02 	sts	0x02EF, r3
				TCRTRevolutionCount = 0;
     ee8:	10 92 28 02 	sts	0x0228, r1
     eec:	10 92 27 02 	sts	0x0227, r1
				previous_data = 0;
				E.ExtraCount = 0;
     ef0:	10 92 d8 02 	sts	0x02D8, r1
     ef4:	10 92 d9 02 	sts	0x02D9, r1
     ef8:	10 92 da 02 	sts	0x02DA, r1
     efc:	10 92 db 02 	sts	0x02DB, r1
				TZ1 = false;
     f00:	10 92 ee 02 	sts	0x02EE, r1
				TZ2 = false;
     f04:	10 92 ed 02 	sts	0x02ED, r1
				TZ3 = false;
     f08:	10 92 ec 02 	sts	0x02EC, r1
				CLEAR(Plick_Plick);
     f0c:	46 98       	cbi	0x08, 6	; 8
				CLEAR(Plick_Plick_2);
     f0e:	40 98       	cbi	0x08, 0	; 8
				Goflag = false;
				Throwflag = false;
				Speed = 0 ;
				Home  = true;
				TCRTRevolutionCount = 0;
				previous_data = 0;
     f10:	1b 82       	std	Y+3, r1	; 0x03
     f12:	1a 82       	std	Y+2, r1	; 0x02
		
		
		/****************************************Computing_PID*************************************************************************/
		
		
		if (Speed_PID.PID_Flag  && PIDFlag )
     f14:	e7 e8       	ldi	r30, 0x87	; 135
     f16:	f2 e0       	ldi	r31, 0x02	; 2
     f18:	80 81       	ld	r24, Z
     f1a:	88 23       	and	r24, r24
     f1c:	21 f0       	breq	.+8      	; 0xf26 <main+0x80a>
     f1e:	80 91 00 02 	lds	r24, 0x0200
     f22:	81 11       	cpse	r24, r1
     f24:	7d c0       	rjmp	.+250    	; 0x1020 <main+0x904>
		{
			M.SetOcrValue(Speed_PID.Compute_PID(E.Encoder_get_speed()));
			Speed_PID.PID_Flag = false;
		}
		if (Angle_PID.PID_Flag && !PIDFlag)
     f26:	80 91 58 02 	lds	r24, 0x0258
     f2a:	88 23       	and	r24, r24
     f2c:	f1 f0       	breq	.+60     	; 0xf6a <main+0x84e>
     f2e:	80 91 00 02 	lds	r24, 0x0200
     f32:	81 11       	cpse	r24, r1
     f34:	1a c0       	rjmp	.+52     	; 0xf6a <main+0x84e>
     f36:	8a c0       	rjmp	.+276    	; 0x104c <main+0x930>
			check_homeBuffer[0] = abs(E.Count);
			
			add = check_homeBuffer[0] + check_homeBuffer[1] + check_homeBuffer[2] + check_homeBuffer[3];
			
			if((add == 0)){
				check_timesHome += 1;
     f38:	80 91 16 02 	lds	r24, 0x0216
     f3c:	90 91 17 02 	lds	r25, 0x0217
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	90 93 17 02 	sts	0x0217, r25
     f46:	80 93 16 02 	sts	0x0216, r24
			}
			else{
				check_timesHome = 0;
			}
			
			if(check_timesHome > 40){
     f4a:	89 97       	sbiw	r24, 0x29	; 41
     f4c:	34 f4       	brge	.+12     	; 0xf5a <main+0x83e>
     f4e:	0b c0       	rjmp	.+22     	; 0xf66 <main+0x84a>
			
			if((add == 0)){
				check_timesHome += 1;
			}
			else{
				check_timesHome = 0;
     f50:	10 92 17 02 	sts	0x0217, r1
     f54:	10 92 16 02 	sts	0x0216, r1
     f58:	06 c0       	rjmp	.+12     	; 0xf66 <main+0x84a>
			}
			
			if(check_timesHome > 40){
				check_timesHome = 0;
     f5a:	10 92 17 02 	sts	0x0217, r1
     f5e:	10 92 16 02 	sts	0x0216, r1
				ReachedHome = true;
     f62:	30 92 e5 02 	sts	0x02E5, r3
			}
			
			Angle_PID.PID_Flag = false;
     f66:	10 92 58 02 	sts	0x0258, r1
		}
		
		if (Geneva_PID.PID_Flag && G_PID)
     f6a:	f5 01       	movw	r30, r10
     f6c:	80 81       	ld	r24, Z
     f6e:	88 23       	and	r24, r24
     f70:	21 f0       	breq	.+8      	; 0xf7a <main+0x85e>
     f72:	80 91 ea 02 	lds	r24, 0x02EA
     f76:	81 11       	cpse	r24, r1
     f78:	a2 c0       	rjmp	.+324    	; 0x10be <main+0x9a2>
			G.SetOcrValue(Geneva_PID.Compute_PID(E1.Enoder_Get_Angle()));
			Geneva_PID.PID_Flag = false;
		}
	/**************************************************************************************************************************/	
		
		if (!Throwflag && Home)
     f7a:	80 91 f2 02 	lds	r24, 0x02F2
     f7e:	81 11       	cpse	r24, r1
     f80:	9d cc       	rjmp	.-1734   	; 0x8bc <main+0x1a0>
     f82:	80 91 ef 02 	lds	r24, 0x02EF
     f86:	81 11       	cpse	r24, r1
     f88:	ad c0       	rjmp	.+346    	; 0x10e4 <main+0x9c8>
     f8a:	98 cc       	rjmp	.-1744   	; 0x8bc <main+0x1a0>
				CLEAR(ShuttleCockArm_P);
				Grabbed = true;
				previous_time = millis();
			}
			//_delay_ms(500);
			if (Grabbed && (millis()-previous_time) >= 800)
     f8c:	e6 da       	rcall	.-2612   	; 0x55a <_Z6millisv>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	84 19       	sub	r24, r4
     f94:	95 09       	sbc	r25, r5
     f96:	a6 09       	sbc	r26, r6
     f98:	b7 09       	sbc	r27, r7
     f9a:	80 32       	cpi	r24, 0x20	; 32
     f9c:	93 40       	sbci	r25, 0x03	; 3
     f9e:	a1 05       	cpc	r26, r1
     fa0:	b1 05       	cpc	r27, r1
     fa2:	08 f0       	brcs	.+2      	; 0xfa6 <main+0x88a>
     fa4:	93 cd       	rjmp	.-1242   	; 0xacc <main+0x3b0>
     fa6:	3e 82       	std	Y+6, r3	; 0x06
     fa8:	9b cd       	rjmp	.-1226   	; 0xae0 <main+0x3c4>
			
		}
		
		/*******************************************Receiving Shuttle Cock*****************************************************************/
		
		if (ReceiveShuttleCock)
     faa:	39 82       	std	Y+1, r3	; 0x01
     fac:	b4 cd       	rjmp	.-1176   	; 0xb16 <main+0x3fa>
  		{
  			if ((GoldenShuttle_count < 6))
  			{
  				if ((Speed == -30) && (ReachedHome))
  				{ 
					 if (!geneva_start && !Gripp && !armed && !unarmed && !ungripp && !throwGolden && !caught)
     fae:	2b 85       	ldd	r18, Y+11	; 0x0b
     fb0:	21 11       	cpse	r18, r1
     fb2:	6e ce       	rjmp	.-804    	; 0xc90 <main+0x574>
     fb4:	57 ce       	rjmp	.-850    	; 0xc64 <main+0x548>
		/**********************************************Ramping_UP******************************************************************************/


		if (Ramp_up_flag && TCRTRevolutionCount < 5)
		{
			if ( abs(E.ExtraCount - previous_data) >= 40)
     fb6:	40 91 d8 02 	lds	r20, 0x02D8
     fba:	50 91 d9 02 	lds	r21, 0x02D9
     fbe:	60 91 da 02 	lds	r22, 0x02DA
     fc2:	70 91 db 02 	lds	r23, 0x02DB
     fc6:	9a 01       	movw	r18, r20
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	28 1b       	sub	r18, r24
     fce:	39 0b       	sbc	r19, r25
     fd0:	c9 01       	movw	r24, r18
     fd2:	99 23       	and	r25, r25
     fd4:	24 f4       	brge	.+8      	; 0xfde <main+0x8c2>
     fd6:	88 27       	eor	r24, r24
     fd8:	99 27       	eor	r25, r25
     fda:	82 1b       	sub	r24, r18
     fdc:	93 0b       	sbc	r25, r19
     fde:	88 97       	sbiw	r24, 0x28	; 40
     fe0:	0c f0       	brlt	.+2      	; 0xfe4 <main+0x8c8>
     fe2:	06 cf       	rjmp	.-500    	; 0xdf0 <main+0x6d4>
     fe4:	10 cf       	rjmp	.-480    	; 0xe06 <main+0x6ea>
		/**************************************Ramping_Down************************************************************************/
		
		if (Throwflag && TCRTRevolutionCount >= 6 )
		{
			
			if ( abs(E.ExtraCount - previous_data) >= 50 )
     fe6:	40 91 d8 02 	lds	r20, 0x02D8
     fea:	50 91 d9 02 	lds	r21, 0x02D9
     fee:	60 91 da 02 	lds	r22, 0x02DA
     ff2:	70 91 db 02 	lds	r23, 0x02DB
     ff6:	9a 01       	movw	r18, r20
     ff8:	ea 81       	ldd	r30, Y+2	; 0x02
     ffa:	fb 81       	ldd	r31, Y+3	; 0x03
     ffc:	2e 1b       	sub	r18, r30
     ffe:	3f 0b       	sbc	r19, r31
    1000:	c9 01       	movw	r24, r18
    1002:	99 23       	and	r25, r25
    1004:	24 f4       	brge	.+8      	; 0x100e <main+0x8f2>
    1006:	88 27       	eor	r24, r24
    1008:	99 27       	eor	r25, r25
    100a:	82 1b       	sub	r24, r18
    100c:	93 0b       	sbc	r25, r19
    100e:	c2 97       	sbiw	r24, 0x32	; 50
    1010:	0c f0       	brlt	.+2      	; 0x1014 <main+0x8f8>
    1012:	2b cf       	rjmp	.-426    	; 0xe6a <main+0x74e>
    1014:	35 cf       	rjmp	.-406    	; 0xe80 <main+0x764>
			PIDFlag = true;
			
			if ((TCRTRevolutionCount >= 6) && ACKSentFlag && ((TZ1||TZ2) && !TZ3))
			{
				/*uart0_putc('g');*/
				uart3_putc('g');
    1016:	87 e6       	ldi	r24, 0x67	; 103
    1018:	5e d4       	rcall	.+2236   	; 0x18d6 <_Z10uart3_putch>
				ACKSentFlag = false;
    101a:	10 92 f3 02 	sts	0x02F3, r1
    101e:	51 cf       	rjmp	.-350    	; 0xec2 <main+0x7a6>
		/****************************************Computing_PID*************************************************************************/
		
		
		if (Speed_PID.PID_Flag  && PIDFlag )
		{
			M.SetOcrValue(Speed_PID.Compute_PID(E.Encoder_get_speed()));
    1020:	60 91 d0 02 	lds	r22, 0x02D0
    1024:	70 91 d1 02 	lds	r23, 0x02D1
    1028:	07 2e       	mov	r0, r23
    102a:	00 0c       	add	r0, r0
    102c:	88 0b       	sbc	r24, r24
    102e:	99 0b       	sbc	r25, r25
    1030:	6b d5       	rcall	.+2774   	; 0x1b08 <__floatsisf>
    1032:	ab 01       	movw	r20, r22
    1034:	bc 01       	movw	r22, r24
    1036:	87 e8       	ldi	r24, 0x87	; 135
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	3d d2       	rcall	.+1146   	; 0x14b6 <_ZN3PID11Compute_PIDEf>
    103c:	32 d5       	rcall	.+2660   	; 0x1aa2 <__fixsfsi>
    103e:	82 ee       	ldi	r24, 0xE2	; 226
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	98 d1       	rcall	.+816    	; 0x1374 <_ZN5Motor11SetOcrValueEi>
			Speed_PID.PID_Flag = false;
    1044:	e7 e8       	ldi	r30, 0x87	; 135
    1046:	f2 e0       	ldi	r31, 0x02	; 2
    1048:	10 82       	st	Z, r1
    104a:	6d cf       	rjmp	.-294    	; 0xf26 <main+0x80a>
		}
		if (Angle_PID.PID_Flag && !PIDFlag)
		{
			M.SetOcrValue(Angle_PID.Compute_PID(E.Encoder_Get_angle()));
    104c:	8e eb       	ldi	r24, 0xBE	; 190
    104e:	92 e0       	ldi	r25, 0x02	; 2
    1050:	2d d9       	rcall	.-3494   	; 0x2ac <_ZN7Encoder17Encoder_Get_angleEv>
    1052:	bc 01       	movw	r22, r24
    1054:	99 0f       	add	r25, r25
    1056:	88 0b       	sbc	r24, r24
    1058:	99 0b       	sbc	r25, r25
    105a:	56 d5       	rcall	.+2732   	; 0x1b08 <__floatsisf>
    105c:	ab 01       	movw	r20, r22
    105e:	bc 01       	movw	r22, r24
    1060:	88 e5       	ldi	r24, 0x58	; 88
    1062:	92 e0       	ldi	r25, 0x02	; 2
    1064:	28 d2       	rcall	.+1104   	; 0x14b6 <_ZN3PID11Compute_PIDEf>
    1066:	1d d5       	rcall	.+2618   	; 0x1aa2 <__fixsfsi>
    1068:	82 ee       	ldi	r24, 0xE2	; 226
    106a:	92 e0       	ldi	r25, 0x02	; 2
    106c:	83 d1       	rcall	.+774    	; 0x1374 <_ZN5Motor11SetOcrValueEi>

			check_homeBuffer[3] = check_homeBuffer[2];
    106e:	f4 01       	movw	r30, r8
    1070:	44 81       	ldd	r20, Z+4	; 0x04
    1072:	55 81       	ldd	r21, Z+5	; 0x05
    1074:	57 83       	std	Z+7, r21	; 0x07
    1076:	46 83       	std	Z+6, r20	; 0x06
			check_homeBuffer[2] = check_homeBuffer[1];
    1078:	62 81       	ldd	r22, Z+2	; 0x02
    107a:	73 81       	ldd	r23, Z+3	; 0x03
    107c:	75 83       	std	Z+5, r23	; 0x05
    107e:	64 83       	std	Z+4, r22	; 0x04
			check_homeBuffer[1] = check_homeBuffer[0];
    1080:	20 81       	ld	r18, Z
    1082:	31 81       	ldd	r19, Z+1	; 0x01
    1084:	33 83       	std	Z+3, r19	; 0x03
    1086:	22 83       	std	Z+2, r18	; 0x02
			check_homeBuffer[0] = abs(E.Count);
    1088:	80 91 d4 02 	lds	r24, 0x02D4
    108c:	90 91 d5 02 	lds	r25, 0x02D5
    1090:	99 23       	and	r25, r25
    1092:	1c f4       	brge	.+6      	; 0x109a <main+0x97e>
    1094:	91 95       	neg	r25
    1096:	81 95       	neg	r24
    1098:	91 09       	sbc	r25, r1
    109a:	f4 01       	movw	r30, r8
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
			
			add = check_homeBuffer[0] + check_homeBuffer[1] + check_homeBuffer[2] + check_homeBuffer[3];
    10a0:	28 0f       	add	r18, r24
    10a2:	39 1f       	adc	r19, r25
    10a4:	cb 01       	movw	r24, r22
    10a6:	82 0f       	add	r24, r18
    10a8:	93 1f       	adc	r25, r19
    10aa:	84 0f       	add	r24, r20
    10ac:	95 1f       	adc	r25, r21
    10ae:	90 93 15 02 	sts	0x0215, r25
    10b2:	80 93 14 02 	sts	0x0214, r24
			
			if((add == 0)){
    10b6:	89 2b       	or	r24, r25
    10b8:	09 f4       	brne	.+2      	; 0x10bc <main+0x9a0>
    10ba:	3e cf       	rjmp	.-388    	; 0xf38 <main+0x81c>
    10bc:	49 cf       	rjmp	.-366    	; 0xf50 <main+0x834>
			Angle_PID.PID_Flag = false;
		}
		
		if (Geneva_PID.PID_Flag && G_PID)
		{
			G.SetOcrValue(Geneva_PID.Compute_PID(E1.Enoder_Get_Angle()));
    10be:	86 eb       	ldi	r24, 0xB6	; 182
    10c0:	92 e0       	ldi	r25, 0x02	; 2
    10c2:	72 d9       	rcall	.-3356   	; 0x3a8 <_ZN13GenevaEncoder16Enoder_Get_AngleEv>
    10c4:	bc 01       	movw	r22, r24
    10c6:	99 0f       	add	r25, r25
    10c8:	88 0b       	sbc	r24, r24
    10ca:	99 0b       	sbc	r25, r25
    10cc:	1d d5       	rcall	.+2618   	; 0x1b08 <__floatsisf>
    10ce:	ab 01       	movw	r20, r22
    10d0:	bc 01       	movw	r22, r24
    10d2:	c5 01       	movw	r24, r10
    10d4:	f0 d1       	rcall	.+992    	; 0x14b6 <_ZN3PID11Compute_PIDEf>
    10d6:	e5 d4       	rcall	.+2506   	; 0x1aa2 <__fixsfsi>
    10d8:	83 ee       	ldi	r24, 0xE3	; 227
    10da:	92 e0       	ldi	r25, 0x02	; 2
    10dc:	a5 d9       	rcall	.-3254   	; 0x428 <_ZN11GenevaMotor11SetOcrValueEi>
			Geneva_PID.PID_Flag = false;
    10de:	f5 01       	movw	r30, r10
    10e0:	10 82       	st	Z, r1
    10e2:	4b cf       	rjmp	.-362    	; 0xf7a <main+0x85e>
		}
	/**************************************************************************************************************************/	
		
		if (!Throwflag && Home)
		{
			GoToHome();
    10e4:	b6 da       	rcall	.-2708   	; 0x652 <_Z8GoToHomev>
			Speed = -30;
    10e6:	82 ee       	ldi	r24, 0xE2	; 226
    10e8:	9f ef       	ldi	r25, 0xFF	; 255
    10ea:	90 93 25 02 	sts	0x0225, r25
    10ee:	80 93 24 02 	sts	0x0224, r24
			Home = false;
    10f2:	10 92 ef 02 	sts	0x02EF, r1
    10f6:	e2 cb       	rjmp	.-2108   	; 0x8bc <main+0x1a0>
						 Gripp = false;
					}
					
					/*_delay_ms(100);*/
					
					if (armed && (millis()-previous_time) >= 150)
    10f8:	99 85       	ldd	r25, Y+9	; 0x09
    10fa:	99 23       	and	r25, r25
    10fc:	09 f4       	brne	.+2      	; 0x1100 <main+0x9e4>
    10fe:	f8 cd       	rjmp	.-1040   	; 0xcf0 <main+0x5d4>
    1100:	e1 cd       	rjmp	.-1086   	; 0xcc4 <main+0x5a8>

00001102 <__vector_21>:
}

/*******************************************ISR Section************************************************************/

ISR(TIMER0_COMPA_vect)
{
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	0b b6       	in	r0, 0x3b	; 59
    110e:	0f 92       	push	r0
    1110:	2f 93       	push	r18
    1112:	3f 93       	push	r19
    1114:	4f 93       	push	r20
    1116:	5f 93       	push	r21
    1118:	6f 93       	push	r22
    111a:	7f 93       	push	r23
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	af 93       	push	r26
    1122:	bf 93       	push	r27
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
	Speed_PID.PID_Flag = true;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	80 93 87 02 	sts	0x0287, r24
	Angle_PID.PID_Flag = true;
    112e:	80 93 58 02 	sts	0x0258, r24
	Geneva_PID.PID_Flag = true;
    1132:	80 93 29 02 	sts	0x0229, r24
	E.Encoder_update_Speed();
    1136:	8e eb       	ldi	r24, 0xBE	; 190
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	d7 d8       	rcall	.-3666   	; 0x2ea <_ZN7Encoder20Encoder_update_SpeedEv>
}
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	7f 91       	pop	r23
    114a:	6f 91       	pop	r22
    114c:	5f 91       	pop	r21
    114e:	4f 91       	pop	r20
    1150:	3f 91       	pop	r19
    1152:	2f 91       	pop	r18
    1154:	0f 90       	pop	r0
    1156:	0b be       	out	0x3b, r0	; 59
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	0f 90       	pop	r0
    115e:	1f 90       	pop	r1
    1160:	18 95       	reti

00001162 <__vector_1>:

ISR(ENCODER_INTERRUPT_VECT)
{
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	0b b6       	in	r0, 0x3b	; 59
    116e:	0f 92       	push	r0
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
	E.Encoder_Increase_Pulse_Counter();	
    1188:	8e eb       	ldi	r24, 0xBE	; 190
    118a:	92 e0       	ldi	r25, 0x02	; 2
    118c:	52 d8       	rcall	.-3932   	; 0x232 <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv>
}
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	0f 90       	pop	r0
    11a8:	0b be       	out	0x3b, r0	; 59
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti

000011b4 <__vector_3>:


ISR(Throwing_Zone_12_Interrupt_vect,ISR_NOBLOCK)
{
    11b4:	78 94       	sei
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	0b b6       	in	r0, 0x3b	; 59
    11c2:	0f 92       	push	r0
    11c4:	8f 93       	push	r24
    11c6:	9f 93       	push	r25
    11c8:	ef 93       	push	r30
    11ca:	ff 93       	push	r31
	E.Angle_count = 0;
    11cc:	10 92 dd 02 	sts	0x02DD, r1
    11d0:	10 92 dc 02 	sts	0x02DC, r1
	if(Goflag && (TZ1||TZ2))
    11d4:	80 91 f1 02 	lds	r24, 0x02F1
    11d8:	88 23       	and	r24, r24
    11da:	f9 f0       	breq	.+62     	; 0x121a <__vector_3+0x66>
    11dc:	80 91 ee 02 	lds	r24, 0x02EE
    11e0:	81 11       	cpse	r24, r1
    11e2:	10 c0       	rjmp	.+32     	; 0x1204 <__vector_3+0x50>
    11e4:	80 91 ed 02 	lds	r24, 0x02ED
    11e8:	81 11       	cpse	r24, r1
    11ea:	0c c0       	rjmp	.+24     	; 0x1204 <__vector_3+0x50>
    11ec:	16 c0       	rjmp	.+44     	; 0x121a <__vector_3+0x66>
	{
		TCRTRevolutionCount++;
		if (TCRTRevolutionCount == 4)
		{
			CLEAR(Pneumatic);
    11ee:	eb e0       	ldi	r30, 0x0B	; 11
    11f0:	f1 e0       	ldi	r31, 0x01	; 1
    11f2:	80 81       	ld	r24, Z
    11f4:	8e 7f       	andi	r24, 0xFE	; 254
    11f6:	80 83       	st	Z, r24
			Throwflag = true;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	80 93 f2 02 	sts	0x02F2, r24
			ACKSentFlag = true;
    11fe:	80 93 f3 02 	sts	0x02F3, r24
    1202:	0b c0       	rjmp	.+22     	; 0x121a <__vector_3+0x66>
ISR(Throwing_Zone_12_Interrupt_vect,ISR_NOBLOCK)
{
	E.Angle_count = 0;
	if(Goflag && (TZ1||TZ2))
	{
		TCRTRevolutionCount++;
    1204:	80 91 27 02 	lds	r24, 0x0227
    1208:	90 91 28 02 	lds	r25, 0x0228
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	90 93 28 02 	sts	0x0228, r25
    1212:	80 93 27 02 	sts	0x0227, r24
		if (TCRTRevolutionCount == 4)
    1216:	04 97       	sbiw	r24, 0x04	; 4
    1218:	51 f3       	breq	.-44     	; 0x11ee <__vector_3+0x3a>
			CLEAR(Pneumatic);
			Throwflag = true;
			ACKSentFlag = true;
		}
	}
}
    121a:	ff 91       	pop	r31
    121c:	ef 91       	pop	r30
    121e:	9f 91       	pop	r25
    1220:	8f 91       	pop	r24
    1222:	0f 90       	pop	r0
    1224:	0b be       	out	0x3b, r0	; 59
    1226:	0f 90       	pop	r0
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	0f 90       	pop	r0
    122c:	1f 90       	pop	r1
    122e:	18 95       	reti

00001230 <__vector_2>:

ISR(Throwing_Zone_3_Interrupt_vect,ISR_NOBLOCK)
{
    1230:	78 94       	sei
    1232:	1f 92       	push	r1
    1234:	0f 92       	push	r0
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	0f 92       	push	r0
    123a:	11 24       	eor	r1, r1
    123c:	0b b6       	in	r0, 0x3b	; 59
    123e:	0f 92       	push	r0
    1240:	8f 93       	push	r24
    1242:	9f 93       	push	r25
    1244:	ef 93       	push	r30
    1246:	ff 93       	push	r31
	E.Angle_count = 0;
    1248:	10 92 dd 02 	sts	0x02DD, r1
    124c:	10 92 dc 02 	sts	0x02DC, r1
	if (Goflag && TZ3)
    1250:	80 91 f1 02 	lds	r24, 0x02F1
    1254:	88 23       	and	r24, r24
    1256:	c9 f0       	breq	.+50     	; 0x128a <__vector_2+0x5a>
    1258:	80 91 ec 02 	lds	r24, 0x02EC
    125c:	81 11       	cpse	r24, r1
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <__vector_2+0x44>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <__vector_2+0x5a>
	{
		TCRTRevolutionCount++;
		
		if (TCRTRevolutionCount == 4)
		{
			CLEAR(Pneumatic);
    1262:	eb e0       	ldi	r30, 0x0B	; 11
    1264:	f1 e0       	ldi	r31, 0x01	; 1
    1266:	80 81       	ld	r24, Z
    1268:	8e 7f       	andi	r24, 0xFE	; 254
    126a:	80 83       	st	Z, r24
			Throwflag = true;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 f2 02 	sts	0x02F2, r24
    1272:	0b c0       	rjmp	.+22     	; 0x128a <__vector_2+0x5a>
ISR(Throwing_Zone_3_Interrupt_vect,ISR_NOBLOCK)
{
	E.Angle_count = 0;
	if (Goflag && TZ3)
	{
		TCRTRevolutionCount++;
    1274:	80 91 27 02 	lds	r24, 0x0227
    1278:	90 91 28 02 	lds	r25, 0x0228
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	90 93 28 02 	sts	0x0228, r25
    1282:	80 93 27 02 	sts	0x0227, r24
		
		if (TCRTRevolutionCount == 4)
    1286:	04 97       	sbiw	r24, 0x04	; 4
    1288:	61 f3       	breq	.-40     	; 0x1262 <__vector_2+0x32>
			CLEAR(Pneumatic);
			Throwflag = true;
			//ACKSentFlag = true;
		}
	}
}
    128a:	ff 91       	pop	r31
    128c:	ef 91       	pop	r30
    128e:	9f 91       	pop	r25
    1290:	8f 91       	pop	r24
    1292:	0f 90       	pop	r0
    1294:	0b be       	out	0x3b, r0	; 59
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	0f 90       	pop	r0
    129c:	1f 90       	pop	r1
    129e:	18 95       	reti

000012a0 <__vector_5>:

ISR(GENEVA_ENCODER_INT_vect)
{
    12a0:	1f 92       	push	r1
    12a2:	0f 92       	push	r0
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	0f 92       	push	r0
    12a8:	11 24       	eor	r1, r1
    12aa:	0b b6       	in	r0, 0x3b	; 59
    12ac:	0f 92       	push	r0
    12ae:	8f 93       	push	r24
    12b0:	9f 93       	push	r25
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31
	if (READ(ENCODERB))
    12b6:	01 9b       	sbis	0x00, 1	; 0
    12b8:	08 c0       	rjmp	.+16     	; 0x12ca <__vector_5+0x2a>
		long count;
		int Geneva_Angle;
	public:
		GenevaEncoder();
		void Initialize_Geneva_Encoder(void);
		inline void Inc_Count(){Encoder_Count++;};
    12ba:	e6 eb       	ldi	r30, 0xB6	; 182
    12bc:	f2 e0       	ldi	r31, 0x02	; 2
    12be:	80 81       	ld	r24, Z
    12c0:	91 81       	ldd	r25, Z+1	; 0x01
    12c2:	01 96       	adiw	r24, 0x01	; 1
    12c4:	91 83       	std	Z+1, r25	; 0x01
    12c6:	80 83       	st	Z, r24
    12c8:	09 c0       	rjmp	.+18     	; 0x12dc <__vector_5+0x3c>
	{
		E1.Inc_Count();
	}
	else if (!READ(ENCODERB))
    12ca:	01 99       	sbic	0x00, 1	; 0
    12cc:	07 c0       	rjmp	.+14     	; 0x12dc <__vector_5+0x3c>
		inline void Dcr_Count(){Encoder_Count--;};
    12ce:	e6 eb       	ldi	r30, 0xB6	; 182
    12d0:	f2 e0       	ldi	r31, 0x02	; 2
    12d2:	80 81       	ld	r24, Z
    12d4:	91 81       	ldd	r25, Z+1	; 0x01
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	80 83       	st	Z, r24
	{
		E1.Dcr_Count();
	}
	
}
    12dc:	ff 91       	pop	r31
    12de:	ef 91       	pop	r30
    12e0:	9f 91       	pop	r25
    12e2:	8f 91       	pop	r24
    12e4:	0f 90       	pop	r0
    12e6:	0b be       	out	0x3b, r0	; 59
    12e8:	0f 90       	pop	r0
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	0f 90       	pop	r0
    12ee:	1f 90       	pop	r1
    12f0:	18 95       	reti

000012f2 <_GLOBAL__sub_I_timer2_millis>:
#define MAX_SPEED		120
#define RAMP_STEP		3

GenevaMotor G;
Motor   M;
Encoder E;
    12f2:	8e eb       	ldi	r24, 0xBE	; 190
    12f4:	92 e0       	ldi	r25, 0x02	; 2
    12f6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_ZN7EncoderC1Ev>
GenevaEncoder E1;
    12fa:	86 eb       	ldi	r24, 0xB6	; 182
    12fc:	92 e0       	ldi	r25, 0x02	; 2
    12fe:	4f c8       	rjmp	.-3938   	; 0x39e <_ZN13GenevaEncoderC1Ev>
    1300:	08 95       	ret

00001302 <_ZN5Motor7InitPWMEv>:

}

void Motor::InitPWM()
{
		OUTPUT(DD_F1);
    1302:	e1 e0       	ldi	r30, 0x01	; 1
    1304:	f1 e0       	ldi	r31, 0x01	; 1
    1306:	80 81       	ld	r24, Z
    1308:	80 62       	ori	r24, 0x20	; 32
    130a:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
    130c:	80 81       	ld	r24, Z
    130e:	80 64       	ori	r24, 0x40	; 64
    1310:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
    1312:	26 9a       	sbi	0x04, 6	; 4

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );												    // Clear on Compare Match
    1314:	e0 e8       	ldi	r30, 0x80	; 128
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	82 62       	ori	r24, 0x22	; 34
    131c:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
    131e:	e1 e8       	ldi	r30, 0x81	; 129
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8a 61       	ori	r24, 0x1A	; 26
    1326:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
    1328:	89 ef       	ldi	r24, 0xF9	; 249
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	90 93 87 00 	sts	0x0087, r25
    1330:	80 93 86 00 	sts	0x0086, r24
    1334:	08 95       	ret

00001336 <_ZN5Motor19SetForwardDirectionEv>:
}

void Motor::SetForwardDirection()
{
	SET (DD_F1);
    1336:	e2 e0       	ldi	r30, 0x02	; 2
    1338:	f1 e0       	ldi	r31, 0x01	; 1
    133a:	80 81       	ld	r24, Z
    133c:	80 62       	ori	r24, 0x20	; 32
    133e:	80 83       	st	Z, r24
	CLEAR	(DD_B1);
    1340:	80 81       	ld	r24, Z
    1342:	8f 7b       	andi	r24, 0xBF	; 191
    1344:	80 83       	st	Z, r24
    1346:	08 95       	ret

00001348 <_ZN5Motor19SetReverseDirectionEv>:
}
void Motor::SetReverseDirection()
{
	CLEAR	(DD_F1);
    1348:	e2 e0       	ldi	r30, 0x02	; 2
    134a:	f1 e0       	ldi	r31, 0x01	; 1
    134c:	80 81       	ld	r24, Z
    134e:	8f 7d       	andi	r24, 0xDF	; 223
    1350:	80 83       	st	Z, r24
	SET (DD_B1);
    1352:	80 81       	ld	r24, Z
    1354:	80 64       	ori	r24, 0x40	; 64
    1356:	80 83       	st	Z, r24
    1358:	08 95       	ret

0000135a <_ZN5Motor9StopMotorEv>:
}

void Motor::StopMotor()
{
	SET	(DD_F1);
    135a:	e2 e0       	ldi	r30, 0x02	; 2
    135c:	f1 e0       	ldi	r31, 0x01	; 1
    135e:	80 81       	ld	r24, Z
    1360:	80 62       	ori	r24, 0x20	; 32
    1362:	80 83       	st	Z, r24
	SET	(DD_B1);
    1364:	80 81       	ld	r24, Z
    1366:	80 64       	ori	r24, 0x40	; 64
    1368:	80 83       	st	Z, r24

	PWM_OCR1 = 0;	
    136a:	10 92 8b 00 	sts	0x008B, r1
    136e:	10 92 8a 00 	sts	0x008A, r1
    1372:	08 95       	ret

00001374 <_ZN5Motor11SetOcrValueEi>:
}


void Motor::SetOcrValue(int Ocr)
{
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	8c 01       	movw	r16, r24
    137e:	eb 01       	movw	r28, r22
    if (Ocr > 0)
    1380:	1c 16       	cp	r1, r28
    1382:	1d 06       	cpc	r1, r29
    1384:	0c f4       	brge	.+2      	; 0x1388 <_ZN5Motor11SetOcrValueEi+0x14>
		//SetReverseDirection();
		SetForwardDirection();
    1386:	d7 df       	rcall	.-82     	; 0x1336 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
    1388:	c9 3f       	cpi	r28, 0xF9	; 249
    138a:	d1 05       	cpc	r29, r1
    138c:	44 f4       	brge	.+16     	; 0x139e <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
		
	if(Ocr < 0)
    138e:	dd 23       	and	r29, r29
    1390:	44 f4       	brge	.+16     	; 0x13a2 <_ZN5Motor11SetOcrValueEi+0x2e>
	 {
		Ocr = -Ocr;
    1392:	d1 95       	neg	r29
    1394:	c1 95       	neg	r28
    1396:	d1 09       	sbc	r29, r1
		//SetForwardDirection();
		SetReverseDirection();   
    1398:	c8 01       	movw	r24, r16
    139a:	d6 df       	rcall	.-84     	; 0x1348 <_ZN5Motor19SetReverseDirectionEv>
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <_ZN5Motor11SetOcrValueEi+0x2e>
{
    if (Ocr > 0)
		//SetReverseDirection();
		SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
    139e:	c9 ef       	ldi	r28, 0xF9	; 249
    13a0:	d0 e0       	ldi	r29, 0x00	; 0
	 {
		Ocr = -Ocr;
		//SetForwardDirection();
		SetReverseDirection();   
	 }
	PWM_OCR1	= Ocr;
    13a2:	d0 93 8b 00 	sts	0x008B, r29
    13a6:	c0 93 8a 00 	sts	0x008A, r28
		
}
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	08 95       	ret

000013b4 <_ZN5Motor10InitialiseEv>:
#include "Motor.h"



void Motor::Initialise()
{
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	ec 01       	movw	r28, r24
	InitPWM();
    13ba:	a3 df       	rcall	.-186    	; 0x1302 <_ZN5Motor7InitPWMEv>

	StopMotor();
    13bc:	ce 01       	movw	r24, r28
    13be:	cd df       	rcall	.-102    	; 0x135a <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	ce 01       	movw	r24, r28
    13c6:	d6 df       	rcall	.-84     	; 0x1374 <_ZN5Motor11SetOcrValueEi>

}
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <_Z9constrainRfff>:
 */  
#include "PID.h"
#include "headers.h"

void constrain(float &val,float minVal,float maxVal)
{
    13ce:	8f 92       	push	r8
    13d0:	9f 92       	push	r9
    13d2:	af 92       	push	r10
    13d4:	bf 92       	push	r11
    13d6:	cf 92       	push	r12
    13d8:	df 92       	push	r13
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	ec 01       	movw	r28, r24
    13e8:	4a 01       	movw	r8, r20
    13ea:	5b 01       	movw	r10, r22
    13ec:	68 01       	movw	r12, r16
    13ee:	79 01       	movw	r14, r18
	if(val < minVal)
    13f0:	9a 01       	movw	r18, r20
    13f2:	ab 01       	movw	r20, r22
    13f4:	68 81       	ld	r22, Y
    13f6:	79 81       	ldd	r23, Y+1	; 0x01
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	9b 81       	ldd	r25, Y+3	; 0x03
    13fc:	e6 d2       	rcall	.+1484   	; 0x19ca <__cmpsf2>
    13fe:	88 23       	and	r24, r24
    1400:	24 f4       	brge	.+8      	; 0x140a <_Z9constrainRfff+0x3c>
		val = minVal;
    1402:	88 82       	st	Y, r8
    1404:	99 82       	std	Y+1, r9	; 0x01
    1406:	aa 82       	std	Y+2, r10	; 0x02
    1408:	bb 82       	std	Y+3, r11	; 0x03
	if(val > maxVal)
    140a:	a7 01       	movw	r20, r14
    140c:	96 01       	movw	r18, r12
    140e:	68 81       	ld	r22, Y
    1410:	79 81       	ldd	r23, Y+1	; 0x01
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	9b 81       	ldd	r25, Y+3	; 0x03
    1416:	28 d4       	rcall	.+2128   	; 0x1c68 <__gesf2>
    1418:	18 16       	cp	r1, r24
    141a:	24 f4       	brge	.+8      	; 0x1424 <_Z9constrainRfff+0x56>
		val = maxVal;
    141c:	c8 82       	st	Y, r12
    141e:	d9 82       	std	Y+1, r13	; 0x01
    1420:	ea 82       	std	Y+2, r14	; 0x02
    1422:	fb 82       	std	Y+3, r15	; 0x03
}
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	cf 90       	pop	r12
    1434:	bf 90       	pop	r11
    1436:	af 90       	pop	r10
    1438:	9f 90       	pop	r9
    143a:	8f 90       	pop	r8
    143c:	08 95       	ret

0000143e <_ZN3PID10InitializeEv>:

void PID::Initialize()
{
    143e:	fc 01       	movw	r30, r24
	kp         =  0;
    1440:	11 82       	std	Z+1, r1	; 0x01
    1442:	12 82       	std	Z+2, r1	; 0x02
    1444:	13 82       	std	Z+3, r1	; 0x03
    1446:	14 82       	std	Z+4, r1	; 0x04
	ki         =  0;
    1448:	15 82       	std	Z+5, r1	; 0x05
    144a:	16 82       	std	Z+6, r1	; 0x06
    144c:	17 82       	std	Z+7, r1	; 0x07
    144e:	10 86       	std	Z+8, r1	; 0x08
	kd         =  0;
    1450:	11 86       	std	Z+9, r1	; 0x09
    1452:	12 86       	std	Z+10, r1	; 0x0a
    1454:	13 86       	std	Z+11, r1	; 0x0b
    1456:	14 86       	std	Z+12, r1	; 0x0c
	error      =  0;
    1458:	11 8e       	std	Z+25, r1	; 0x19
    145a:	12 8e       	std	Z+26, r1	; 0x1a
    145c:	13 8e       	std	Z+27, r1	; 0x1b
    145e:	14 8e       	std	Z+28, r1	; 0x1c
	errSum     =  0;
    1460:	15 86       	std	Z+13, r1	; 0x0d
    1462:	16 86       	std	Z+14, r1	; 0x0e
    1464:	17 86       	std	Z+15, r1	; 0x0f
    1466:	10 8a       	std	Z+16, r1	; 0x10
	lastinput  =  0;
    1468:	15 a2       	std	Z+37, r1	; 0x25
    146a:	16 a2       	std	Z+38, r1	; 0x26
    146c:	17 a2       	std	Z+39, r1	; 0x27
    146e:	10 a6       	std	Z+40, r1	; 0x28
	offset     =  0;
    1470:	11 a6       	std	Z+41, r1	; 0x29
    1472:	12 a6       	std	Z+42, r1	; 0x2a
    1474:	13 a6       	std	Z+43, r1	; 0x2b
    1476:	14 a6       	std	Z+44, r1	; 0x2c
	setPoint   =  0;
    1478:	16 a6       	std	Z+46, r1	; 0x2e
    147a:	15 a6       	std	Z+45, r1	; 0x2d
	PID_Flag   =  true;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 83       	st	Z, r24
    1480:	08 95       	ret

00001482 <_ZN3PID7Set_PIDEfff>:
}
void PID::Set_PID(float KP,float KI,float KD)
{
    1482:	cf 92       	push	r12
    1484:	df 92       	push	r13
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	fc 01       	movw	r30, r24
	kp = KP;
    1490:	41 83       	std	Z+1, r20	; 0x01
    1492:	52 83       	std	Z+2, r21	; 0x02
    1494:	63 83       	std	Z+3, r22	; 0x03
    1496:	74 83       	std	Z+4, r23	; 0x04
	ki = KI;
    1498:	05 83       	std	Z+5, r16	; 0x05
    149a:	16 83       	std	Z+6, r17	; 0x06
    149c:	27 83       	std	Z+7, r18	; 0x07
    149e:	30 87       	std	Z+8, r19	; 0x08
	kd = KD;
    14a0:	c1 86       	std	Z+9, r12	; 0x09
    14a2:	d2 86       	std	Z+10, r13	; 0x0a
    14a4:	e3 86       	std	Z+11, r14	; 0x0b
    14a6:	f4 86       	std	Z+12, r15	; 0x0c
}
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	df 90       	pop	r13
    14b2:	cf 90       	pop	r12
    14b4:	08 95       	ret

000014b6 <_ZN3PID11Compute_PIDEf>:
float PID::Compute_PID(float input)
{
    14b6:	4f 92       	push	r4
    14b8:	5f 92       	push	r5
    14ba:	6f 92       	push	r6
    14bc:	7f 92       	push	r7
    14be:	8f 92       	push	r8
    14c0:	9f 92       	push	r9
    14c2:	af 92       	push	r10
    14c4:	bf 92       	push	r11
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	ec 01       	movw	r28, r24
    14d8:	6a 01       	movw	r12, r20
    14da:	7b 01       	movw	r14, r22
		error   = setPoint - input;
    14dc:	6d a5       	ldd	r22, Y+45	; 0x2d
    14de:	7e a5       	ldd	r23, Y+46	; 0x2e
    14e0:	07 2e       	mov	r0, r23
    14e2:	00 0c       	add	r0, r0
    14e4:	88 0b       	sbc	r24, r24
    14e6:	99 0b       	sbc	r25, r25
    14e8:	0f d3       	rcall	.+1566   	; 0x1b08 <__floatsisf>
    14ea:	a7 01       	movw	r20, r14
    14ec:	96 01       	movw	r18, r12
    14ee:	08 d2       	rcall	.+1040   	; 0x1900 <__subsf3>
    14f0:	4b 01       	movw	r8, r22
    14f2:	5c 01       	movw	r10, r24
    14f4:	69 8f       	std	Y+25, r22	; 0x19
    14f6:	7a 8f       	std	Y+26, r23	; 0x1a
    14f8:	8b 8f       	std	Y+27, r24	; 0x1b
    14fa:	9c 8f       	std	Y+28, r25	; 0x1c
 		Iterm += (ki*error);
    14fc:	2d 81       	ldd	r18, Y+5	; 0x05
    14fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1500:	4f 81       	ldd	r20, Y+7	; 0x07
    1502:	58 85       	ldd	r21, Y+8	; 0x08
    1504:	b5 d3       	rcall	.+1898   	; 0x1c70 <__mulsf3>
    1506:	29 a1       	ldd	r18, Y+33	; 0x21
    1508:	3a a1       	ldd	r19, Y+34	; 0x22
    150a:	4b a1       	ldd	r20, Y+35	; 0x23
    150c:	5c a1       	ldd	r21, Y+36	; 0x24
    150e:	f9 d1       	rcall	.+1010   	; 0x1902 <__addsf3>
    1510:	2b 01       	movw	r4, r22
    1512:	3c 01       	movw	r6, r24
    1514:	69 a3       	std	Y+33, r22	; 0x21
    1516:	7a a3       	std	Y+34, r23	; 0x22
    1518:	8b a3       	std	Y+35, r24	; 0x23
    151a:	9c a3       	std	Y+36, r25	; 0x24

		float dErr = (input - lastinput);
		
		output = kp * error + Iterm - kd * dErr;
    151c:	29 81       	ldd	r18, Y+1	; 0x01
    151e:	3a 81       	ldd	r19, Y+2	; 0x02
    1520:	4b 81       	ldd	r20, Y+3	; 0x03
    1522:	5c 81       	ldd	r21, Y+4	; 0x04
    1524:	c5 01       	movw	r24, r10
    1526:	b4 01       	movw	r22, r8
    1528:	a3 d3       	rcall	.+1862   	; 0x1c70 <__mulsf3>
    152a:	9b 01       	movw	r18, r22
    152c:	ac 01       	movw	r20, r24
    152e:	c3 01       	movw	r24, r6
    1530:	b2 01       	movw	r22, r4
    1532:	e7 d1       	rcall	.+974    	; 0x1902 <__addsf3>
    1534:	4b 01       	movw	r8, r22
    1536:	5c 01       	movw	r10, r24
float PID::Compute_PID(float input)
{
		error   = setPoint - input;
 		Iterm += (ki*error);

		float dErr = (input - lastinput);
    1538:	2d a1       	ldd	r18, Y+37	; 0x25
    153a:	3e a1       	ldd	r19, Y+38	; 0x26
    153c:	4f a1       	ldd	r20, Y+39	; 0x27
    153e:	58 a5       	ldd	r21, Y+40	; 0x28
    1540:	c7 01       	movw	r24, r14
    1542:	b6 01       	movw	r22, r12
    1544:	dd d1       	rcall	.+954    	; 0x1900 <__subsf3>
		
		output = kp * error + Iterm - kd * dErr;
    1546:	29 85       	ldd	r18, Y+9	; 0x09
    1548:	3a 85       	ldd	r19, Y+10	; 0x0a
    154a:	4b 85       	ldd	r20, Y+11	; 0x0b
    154c:	5c 85       	ldd	r21, Y+12	; 0x0c
    154e:	90 d3       	rcall	.+1824   	; 0x1c70 <__mulsf3>
    1550:	9b 01       	movw	r18, r22
    1552:	ac 01       	movw	r20, r24
    1554:	c5 01       	movw	r24, r10
    1556:	b4 01       	movw	r22, r8
    1558:	d3 d1       	rcall	.+934    	; 0x1900 <__subsf3>
    155a:	6d 8f       	std	Y+29, r22	; 0x1d
    155c:	7e 8f       	std	Y+30, r23	; 0x1e
    155e:	8f 8f       	std	Y+31, r24	; 0x1f
    1560:	98 a3       	std	Y+32, r25	; 0x20
	
		constrain(output,minOut,maxOut);
    1562:	09 89       	ldd	r16, Y+17	; 0x11
    1564:	1a 89       	ldd	r17, Y+18	; 0x12
    1566:	2b 89       	ldd	r18, Y+19	; 0x13
    1568:	3c 89       	ldd	r19, Y+20	; 0x14
    156a:	4d 89       	ldd	r20, Y+21	; 0x15
    156c:	5e 89       	ldd	r21, Y+22	; 0x16
    156e:	6f 89       	ldd	r22, Y+23	; 0x17
    1570:	78 8d       	ldd	r23, Y+24	; 0x18
    1572:	ce 01       	movw	r24, r28
    1574:	4d 96       	adiw	r24, 0x1d	; 29
    1576:	2b df       	rcall	.-426    	; 0x13ce <_Z9constrainRfff>
		//Remember some variables for next time
		lastinput = input;
    1578:	cd a2       	std	Y+37, r12	; 0x25
    157a:	de a2       	std	Y+38, r13	; 0x26
    157c:	ef a2       	std	Y+39, r14	; 0x27
    157e:	f8 a6       	std	Y+40, r15	; 0x28

	return output;
    1580:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1582:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1584:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1586:	98 a1       	ldd	r25, Y+32	; 0x20
}
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	bf 90       	pop	r11
    159a:	af 90       	pop	r10
    159c:	9f 90       	pop	r9
    159e:	8f 90       	pop	r8
    15a0:	7f 90       	pop	r7
    15a2:	6f 90       	pop	r6
    15a4:	5f 90       	pop	r5
    15a6:	4f 90       	pop	r4
    15a8:	08 95       	ret

000015aa <__vector_25>:
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    15aa:	1f 92       	push	r1
    15ac:	0f 92       	push	r0
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	0f 92       	push	r0
    15b2:	11 24       	eor	r1, r1
    15b4:	0b b6       	in	r0, 0x3b	; 59
    15b6:	0f 92       	push	r0
    15b8:	2f 93       	push	r18
    15ba:	8f 93       	push	r24
    15bc:	9f 93       	push	r25
    15be:	ef 93       	push	r30
    15c0:	ff 93       	push	r31
    15c2:	80 91 c0 00 	lds	r24, 0x00C0
    15c6:	20 91 c6 00 	lds	r18, 0x00C6
    15ca:	88 71       	andi	r24, 0x18	; 24
    15cc:	e0 91 88 03 	lds	r30, 0x0388
    15d0:	ef 5f       	subi	r30, 0xFF	; 255
    15d2:	ef 71       	andi	r30, 0x1F	; 31
    15d4:	90 91 87 03 	lds	r25, 0x0387
    15d8:	e9 17       	cp	r30, r25
    15da:	39 f0       	breq	.+14     	; 0x15ea <__vector_25+0x40>
    15dc:	e0 93 88 03 	sts	0x0388, r30
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	e5 57       	subi	r30, 0x75	; 117
    15e4:	fc 4f       	sbci	r31, 0xFC	; 252
    15e6:	20 83       	st	Z, r18
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <__vector_25+0x42>
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	80 93 86 03 	sts	0x0386, r24
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	9f 91       	pop	r25
    15f6:	8f 91       	pop	r24
    15f8:	2f 91       	pop	r18
    15fa:	0f 90       	pop	r0
    15fc:	0b be       	out	0x3b, r0	; 59
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0
    1604:	1f 90       	pop	r1
    1606:	18 95       	reti

00001608 <__vector_26>:
    1608:	1f 92       	push	r1
    160a:	0f 92       	push	r0
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	0f 92       	push	r0
    1610:	11 24       	eor	r1, r1
    1612:	0b b6       	in	r0, 0x3b	; 59
    1614:	0f 92       	push	r0
    1616:	8f 93       	push	r24
    1618:	9f 93       	push	r25
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
    161e:	90 91 8a 03 	lds	r25, 0x038A
    1622:	80 91 89 03 	lds	r24, 0x0389
    1626:	98 17       	cp	r25, r24
    1628:	69 f0       	breq	.+26     	; 0x1644 <__vector_26+0x3c>
    162a:	e0 91 89 03 	lds	r30, 0x0389
    162e:	ef 5f       	subi	r30, 0xFF	; 255
    1630:	ef 71       	andi	r30, 0x1F	; 31
    1632:	e0 93 89 03 	sts	0x0389, r30
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	e5 55       	subi	r30, 0x55	; 85
    163a:	fc 4f       	sbci	r31, 0xFC	; 252
    163c:	80 81       	ld	r24, Z
    163e:	80 93 c6 00 	sts	0x00C6, r24
    1642:	05 c0       	rjmp	.+10     	; 0x164e <__vector_26+0x46>
    1644:	e1 ec       	ldi	r30, 0xC1	; 193
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	8f 7d       	andi	r24, 0xDF	; 223
    164c:	80 83       	st	Z, r24
    164e:	ff 91       	pop	r31
    1650:	ef 91       	pop	r30
    1652:	9f 91       	pop	r25
    1654:	8f 91       	pop	r24
    1656:	0f 90       	pop	r0
    1658:	0b be       	out	0x3b, r0	; 59
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <__vector_51>:
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	0b b6       	in	r0, 0x3b	; 59
    1670:	0f 92       	push	r0
    1672:	2f 93       	push	r18
    1674:	8f 93       	push	r24
    1676:	9f 93       	push	r25
    1678:	ef 93       	push	r30
    167a:	ff 93       	push	r31
    167c:	80 91 d0 00 	lds	r24, 0x00D0
    1680:	20 91 d6 00 	lds	r18, 0x00D6
    1684:	88 71       	andi	r24, 0x18	; 24
    1686:	e0 91 43 03 	lds	r30, 0x0343
    168a:	ef 5f       	subi	r30, 0xFF	; 255
    168c:	ef 71       	andi	r30, 0x1F	; 31
    168e:	90 91 42 03 	lds	r25, 0x0342
    1692:	e9 17       	cp	r30, r25
    1694:	39 f0       	breq	.+14     	; 0x16a4 <__vector_51+0x40>
    1696:	e0 93 43 03 	sts	0x0343, r30
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	ea 5b       	subi	r30, 0xBA	; 186
    169e:	fc 4f       	sbci	r31, 0xFC	; 252
    16a0:	20 83       	st	Z, r18
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <__vector_51+0x42>
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	80 93 41 03 	sts	0x0341, r24
    16aa:	ff 91       	pop	r31
    16ac:	ef 91       	pop	r30
    16ae:	9f 91       	pop	r25
    16b0:	8f 91       	pop	r24
    16b2:	2f 91       	pop	r18
    16b4:	0f 90       	pop	r0
    16b6:	0b be       	out	0x3b, r0	; 59
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0
    16be:	1f 90       	pop	r1
    16c0:	18 95       	reti

000016c2 <__vector_52>:
    16c2:	1f 92       	push	r1
    16c4:	0f 92       	push	r0
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	0f 92       	push	r0
    16ca:	11 24       	eor	r1, r1
    16cc:	0b b6       	in	r0, 0x3b	; 59
    16ce:	0f 92       	push	r0
    16d0:	8f 93       	push	r24
    16d2:	9f 93       	push	r25
    16d4:	ef 93       	push	r30
    16d6:	ff 93       	push	r31
    16d8:	90 91 45 03 	lds	r25, 0x0345
    16dc:	80 91 44 03 	lds	r24, 0x0344
    16e0:	98 17       	cp	r25, r24
    16e2:	69 f0       	breq	.+26     	; 0x16fe <__vector_52+0x3c>
    16e4:	e0 91 44 03 	lds	r30, 0x0344
    16e8:	ef 5f       	subi	r30, 0xFF	; 255
    16ea:	ef 71       	andi	r30, 0x1F	; 31
    16ec:	e0 93 44 03 	sts	0x0344, r30
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	ea 59       	subi	r30, 0x9A	; 154
    16f4:	fc 4f       	sbci	r31, 0xFC	; 252
    16f6:	80 81       	ld	r24, Z
    16f8:	80 93 d6 00 	sts	0x00D6, r24
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <__vector_52+0x46>
    16fe:	e1 ed       	ldi	r30, 0xD1	; 209
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	8f 7d       	andi	r24, 0xDF	; 223
    1706:	80 83       	st	Z, r24
    1708:	ff 91       	pop	r31
    170a:	ef 91       	pop	r30
    170c:	9f 91       	pop	r25
    170e:	8f 91       	pop	r24
    1710:	0f 90       	pop	r0
    1712:	0b be       	out	0x3b, r0	; 59
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	0f 90       	pop	r0
    171a:	1f 90       	pop	r1
    171c:	18 95       	reti

0000171e <_Z10uart2_initj>:
    171e:	10 92 45 03 	sts	0x0345, r1
    1722:	10 92 44 03 	sts	0x0344, r1
    1726:	10 92 43 03 	sts	0x0343, r1
    172a:	10 92 42 03 	sts	0x0342, r1
    172e:	99 23       	and	r25, r25
    1730:	24 f4       	brge	.+8      	; 0x173a <_Z10uart2_initj+0x1c>
    1732:	22 e0       	ldi	r18, 0x02	; 2
    1734:	20 93 d0 00 	sts	0x00D0, r18
    1738:	9f 77       	andi	r25, 0x7F	; 127
    173a:	90 93 d5 00 	sts	0x00D5, r25
    173e:	80 93 d4 00 	sts	0x00D4, r24
    1742:	88 e9       	ldi	r24, 0x98	; 152
    1744:	80 93 d1 00 	sts	0x00D1, r24
    1748:	86 e0       	ldi	r24, 0x06	; 6
    174a:	80 93 d2 00 	sts	0x00D2, r24
    174e:	08 95       	ret

00001750 <_Z10uart2_getcv>:
    1750:	90 91 43 03 	lds	r25, 0x0343
    1754:	80 91 42 03 	lds	r24, 0x0342
    1758:	98 17       	cp	r25, r24
    175a:	91 f0       	breq	.+36     	; 0x1780 <_Z10uart2_getcv+0x30>
    175c:	e0 91 42 03 	lds	r30, 0x0342
    1760:	ef 5f       	subi	r30, 0xFF	; 255
    1762:	ef 71       	andi	r30, 0x1F	; 31
    1764:	e0 93 42 03 	sts	0x0342, r30
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	ea 5b       	subi	r30, 0xBA	; 186
    176c:	fc 4f       	sbci	r31, 0xFC	; 252
    176e:	20 81       	ld	r18, Z
    1770:	80 91 41 03 	lds	r24, 0x0341
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	98 2f       	mov	r25, r24
    1778:	88 27       	eor	r24, r24
    177a:	82 0f       	add	r24, r18
    177c:	91 1d       	adc	r25, r1
    177e:	08 95       	ret
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	08 95       	ret

00001786 <_Z10uart2_putch>:
    1786:	20 91 45 03 	lds	r18, 0x0345
    178a:	2f 5f       	subi	r18, 0xFF	; 255
    178c:	2f 71       	andi	r18, 0x1F	; 31
    178e:	90 91 44 03 	lds	r25, 0x0344
    1792:	29 17       	cp	r18, r25
    1794:	e1 f3       	breq	.-8      	; 0x178e <_Z10uart2_putch+0x8>
    1796:	e2 2f       	mov	r30, r18
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	ea 59       	subi	r30, 0x9A	; 154
    179c:	fc 4f       	sbci	r31, 0xFC	; 252
    179e:	80 83       	st	Z, r24
    17a0:	20 93 45 03 	sts	0x0345, r18
    17a4:	e1 ed       	ldi	r30, 0xD1	; 209
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 62       	ori	r24, 0x20	; 32
    17ac:	80 83       	st	Z, r24
    17ae:	08 95       	ret

000017b0 <_Z12uart2_putinti>:
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	2f 97       	sbiw	r28, 0x0f	; 15
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	4a e0       	ldi	r20, 0x0A	; 10
    17ca:	be 01       	movw	r22, r28
    17cc:	6f 5f       	subi	r22, 0xFF	; 255
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	ba d2       	rcall	.+1396   	; 0x1d46 <__itoa_ncheck>
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	88 23       	and	r24, r24
    17d6:	49 f0       	breq	.+18     	; 0x17ea <_Z12uart2_putinti+0x3a>
    17d8:	8e 01       	movw	r16, r28
    17da:	0e 5f       	subi	r16, 0xFE	; 254
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	d3 df       	rcall	.-90     	; 0x1786 <_Z10uart2_putch>
    17e0:	f8 01       	movw	r30, r16
    17e2:	81 91       	ld	r24, Z+
    17e4:	8f 01       	movw	r16, r30
    17e6:	81 11       	cpse	r24, r1
    17e8:	fa cf       	rjmp	.-12     	; 0x17de <_Z12uart2_putinti+0x2e>
    17ea:	2f 96       	adiw	r28, 0x0f	; 15
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	08 95       	ret

00001800 <_Z10uart2_putsPKc>:
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	ec 01       	movw	r28, r24
    1806:	88 81       	ld	r24, Y
    1808:	88 23       	and	r24, r24
    180a:	29 f0       	breq	.+10     	; 0x1816 <_Z10uart2_putsPKc+0x16>
    180c:	21 96       	adiw	r28, 0x01	; 1
    180e:	bb df       	rcall	.-138    	; 0x1786 <_Z10uart2_putch>
    1810:	89 91       	ld	r24, Y+
    1812:	81 11       	cpse	r24, r1
    1814:	fc cf       	rjmp	.-8      	; 0x180e <_Z10uart2_putsPKc+0xe>
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <__vector_54>:
    181c:	1f 92       	push	r1
    181e:	0f 92       	push	r0
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	0f 92       	push	r0
    1824:	11 24       	eor	r1, r1
    1826:	0b b6       	in	r0, 0x3b	; 59
    1828:	0f 92       	push	r0
    182a:	2f 93       	push	r18
    182c:	8f 93       	push	r24
    182e:	9f 93       	push	r25
    1830:	ef 93       	push	r30
    1832:	ff 93       	push	r31
    1834:	80 91 30 01 	lds	r24, 0x0130
    1838:	20 91 36 01 	lds	r18, 0x0136
    183c:	88 71       	andi	r24, 0x18	; 24
    183e:	e0 91 fe 02 	lds	r30, 0x02FE
    1842:	ef 5f       	subi	r30, 0xFF	; 255
    1844:	ef 71       	andi	r30, 0x1F	; 31
    1846:	90 91 fd 02 	lds	r25, 0x02FD
    184a:	e9 17       	cp	r30, r25
    184c:	39 f0       	breq	.+14     	; 0x185c <__vector_54+0x40>
    184e:	e0 93 fe 02 	sts	0x02FE, r30
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	ef 5f       	subi	r30, 0xFF	; 255
    1856:	fc 4f       	sbci	r31, 0xFC	; 252
    1858:	20 83       	st	Z, r18
    185a:	01 c0       	rjmp	.+2      	; 0x185e <__vector_54+0x42>
    185c:	82 e0       	ldi	r24, 0x02	; 2
    185e:	80 93 fc 02 	sts	0x02FC, r24
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	9f 91       	pop	r25
    1868:	8f 91       	pop	r24
    186a:	2f 91       	pop	r18
    186c:	0f 90       	pop	r0
    186e:	0b be       	out	0x3b, r0	; 59
    1870:	0f 90       	pop	r0
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	0f 90       	pop	r0
    1876:	1f 90       	pop	r1
    1878:	18 95       	reti

0000187a <__vector_55>:
    187a:	1f 92       	push	r1
    187c:	0f 92       	push	r0
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	0f 92       	push	r0
    1882:	11 24       	eor	r1, r1
    1884:	0b b6       	in	r0, 0x3b	; 59
    1886:	0f 92       	push	r0
    1888:	8f 93       	push	r24
    188a:	9f 93       	push	r25
    188c:	ef 93       	push	r30
    188e:	ff 93       	push	r31
    1890:	90 91 00 03 	lds	r25, 0x0300
    1894:	80 91 ff 02 	lds	r24, 0x02FF
    1898:	98 17       	cp	r25, r24
    189a:	69 f0       	breq	.+26     	; 0x18b6 <__vector_55+0x3c>
    189c:	e0 91 ff 02 	lds	r30, 0x02FF
    18a0:	ef 5f       	subi	r30, 0xFF	; 255
    18a2:	ef 71       	andi	r30, 0x1F	; 31
    18a4:	e0 93 ff 02 	sts	0x02FF, r30
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	ef 5d       	subi	r30, 0xDF	; 223
    18ac:	fc 4f       	sbci	r31, 0xFC	; 252
    18ae:	80 81       	ld	r24, Z
    18b0:	80 93 36 01 	sts	0x0136, r24
    18b4:	05 c0       	rjmp	.+10     	; 0x18c0 <__vector_55+0x46>
    18b6:	e1 e3       	ldi	r30, 0x31	; 49
    18b8:	f1 e0       	ldi	r31, 0x01	; 1
    18ba:	80 81       	ld	r24, Z
    18bc:	8f 7d       	andi	r24, 0xDF	; 223
    18be:	80 83       	st	Z, r24
    18c0:	ff 91       	pop	r31
    18c2:	ef 91       	pop	r30
    18c4:	9f 91       	pop	r25
    18c6:	8f 91       	pop	r24
    18c8:	0f 90       	pop	r0
    18ca:	0b be       	out	0x3b, r0	; 59
    18cc:	0f 90       	pop	r0
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	0f 90       	pop	r0
    18d2:	1f 90       	pop	r1
    18d4:	18 95       	reti

000018d6 <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    18d6:	20 91 00 03 	lds	r18, 0x0300
    18da:	2f 5f       	subi	r18, 0xFF	; 255
    18dc:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    18de:	90 91 ff 02 	lds	r25, 0x02FF
    18e2:	29 17       	cp	r18, r25
    18e4:	e1 f3       	breq	.-8      	; 0x18de <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    18e6:	e2 2f       	mov	r30, r18
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	ef 5d       	subi	r30, 0xDF	; 223
    18ec:	fc 4f       	sbci	r31, 0xFC	; 252
    18ee:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    18f0:	20 93 00 03 	sts	0x0300, r18

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    18f4:	e1 e3       	ldi	r30, 0x31	; 49
    18f6:	f1 e0       	ldi	r31, 0x01	; 1
    18f8:	80 81       	ld	r24, Z
    18fa:	80 62       	ori	r24, 0x20	; 32
    18fc:	80 83       	st	Z, r24
    18fe:	08 95       	ret

00001900 <__subsf3>:
    1900:	50 58       	subi	r21, 0x80	; 128

00001902 <__addsf3>:
    1902:	bb 27       	eor	r27, r27
    1904:	aa 27       	eor	r26, r26
    1906:	0e d0       	rcall	.+28     	; 0x1924 <__addsf3x>
    1908:	75 c1       	rjmp	.+746    	; 0x1bf4 <__fp_round>
    190a:	66 d1       	rcall	.+716    	; 0x1bd8 <__fp_pscA>
    190c:	30 f0       	brcs	.+12     	; 0x191a <__addsf3+0x18>
    190e:	6b d1       	rcall	.+726    	; 0x1be6 <__fp_pscB>
    1910:	20 f0       	brcs	.+8      	; 0x191a <__addsf3+0x18>
    1912:	31 f4       	brne	.+12     	; 0x1920 <__addsf3+0x1e>
    1914:	9f 3f       	cpi	r25, 0xFF	; 255
    1916:	11 f4       	brne	.+4      	; 0x191c <__addsf3+0x1a>
    1918:	1e f4       	brtc	.+6      	; 0x1920 <__addsf3+0x1e>
    191a:	5b c1       	rjmp	.+694    	; 0x1bd2 <__fp_nan>
    191c:	0e f4       	brtc	.+2      	; 0x1920 <__addsf3+0x1e>
    191e:	e0 95       	com	r30
    1920:	e7 fb       	bst	r30, 7
    1922:	51 c1       	rjmp	.+674    	; 0x1bc6 <__fp_inf>

00001924 <__addsf3x>:
    1924:	e9 2f       	mov	r30, r25
    1926:	77 d1       	rcall	.+750    	; 0x1c16 <__fp_split3>
    1928:	80 f3       	brcs	.-32     	; 0x190a <__addsf3+0x8>
    192a:	ba 17       	cp	r27, r26
    192c:	62 07       	cpc	r22, r18
    192e:	73 07       	cpc	r23, r19
    1930:	84 07       	cpc	r24, r20
    1932:	95 07       	cpc	r25, r21
    1934:	18 f0       	brcs	.+6      	; 0x193c <__addsf3x+0x18>
    1936:	71 f4       	brne	.+28     	; 0x1954 <__addsf3x+0x30>
    1938:	9e f5       	brtc	.+102    	; 0x19a0 <__addsf3x+0x7c>
    193a:	8f c1       	rjmp	.+798    	; 0x1c5a <__fp_zero>
    193c:	0e f4       	brtc	.+2      	; 0x1940 <__addsf3x+0x1c>
    193e:	e0 95       	com	r30
    1940:	0b 2e       	mov	r0, r27
    1942:	ba 2f       	mov	r27, r26
    1944:	a0 2d       	mov	r26, r0
    1946:	0b 01       	movw	r0, r22
    1948:	b9 01       	movw	r22, r18
    194a:	90 01       	movw	r18, r0
    194c:	0c 01       	movw	r0, r24
    194e:	ca 01       	movw	r24, r20
    1950:	a0 01       	movw	r20, r0
    1952:	11 24       	eor	r1, r1
    1954:	ff 27       	eor	r31, r31
    1956:	59 1b       	sub	r21, r25
    1958:	99 f0       	breq	.+38     	; 0x1980 <__addsf3x+0x5c>
    195a:	59 3f       	cpi	r21, 0xF9	; 249
    195c:	50 f4       	brcc	.+20     	; 0x1972 <__addsf3x+0x4e>
    195e:	50 3e       	cpi	r21, 0xE0	; 224
    1960:	68 f1       	brcs	.+90     	; 0x19bc <__addsf3x+0x98>
    1962:	1a 16       	cp	r1, r26
    1964:	f0 40       	sbci	r31, 0x00	; 0
    1966:	a2 2f       	mov	r26, r18
    1968:	23 2f       	mov	r18, r19
    196a:	34 2f       	mov	r19, r20
    196c:	44 27       	eor	r20, r20
    196e:	58 5f       	subi	r21, 0xF8	; 248
    1970:	f3 cf       	rjmp	.-26     	; 0x1958 <__addsf3x+0x34>
    1972:	46 95       	lsr	r20
    1974:	37 95       	ror	r19
    1976:	27 95       	ror	r18
    1978:	a7 95       	ror	r26
    197a:	f0 40       	sbci	r31, 0x00	; 0
    197c:	53 95       	inc	r21
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__addsf3x+0x4e>
    1980:	7e f4       	brtc	.+30     	; 0x19a0 <__addsf3x+0x7c>
    1982:	1f 16       	cp	r1, r31
    1984:	ba 0b       	sbc	r27, r26
    1986:	62 0b       	sbc	r22, r18
    1988:	73 0b       	sbc	r23, r19
    198a:	84 0b       	sbc	r24, r20
    198c:	ba f0       	brmi	.+46     	; 0x19bc <__addsf3x+0x98>
    198e:	91 50       	subi	r25, 0x01	; 1
    1990:	a1 f0       	breq	.+40     	; 0x19ba <__addsf3x+0x96>
    1992:	ff 0f       	add	r31, r31
    1994:	bb 1f       	adc	r27, r27
    1996:	66 1f       	adc	r22, r22
    1998:	77 1f       	adc	r23, r23
    199a:	88 1f       	adc	r24, r24
    199c:	c2 f7       	brpl	.-16     	; 0x198e <__addsf3x+0x6a>
    199e:	0e c0       	rjmp	.+28     	; 0x19bc <__addsf3x+0x98>
    19a0:	ba 0f       	add	r27, r26
    19a2:	62 1f       	adc	r22, r18
    19a4:	73 1f       	adc	r23, r19
    19a6:	84 1f       	adc	r24, r20
    19a8:	48 f4       	brcc	.+18     	; 0x19bc <__addsf3x+0x98>
    19aa:	87 95       	ror	r24
    19ac:	77 95       	ror	r23
    19ae:	67 95       	ror	r22
    19b0:	b7 95       	ror	r27
    19b2:	f7 95       	ror	r31
    19b4:	9e 3f       	cpi	r25, 0xFE	; 254
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <__addsf3x+0x96>
    19b8:	b3 cf       	rjmp	.-154    	; 0x1920 <__addsf3+0x1e>
    19ba:	93 95       	inc	r25
    19bc:	88 0f       	add	r24, r24
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <__addsf3x+0x9e>
    19c0:	99 27       	eor	r25, r25
    19c2:	ee 0f       	add	r30, r30
    19c4:	97 95       	ror	r25
    19c6:	87 95       	ror	r24
    19c8:	08 95       	ret

000019ca <__cmpsf2>:
    19ca:	d9 d0       	rcall	.+434    	; 0x1b7e <__fp_cmp>
    19cc:	08 f4       	brcc	.+2      	; 0x19d0 <__cmpsf2+0x6>
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	08 95       	ret

000019d2 <__divsf3>:
    19d2:	0c d0       	rcall	.+24     	; 0x19ec <__divsf3x>
    19d4:	0f c1       	rjmp	.+542    	; 0x1bf4 <__fp_round>
    19d6:	07 d1       	rcall	.+526    	; 0x1be6 <__fp_pscB>
    19d8:	40 f0       	brcs	.+16     	; 0x19ea <__divsf3+0x18>
    19da:	fe d0       	rcall	.+508    	; 0x1bd8 <__fp_pscA>
    19dc:	30 f0       	brcs	.+12     	; 0x19ea <__divsf3+0x18>
    19de:	21 f4       	brne	.+8      	; 0x19e8 <__divsf3+0x16>
    19e0:	5f 3f       	cpi	r21, 0xFF	; 255
    19e2:	19 f0       	breq	.+6      	; 0x19ea <__divsf3+0x18>
    19e4:	f0 c0       	rjmp	.+480    	; 0x1bc6 <__fp_inf>
    19e6:	51 11       	cpse	r21, r1
    19e8:	39 c1       	rjmp	.+626    	; 0x1c5c <__fp_szero>
    19ea:	f3 c0       	rjmp	.+486    	; 0x1bd2 <__fp_nan>

000019ec <__divsf3x>:
    19ec:	14 d1       	rcall	.+552    	; 0x1c16 <__fp_split3>
    19ee:	98 f3       	brcs	.-26     	; 0x19d6 <__divsf3+0x4>

000019f0 <__divsf3_pse>:
    19f0:	99 23       	and	r25, r25
    19f2:	c9 f3       	breq	.-14     	; 0x19e6 <__divsf3+0x14>
    19f4:	55 23       	and	r21, r21
    19f6:	b1 f3       	breq	.-20     	; 0x19e4 <__divsf3+0x12>
    19f8:	95 1b       	sub	r25, r21
    19fa:	55 0b       	sbc	r21, r21
    19fc:	bb 27       	eor	r27, r27
    19fe:	aa 27       	eor	r26, r26
    1a00:	62 17       	cp	r22, r18
    1a02:	73 07       	cpc	r23, r19
    1a04:	84 07       	cpc	r24, r20
    1a06:	38 f0       	brcs	.+14     	; 0x1a16 <__divsf3_pse+0x26>
    1a08:	9f 5f       	subi	r25, 0xFF	; 255
    1a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0c:	22 0f       	add	r18, r18
    1a0e:	33 1f       	adc	r19, r19
    1a10:	44 1f       	adc	r20, r20
    1a12:	aa 1f       	adc	r26, r26
    1a14:	a9 f3       	breq	.-22     	; 0x1a00 <__divsf3_pse+0x10>
    1a16:	33 d0       	rcall	.+102    	; 0x1a7e <__divsf3_pse+0x8e>
    1a18:	0e 2e       	mov	r0, r30
    1a1a:	3a f0       	brmi	.+14     	; 0x1a2a <__divsf3_pse+0x3a>
    1a1c:	e0 e8       	ldi	r30, 0x80	; 128
    1a1e:	30 d0       	rcall	.+96     	; 0x1a80 <__divsf3_pse+0x90>
    1a20:	91 50       	subi	r25, 0x01	; 1
    1a22:	50 40       	sbci	r21, 0x00	; 0
    1a24:	e6 95       	lsr	r30
    1a26:	00 1c       	adc	r0, r0
    1a28:	ca f7       	brpl	.-14     	; 0x1a1c <__divsf3_pse+0x2c>
    1a2a:	29 d0       	rcall	.+82     	; 0x1a7e <__divsf3_pse+0x8e>
    1a2c:	fe 2f       	mov	r31, r30
    1a2e:	27 d0       	rcall	.+78     	; 0x1a7e <__divsf3_pse+0x8e>
    1a30:	66 0f       	add	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	88 1f       	adc	r24, r24
    1a36:	bb 1f       	adc	r27, r27
    1a38:	26 17       	cp	r18, r22
    1a3a:	37 07       	cpc	r19, r23
    1a3c:	48 07       	cpc	r20, r24
    1a3e:	ab 07       	cpc	r26, r27
    1a40:	b0 e8       	ldi	r27, 0x80	; 128
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <__divsf3_pse+0x56>
    1a44:	bb 0b       	sbc	r27, r27
    1a46:	80 2d       	mov	r24, r0
    1a48:	bf 01       	movw	r22, r30
    1a4a:	ff 27       	eor	r31, r31
    1a4c:	93 58       	subi	r25, 0x83	; 131
    1a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a50:	2a f0       	brmi	.+10     	; 0x1a5c <__divsf3_pse+0x6c>
    1a52:	9e 3f       	cpi	r25, 0xFE	; 254
    1a54:	51 05       	cpc	r21, r1
    1a56:	68 f0       	brcs	.+26     	; 0x1a72 <__divsf3_pse+0x82>
    1a58:	b6 c0       	rjmp	.+364    	; 0x1bc6 <__fp_inf>
    1a5a:	00 c1       	rjmp	.+512    	; 0x1c5c <__fp_szero>
    1a5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a5e:	ec f3       	brlt	.-6      	; 0x1a5a <__divsf3_pse+0x6a>
    1a60:	98 3e       	cpi	r25, 0xE8	; 232
    1a62:	dc f3       	brlt	.-10     	; 0x1a5a <__divsf3_pse+0x6a>
    1a64:	86 95       	lsr	r24
    1a66:	77 95       	ror	r23
    1a68:	67 95       	ror	r22
    1a6a:	b7 95       	ror	r27
    1a6c:	f7 95       	ror	r31
    1a6e:	9f 5f       	subi	r25, 0xFF	; 255
    1a70:	c9 f7       	brne	.-14     	; 0x1a64 <__divsf3_pse+0x74>
    1a72:	88 0f       	add	r24, r24
    1a74:	91 1d       	adc	r25, r1
    1a76:	96 95       	lsr	r25
    1a78:	87 95       	ror	r24
    1a7a:	97 f9       	bld	r25, 7
    1a7c:	08 95       	ret
    1a7e:	e1 e0       	ldi	r30, 0x01	; 1
    1a80:	66 0f       	add	r22, r22
    1a82:	77 1f       	adc	r23, r23
    1a84:	88 1f       	adc	r24, r24
    1a86:	bb 1f       	adc	r27, r27
    1a88:	62 17       	cp	r22, r18
    1a8a:	73 07       	cpc	r23, r19
    1a8c:	84 07       	cpc	r24, r20
    1a8e:	ba 07       	cpc	r27, r26
    1a90:	20 f0       	brcs	.+8      	; 0x1a9a <__divsf3_pse+0xaa>
    1a92:	62 1b       	sub	r22, r18
    1a94:	73 0b       	sbc	r23, r19
    1a96:	84 0b       	sbc	r24, r20
    1a98:	ba 0b       	sbc	r27, r26
    1a9a:	ee 1f       	adc	r30, r30
    1a9c:	88 f7       	brcc	.-30     	; 0x1a80 <__divsf3_pse+0x90>
    1a9e:	e0 95       	com	r30
    1aa0:	08 95       	ret

00001aa2 <__fixsfsi>:
    1aa2:	04 d0       	rcall	.+8      	; 0x1aac <__fixunssfsi>
    1aa4:	68 94       	set
    1aa6:	b1 11       	cpse	r27, r1
    1aa8:	d9 c0       	rjmp	.+434    	; 0x1c5c <__fp_szero>
    1aaa:	08 95       	ret

00001aac <__fixunssfsi>:
    1aac:	bc d0       	rcall	.+376    	; 0x1c26 <__fp_splitA>
    1aae:	88 f0       	brcs	.+34     	; 0x1ad2 <__fixunssfsi+0x26>
    1ab0:	9f 57       	subi	r25, 0x7F	; 127
    1ab2:	90 f0       	brcs	.+36     	; 0x1ad8 <__fixunssfsi+0x2c>
    1ab4:	b9 2f       	mov	r27, r25
    1ab6:	99 27       	eor	r25, r25
    1ab8:	b7 51       	subi	r27, 0x17	; 23
    1aba:	a0 f0       	brcs	.+40     	; 0x1ae4 <__fixunssfsi+0x38>
    1abc:	d1 f0       	breq	.+52     	; 0x1af2 <__fixunssfsi+0x46>
    1abe:	66 0f       	add	r22, r22
    1ac0:	77 1f       	adc	r23, r23
    1ac2:	88 1f       	adc	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	1a f0       	brmi	.+6      	; 0x1ace <__fixunssfsi+0x22>
    1ac8:	ba 95       	dec	r27
    1aca:	c9 f7       	brne	.-14     	; 0x1abe <__fixunssfsi+0x12>
    1acc:	12 c0       	rjmp	.+36     	; 0x1af2 <__fixunssfsi+0x46>
    1ace:	b1 30       	cpi	r27, 0x01	; 1
    1ad0:	81 f0       	breq	.+32     	; 0x1af2 <__fixunssfsi+0x46>
    1ad2:	c3 d0       	rcall	.+390    	; 0x1c5a <__fp_zero>
    1ad4:	b1 e0       	ldi	r27, 0x01	; 1
    1ad6:	08 95       	ret
    1ad8:	c0 c0       	rjmp	.+384    	; 0x1c5a <__fp_zero>
    1ada:	67 2f       	mov	r22, r23
    1adc:	78 2f       	mov	r23, r24
    1ade:	88 27       	eor	r24, r24
    1ae0:	b8 5f       	subi	r27, 0xF8	; 248
    1ae2:	39 f0       	breq	.+14     	; 0x1af2 <__fixunssfsi+0x46>
    1ae4:	b9 3f       	cpi	r27, 0xF9	; 249
    1ae6:	cc f3       	brlt	.-14     	; 0x1ada <__fixunssfsi+0x2e>
    1ae8:	86 95       	lsr	r24
    1aea:	77 95       	ror	r23
    1aec:	67 95       	ror	r22
    1aee:	b3 95       	inc	r27
    1af0:	d9 f7       	brne	.-10     	; 0x1ae8 <__fixunssfsi+0x3c>
    1af2:	3e f4       	brtc	.+14     	; 0x1b02 <__fixunssfsi+0x56>
    1af4:	90 95       	com	r25
    1af6:	80 95       	com	r24
    1af8:	70 95       	com	r23
    1afa:	61 95       	neg	r22
    1afc:	7f 4f       	sbci	r23, 0xFF	; 255
    1afe:	8f 4f       	sbci	r24, 0xFF	; 255
    1b00:	9f 4f       	sbci	r25, 0xFF	; 255
    1b02:	08 95       	ret

00001b04 <__floatunsisf>:
    1b04:	e8 94       	clt
    1b06:	09 c0       	rjmp	.+18     	; 0x1b1a <__floatsisf+0x12>

00001b08 <__floatsisf>:
    1b08:	97 fb       	bst	r25, 7
    1b0a:	3e f4       	brtc	.+14     	; 0x1b1a <__floatsisf+0x12>
    1b0c:	90 95       	com	r25
    1b0e:	80 95       	com	r24
    1b10:	70 95       	com	r23
    1b12:	61 95       	neg	r22
    1b14:	7f 4f       	sbci	r23, 0xFF	; 255
    1b16:	8f 4f       	sbci	r24, 0xFF	; 255
    1b18:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1a:	99 23       	and	r25, r25
    1b1c:	a9 f0       	breq	.+42     	; 0x1b48 <__floatsisf+0x40>
    1b1e:	f9 2f       	mov	r31, r25
    1b20:	96 e9       	ldi	r25, 0x96	; 150
    1b22:	bb 27       	eor	r27, r27
    1b24:	93 95       	inc	r25
    1b26:	f6 95       	lsr	r31
    1b28:	87 95       	ror	r24
    1b2a:	77 95       	ror	r23
    1b2c:	67 95       	ror	r22
    1b2e:	b7 95       	ror	r27
    1b30:	f1 11       	cpse	r31, r1
    1b32:	f8 cf       	rjmp	.-16     	; 0x1b24 <__floatsisf+0x1c>
    1b34:	fa f4       	brpl	.+62     	; 0x1b74 <__floatsisf+0x6c>
    1b36:	bb 0f       	add	r27, r27
    1b38:	11 f4       	brne	.+4      	; 0x1b3e <__floatsisf+0x36>
    1b3a:	60 ff       	sbrs	r22, 0
    1b3c:	1b c0       	rjmp	.+54     	; 0x1b74 <__floatsisf+0x6c>
    1b3e:	6f 5f       	subi	r22, 0xFF	; 255
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255
    1b42:	8f 4f       	sbci	r24, 0xFF	; 255
    1b44:	9f 4f       	sbci	r25, 0xFF	; 255
    1b46:	16 c0       	rjmp	.+44     	; 0x1b74 <__floatsisf+0x6c>
    1b48:	88 23       	and	r24, r24
    1b4a:	11 f0       	breq	.+4      	; 0x1b50 <__floatsisf+0x48>
    1b4c:	96 e9       	ldi	r25, 0x96	; 150
    1b4e:	11 c0       	rjmp	.+34     	; 0x1b72 <__floatsisf+0x6a>
    1b50:	77 23       	and	r23, r23
    1b52:	21 f0       	breq	.+8      	; 0x1b5c <__floatsisf+0x54>
    1b54:	9e e8       	ldi	r25, 0x8E	; 142
    1b56:	87 2f       	mov	r24, r23
    1b58:	76 2f       	mov	r23, r22
    1b5a:	05 c0       	rjmp	.+10     	; 0x1b66 <__floatsisf+0x5e>
    1b5c:	66 23       	and	r22, r22
    1b5e:	71 f0       	breq	.+28     	; 0x1b7c <__floatsisf+0x74>
    1b60:	96 e8       	ldi	r25, 0x86	; 134
    1b62:	86 2f       	mov	r24, r22
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	2a f0       	brmi	.+10     	; 0x1b74 <__floatsisf+0x6c>
    1b6a:	9a 95       	dec	r25
    1b6c:	66 0f       	add	r22, r22
    1b6e:	77 1f       	adc	r23, r23
    1b70:	88 1f       	adc	r24, r24
    1b72:	da f7       	brpl	.-10     	; 0x1b6a <__floatsisf+0x62>
    1b74:	88 0f       	add	r24, r24
    1b76:	96 95       	lsr	r25
    1b78:	87 95       	ror	r24
    1b7a:	97 f9       	bld	r25, 7
    1b7c:	08 95       	ret

00001b7e <__fp_cmp>:
    1b7e:	99 0f       	add	r25, r25
    1b80:	00 08       	sbc	r0, r0
    1b82:	55 0f       	add	r21, r21
    1b84:	aa 0b       	sbc	r26, r26
    1b86:	e0 e8       	ldi	r30, 0x80	; 128
    1b88:	fe ef       	ldi	r31, 0xFE	; 254
    1b8a:	16 16       	cp	r1, r22
    1b8c:	17 06       	cpc	r1, r23
    1b8e:	e8 07       	cpc	r30, r24
    1b90:	f9 07       	cpc	r31, r25
    1b92:	c0 f0       	brcs	.+48     	; 0x1bc4 <__fp_cmp+0x46>
    1b94:	12 16       	cp	r1, r18
    1b96:	13 06       	cpc	r1, r19
    1b98:	e4 07       	cpc	r30, r20
    1b9a:	f5 07       	cpc	r31, r21
    1b9c:	98 f0       	brcs	.+38     	; 0x1bc4 <__fp_cmp+0x46>
    1b9e:	62 1b       	sub	r22, r18
    1ba0:	73 0b       	sbc	r23, r19
    1ba2:	84 0b       	sbc	r24, r20
    1ba4:	95 0b       	sbc	r25, r21
    1ba6:	39 f4       	brne	.+14     	; 0x1bb6 <__fp_cmp+0x38>
    1ba8:	0a 26       	eor	r0, r26
    1baa:	61 f0       	breq	.+24     	; 0x1bc4 <__fp_cmp+0x46>
    1bac:	23 2b       	or	r18, r19
    1bae:	24 2b       	or	r18, r20
    1bb0:	25 2b       	or	r18, r21
    1bb2:	21 f4       	brne	.+8      	; 0x1bbc <__fp_cmp+0x3e>
    1bb4:	08 95       	ret
    1bb6:	0a 26       	eor	r0, r26
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <__fp_cmp+0x3e>
    1bba:	a1 40       	sbci	r26, 0x01	; 1
    1bbc:	a6 95       	lsr	r26
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	81 1d       	adc	r24, r1
    1bc2:	81 1d       	adc	r24, r1
    1bc4:	08 95       	ret

00001bc6 <__fp_inf>:
    1bc6:	97 f9       	bld	r25, 7
    1bc8:	9f 67       	ori	r25, 0x7F	; 127
    1bca:	80 e8       	ldi	r24, 0x80	; 128
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	08 95       	ret

00001bd2 <__fp_nan>:
    1bd2:	9f ef       	ldi	r25, 0xFF	; 255
    1bd4:	80 ec       	ldi	r24, 0xC0	; 192
    1bd6:	08 95       	ret

00001bd8 <__fp_pscA>:
    1bd8:	00 24       	eor	r0, r0
    1bda:	0a 94       	dec	r0
    1bdc:	16 16       	cp	r1, r22
    1bde:	17 06       	cpc	r1, r23
    1be0:	18 06       	cpc	r1, r24
    1be2:	09 06       	cpc	r0, r25
    1be4:	08 95       	ret

00001be6 <__fp_pscB>:
    1be6:	00 24       	eor	r0, r0
    1be8:	0a 94       	dec	r0
    1bea:	12 16       	cp	r1, r18
    1bec:	13 06       	cpc	r1, r19
    1bee:	14 06       	cpc	r1, r20
    1bf0:	05 06       	cpc	r0, r21
    1bf2:	08 95       	ret

00001bf4 <__fp_round>:
    1bf4:	09 2e       	mov	r0, r25
    1bf6:	03 94       	inc	r0
    1bf8:	00 0c       	add	r0, r0
    1bfa:	11 f4       	brne	.+4      	; 0x1c00 <__fp_round+0xc>
    1bfc:	88 23       	and	r24, r24
    1bfe:	52 f0       	brmi	.+20     	; 0x1c14 <__fp_round+0x20>
    1c00:	bb 0f       	add	r27, r27
    1c02:	40 f4       	brcc	.+16     	; 0x1c14 <__fp_round+0x20>
    1c04:	bf 2b       	or	r27, r31
    1c06:	11 f4       	brne	.+4      	; 0x1c0c <__fp_round+0x18>
    1c08:	60 ff       	sbrs	r22, 0
    1c0a:	04 c0       	rjmp	.+8      	; 0x1c14 <__fp_round+0x20>
    1c0c:	6f 5f       	subi	r22, 0xFF	; 255
    1c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c10:	8f 4f       	sbci	r24, 0xFF	; 255
    1c12:	9f 4f       	sbci	r25, 0xFF	; 255
    1c14:	08 95       	ret

00001c16 <__fp_split3>:
    1c16:	57 fd       	sbrc	r21, 7
    1c18:	90 58       	subi	r25, 0x80	; 128
    1c1a:	44 0f       	add	r20, r20
    1c1c:	55 1f       	adc	r21, r21
    1c1e:	59 f0       	breq	.+22     	; 0x1c36 <__fp_splitA+0x10>
    1c20:	5f 3f       	cpi	r21, 0xFF	; 255
    1c22:	71 f0       	breq	.+28     	; 0x1c40 <__fp_splitA+0x1a>
    1c24:	47 95       	ror	r20

00001c26 <__fp_splitA>:
    1c26:	88 0f       	add	r24, r24
    1c28:	97 fb       	bst	r25, 7
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	61 f0       	breq	.+24     	; 0x1c46 <__fp_splitA+0x20>
    1c2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c30:	79 f0       	breq	.+30     	; 0x1c50 <__fp_splitA+0x2a>
    1c32:	87 95       	ror	r24
    1c34:	08 95       	ret
    1c36:	12 16       	cp	r1, r18
    1c38:	13 06       	cpc	r1, r19
    1c3a:	14 06       	cpc	r1, r20
    1c3c:	55 1f       	adc	r21, r21
    1c3e:	f2 cf       	rjmp	.-28     	; 0x1c24 <__fp_split3+0xe>
    1c40:	46 95       	lsr	r20
    1c42:	f1 df       	rcall	.-30     	; 0x1c26 <__fp_splitA>
    1c44:	08 c0       	rjmp	.+16     	; 0x1c56 <__fp_splitA+0x30>
    1c46:	16 16       	cp	r1, r22
    1c48:	17 06       	cpc	r1, r23
    1c4a:	18 06       	cpc	r1, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	f1 cf       	rjmp	.-30     	; 0x1c32 <__fp_splitA+0xc>
    1c50:	86 95       	lsr	r24
    1c52:	71 05       	cpc	r23, r1
    1c54:	61 05       	cpc	r22, r1
    1c56:	08 94       	sec
    1c58:	08 95       	ret

00001c5a <__fp_zero>:
    1c5a:	e8 94       	clt

00001c5c <__fp_szero>:
    1c5c:	bb 27       	eor	r27, r27
    1c5e:	66 27       	eor	r22, r22
    1c60:	77 27       	eor	r23, r23
    1c62:	cb 01       	movw	r24, r22
    1c64:	97 f9       	bld	r25, 7
    1c66:	08 95       	ret

00001c68 <__gesf2>:
    1c68:	8a df       	rcall	.-236    	; 0x1b7e <__fp_cmp>
    1c6a:	08 f4       	brcc	.+2      	; 0x1c6e <__gesf2+0x6>
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	08 95       	ret

00001c70 <__mulsf3>:
    1c70:	0b d0       	rcall	.+22     	; 0x1c88 <__mulsf3x>
    1c72:	c0 cf       	rjmp	.-128    	; 0x1bf4 <__fp_round>
    1c74:	b1 df       	rcall	.-158    	; 0x1bd8 <__fp_pscA>
    1c76:	28 f0       	brcs	.+10     	; 0x1c82 <__mulsf3+0x12>
    1c78:	b6 df       	rcall	.-148    	; 0x1be6 <__fp_pscB>
    1c7a:	18 f0       	brcs	.+6      	; 0x1c82 <__mulsf3+0x12>
    1c7c:	95 23       	and	r25, r21
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <__mulsf3+0x12>
    1c80:	a2 cf       	rjmp	.-188    	; 0x1bc6 <__fp_inf>
    1c82:	a7 cf       	rjmp	.-178    	; 0x1bd2 <__fp_nan>
    1c84:	11 24       	eor	r1, r1
    1c86:	ea cf       	rjmp	.-44     	; 0x1c5c <__fp_szero>

00001c88 <__mulsf3x>:
    1c88:	c6 df       	rcall	.-116    	; 0x1c16 <__fp_split3>
    1c8a:	a0 f3       	brcs	.-24     	; 0x1c74 <__mulsf3+0x4>

00001c8c <__mulsf3_pse>:
    1c8c:	95 9f       	mul	r25, r21
    1c8e:	d1 f3       	breq	.-12     	; 0x1c84 <__mulsf3+0x14>
    1c90:	95 0f       	add	r25, r21
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	55 1f       	adc	r21, r21
    1c96:	62 9f       	mul	r22, r18
    1c98:	f0 01       	movw	r30, r0
    1c9a:	72 9f       	mul	r23, r18
    1c9c:	bb 27       	eor	r27, r27
    1c9e:	f0 0d       	add	r31, r0
    1ca0:	b1 1d       	adc	r27, r1
    1ca2:	63 9f       	mul	r22, r19
    1ca4:	aa 27       	eor	r26, r26
    1ca6:	f0 0d       	add	r31, r0
    1ca8:	b1 1d       	adc	r27, r1
    1caa:	aa 1f       	adc	r26, r26
    1cac:	64 9f       	mul	r22, r20
    1cae:	66 27       	eor	r22, r22
    1cb0:	b0 0d       	add	r27, r0
    1cb2:	a1 1d       	adc	r26, r1
    1cb4:	66 1f       	adc	r22, r22
    1cb6:	82 9f       	mul	r24, r18
    1cb8:	22 27       	eor	r18, r18
    1cba:	b0 0d       	add	r27, r0
    1cbc:	a1 1d       	adc	r26, r1
    1cbe:	62 1f       	adc	r22, r18
    1cc0:	73 9f       	mul	r23, r19
    1cc2:	b0 0d       	add	r27, r0
    1cc4:	a1 1d       	adc	r26, r1
    1cc6:	62 1f       	adc	r22, r18
    1cc8:	83 9f       	mul	r24, r19
    1cca:	a0 0d       	add	r26, r0
    1ccc:	61 1d       	adc	r22, r1
    1cce:	22 1f       	adc	r18, r18
    1cd0:	74 9f       	mul	r23, r20
    1cd2:	33 27       	eor	r19, r19
    1cd4:	a0 0d       	add	r26, r0
    1cd6:	61 1d       	adc	r22, r1
    1cd8:	23 1f       	adc	r18, r19
    1cda:	84 9f       	mul	r24, r20
    1cdc:	60 0d       	add	r22, r0
    1cde:	21 1d       	adc	r18, r1
    1ce0:	82 2f       	mov	r24, r18
    1ce2:	76 2f       	mov	r23, r22
    1ce4:	6a 2f       	mov	r22, r26
    1ce6:	11 24       	eor	r1, r1
    1ce8:	9f 57       	subi	r25, 0x7F	; 127
    1cea:	50 40       	sbci	r21, 0x00	; 0
    1cec:	8a f0       	brmi	.+34     	; 0x1d10 <__mulsf3_pse+0x84>
    1cee:	e1 f0       	breq	.+56     	; 0x1d28 <__mulsf3_pse+0x9c>
    1cf0:	88 23       	and	r24, r24
    1cf2:	4a f0       	brmi	.+18     	; 0x1d06 <__mulsf3_pse+0x7a>
    1cf4:	ee 0f       	add	r30, r30
    1cf6:	ff 1f       	adc	r31, r31
    1cf8:	bb 1f       	adc	r27, r27
    1cfa:	66 1f       	adc	r22, r22
    1cfc:	77 1f       	adc	r23, r23
    1cfe:	88 1f       	adc	r24, r24
    1d00:	91 50       	subi	r25, 0x01	; 1
    1d02:	50 40       	sbci	r21, 0x00	; 0
    1d04:	a9 f7       	brne	.-22     	; 0x1cf0 <__mulsf3_pse+0x64>
    1d06:	9e 3f       	cpi	r25, 0xFE	; 254
    1d08:	51 05       	cpc	r21, r1
    1d0a:	70 f0       	brcs	.+28     	; 0x1d28 <__mulsf3_pse+0x9c>
    1d0c:	5c cf       	rjmp	.-328    	; 0x1bc6 <__fp_inf>
    1d0e:	a6 cf       	rjmp	.-180    	; 0x1c5c <__fp_szero>
    1d10:	5f 3f       	cpi	r21, 0xFF	; 255
    1d12:	ec f3       	brlt	.-6      	; 0x1d0e <__mulsf3_pse+0x82>
    1d14:	98 3e       	cpi	r25, 0xE8	; 232
    1d16:	dc f3       	brlt	.-10     	; 0x1d0e <__mulsf3_pse+0x82>
    1d18:	86 95       	lsr	r24
    1d1a:	77 95       	ror	r23
    1d1c:	67 95       	ror	r22
    1d1e:	b7 95       	ror	r27
    1d20:	f7 95       	ror	r31
    1d22:	e7 95       	ror	r30
    1d24:	9f 5f       	subi	r25, 0xFF	; 255
    1d26:	c1 f7       	brne	.-16     	; 0x1d18 <__mulsf3_pse+0x8c>
    1d28:	fe 2b       	or	r31, r30
    1d2a:	88 0f       	add	r24, r24
    1d2c:	91 1d       	adc	r25, r1
    1d2e:	96 95       	lsr	r25
    1d30:	87 95       	ror	r24
    1d32:	97 f9       	bld	r25, 7
    1d34:	08 95       	ret

00001d36 <__tablejump2__>:
    1d36:	ee 0f       	add	r30, r30
    1d38:	ff 1f       	adc	r31, r31
    1d3a:	88 1f       	adc	r24, r24
    1d3c:	8b bf       	out	0x3b, r24	; 59
    1d3e:	07 90       	elpm	r0, Z+
    1d40:	f6 91       	elpm	r31, Z
    1d42:	e0 2d       	mov	r30, r0
    1d44:	19 94       	eijmp

00001d46 <__itoa_ncheck>:
    1d46:	bb 27       	eor	r27, r27
    1d48:	4a 30       	cpi	r20, 0x0A	; 10
    1d4a:	31 f4       	brne	.+12     	; 0x1d58 <__itoa_ncheck+0x12>
    1d4c:	99 23       	and	r25, r25
    1d4e:	22 f4       	brpl	.+8      	; 0x1d58 <__itoa_ncheck+0x12>
    1d50:	bd e2       	ldi	r27, 0x2D	; 45
    1d52:	90 95       	com	r25
    1d54:	81 95       	neg	r24
    1d56:	9f 4f       	sbci	r25, 0xFF	; 255
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <__utoa_common>

00001d5a <__utoa_ncheck>:
    1d5a:	bb 27       	eor	r27, r27

00001d5c <__utoa_common>:
    1d5c:	fb 01       	movw	r30, r22
    1d5e:	55 27       	eor	r21, r21
    1d60:	aa 27       	eor	r26, r26
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	aa 1f       	adc	r26, r26
    1d68:	a4 17       	cp	r26, r20
    1d6a:	10 f0       	brcs	.+4      	; 0x1d70 <__utoa_common+0x14>
    1d6c:	a4 1b       	sub	r26, r20
    1d6e:	83 95       	inc	r24
    1d70:	50 51       	subi	r21, 0x10	; 16
    1d72:	b9 f7       	brne	.-18     	; 0x1d62 <__utoa_common+0x6>
    1d74:	a0 5d       	subi	r26, 0xD0	; 208
    1d76:	aa 33       	cpi	r26, 0x3A	; 58
    1d78:	08 f0       	brcs	.+2      	; 0x1d7c <__utoa_common+0x20>
    1d7a:	a9 5d       	subi	r26, 0xD9	; 217
    1d7c:	a1 93       	st	Z+, r26
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	79 f7       	brne	.-34     	; 0x1d60 <__utoa_common+0x4>
    1d82:	b1 11       	cpse	r27, r1
    1d84:	b1 93       	st	Z+, r27
    1d86:	11 92       	st	Z+, r1
    1d88:	cb 01       	movw	r24, r22
    1d8a:	00 c0       	rjmp	.+0      	; 0x1d8c <strrev>

00001d8c <strrev>:
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	fc 01       	movw	r30, r24
    1d90:	67 2f       	mov	r22, r23
    1d92:	71 91       	ld	r23, Z+
    1d94:	77 23       	and	r23, r23
    1d96:	e1 f7       	brne	.-8      	; 0x1d90 <strrev+0x4>
    1d98:	32 97       	sbiw	r30, 0x02	; 2
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <strrev+0x18>
    1d9c:	7c 91       	ld	r23, X
    1d9e:	6d 93       	st	X+, r22
    1da0:	70 83       	st	Z, r23
    1da2:	62 91       	ld	r22, -Z
    1da4:	ae 17       	cp	r26, r30
    1da6:	bf 07       	cpc	r27, r31
    1da8:	c8 f3       	brcs	.-14     	; 0x1d9c <strrev+0x10>
    1daa:	08 95       	ret

00001dac <_exit>:
    1dac:	f8 94       	cli

00001dae <__stop_program>:
    1dae:	ff cf       	rjmp	.-2      	; 0x1dae <__stop_program>
