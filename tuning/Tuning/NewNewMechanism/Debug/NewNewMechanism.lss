
NewNewMechanism.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00001034  000010c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001034  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000120  00800210  00800210  000010d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002499  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090f  00000000  00000000  00003811  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d03  00000000  00000000  00004120  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006dc  00000000  00000000  00004e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c6c  00000000  00000000  00005500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000170d  00000000  00000000  0000616c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00007879  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	c0 c2       	rjmp	.+1408   	; 0x586 <__vector_1>
       6:	00 00       	nop
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
      28:	a3 c0       	rjmp	.+326    	; 0x170 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a1 c0       	rjmp	.+322    	; 0x170 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
      54:	6c c2       	rjmp	.+1240   	; 0x52e <__vector_21>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	0b c4       	rjmp	.+2070   	; 0x87c <__vector_25>
      66:	00 00       	nop
      68:	38 c4       	rjmp	.+2160   	; 0x8da <__vector_26>
      6a:	00 00       	nop
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
      86:	00 00       	nop
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
      92:	00 00       	nop
      94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
      96:	00 00       	nop
      98:	6b c0       	rjmp	.+214    	; 0x170 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	69 c0       	rjmp	.+210    	; 0x170 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	67 c0       	rjmp	.+206    	; 0x170 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	65 c0       	rjmp	.+202    	; 0x170 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	63 c0       	rjmp	.+198    	; 0x170 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	61 c0       	rjmp	.+194    	; 0x170 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5f c0       	rjmp	.+190    	; 0x170 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5d c0       	rjmp	.+186    	; 0x170 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5b c0       	rjmp	.+182    	; 0x170 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	59 c0       	rjmp	.+178    	; 0x170 <__bad_interrupt>
      be:	00 00       	nop
      c0:	57 c0       	rjmp	.+174    	; 0x170 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	55 c0       	rjmp	.+170    	; 0x170 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	53 c0       	rjmp	.+166    	; 0x170 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	8a c4       	rjmp	.+2324   	; 0x9e2 <__vector_51>
      ce:	00 00       	nop
      d0:	b7 c4       	rjmp	.+2414   	; 0xa40 <__vector_52>
      d2:	00 00       	nop
      d4:	4d c0       	rjmp	.+154    	; 0x170 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	60 c5       	rjmp	.+2752   	; 0xb9a <__vector_54>
      da:	00 00       	nop
      dc:	8d c5       	rjmp	.+2842   	; 0xbf8 <__vector_55>
      de:	00 00       	nop
      e0:	47 c0       	rjmp	.+142    	; 0x170 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3b 02       	muls	r19, r27
      e6:	41 02       	muls	r20, r17
      e8:	6c 02       	muls	r22, r28
      ea:	cd 01       	movw	r24, r26
      ec:	1b 02       	muls	r17, r27
      ee:	6c 02       	muls	r22, r28
      f0:	6c 02       	muls	r22, r28
      f2:	6c 02       	muls	r22, r28
      f4:	b3 01       	movw	r22, r6
      f6:	6c 02       	muls	r22, r28
      f8:	6c 02       	muls	r22, r28
      fa:	6c 02       	muls	r22, r28
      fc:	6c 02       	muls	r22, r28
      fe:	6c 02       	muls	r22, r28
     100:	6c 02       	muls	r22, r28
     102:	99 01       	movw	r18, r18
     104:	e7 01       	movw	r28, r14
     106:	6c 02       	muls	r22, r28
     108:	35 02       	muls	r19, r21
     10a:	6c 02       	muls	r22, r28
     10c:	6c 02       	muls	r22, r28
     10e:	6c 02       	muls	r22, r28
     110:	01 02       	muls	r16, r17

00000112 <__ctors_start>:
     112:	ec 02       	muls	r30, r28

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d1 e2       	ldi	r29, 0x21	; 33
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	0c bf       	out	0x3c, r16	; 60

00000124 <__do_copy_data>:
     124:	12 e0       	ldi	r17, 0x02	; 2
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	e4 e3       	ldi	r30, 0x34	; 52
     12c:	f0 e1       	ldi	r31, 0x10	; 16
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	a0 31       	cpi	r26, 0x10	; 16
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	23 e0       	ldi	r18, 0x03	; 3
     140:	a0 e1       	ldi	r26, 0x10	; 16
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a0 33       	cpi	r26, 0x30	; 48
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>

0000014e <__do_global_ctors>:
     14e:	10 e0       	ldi	r17, 0x00	; 0
     150:	ca e8       	ldi	r28, 0x8A	; 138
     152:	d0 e0       	ldi	r29, 0x00	; 0
     154:	00 e0       	ldi	r16, 0x00	; 0
     156:	05 c0       	rjmp	.+10     	; 0x162 <__do_global_ctors+0x14>
     158:	21 97       	sbiw	r28, 0x01	; 1
     15a:	01 09       	sbc	r16, r1
     15c:	80 2f       	mov	r24, r16
     15e:	fe 01       	movw	r30, r28
     160:	2c d7       	rcall	.+3672   	; 0xfba <__tablejump2__>
     162:	c9 38       	cpi	r28, 0x89	; 137
     164:	d1 07       	cpc	r29, r17
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	08 07       	cpc	r16, r24
     16a:	b1 f7       	brne	.-20     	; 0x158 <__do_global_ctors+0xa>
     16c:	9c d0       	rcall	.+312    	; 0x2a6 <main>
     16e:	60 c7       	rjmp	.+3776   	; 0x1030 <_exit>

00000170 <__bad_interrupt>:
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <_ZN7EncoderC1Ev>:
	if (Angle <= -360)
	{
		Angle = 0;
	}
	return Angle;
}
     172:	fc 01       	movw	r30, r24
     174:	16 8a       	std	Z+22, r1	; 0x16
     176:	17 8a       	std	Z+23, r1	; 0x17
     178:	10 8e       	std	Z+24, r1	; 0x18
     17a:	11 8e       	std	Z+25, r1	; 0x19
     17c:	13 8e       	std	Z+27, r1	; 0x1b
     17e:	12 8e       	std	Z+26, r1	; 0x1a
     180:	11 82       	std	Z+1, r1	; 0x01
     182:	10 82       	st	Z, r1
     184:	15 8e       	std	Z+29, r1	; 0x1d
     186:	14 8e       	std	Z+28, r1	; 0x1c
     188:	17 8e       	std	Z+31, r1	; 0x1f
     18a:	16 8e       	std	Z+30, r1	; 0x1e
     18c:	08 95       	ret

0000018e <_ZN7Encoder24Encoder_Initialize_TimerEv>:
     18e:	85 b5       	in	r24, 0x25	; 37
     190:	85 60       	ori	r24, 0x05	; 5
     192:	85 bd       	out	0x25, r24	; 37
     194:	8b e9       	ldi	r24, 0x9B	; 155
     196:	87 bd       	out	0x27, r24	; 39
     198:	ee e6       	ldi	r30, 0x6E	; 110
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	82 60       	ori	r24, 0x02	; 2
     1a0:	80 83       	st	Z, r24
     1a2:	a9 9a       	sbi	0x15, 1	; 21
     1a4:	16 bc       	out	0x26, r1	; 38
     1a6:	08 95       	ret

000001a8 <_ZN7Encoder37Encoder_Initialize_External_InterruptEv>:
     1a8:	e9 e6       	ldi	r30, 0x69	; 105
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	82 60       	ori	r24, 0x02	; 2
     1b0:	80 83       	st	Z, r24
     1b2:	e8 9a       	sbi	0x1d, 0	; 29
     1b4:	e0 9a       	sbi	0x1c, 0	; 28
     1b6:	08 95       	ret

000001b8 <_ZN7Encoder18Encoder_InitializeEv>:
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	ec 01       	movw	r28, r24
     1be:	50 98       	cbi	0x0a, 0	; 10
     1c0:	08 98       	cbi	0x01, 0	; 1
     1c2:	f2 df       	rcall	.-28     	; 0x1a8 <_ZN7Encoder37Encoder_Initialize_External_InterruptEv>
     1c4:	ce 01       	movw	r24, r28
     1c6:	e3 df       	rcall	.-58     	; 0x18e <_ZN7Encoder24Encoder_Initialize_TimerEv>
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	08 95       	ret

000001ce <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv>:
     1ce:	00 9b       	sbis	0x00, 0	; 0
     1d0:	0e c0       	rjmp	.+28     	; 0x1ee <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv+0x20>
     1d2:	fc 01       	movw	r30, r24
     1d4:	46 89       	ldd	r20, Z+22	; 0x16
     1d6:	57 89       	ldd	r21, Z+23	; 0x17
     1d8:	60 8d       	ldd	r22, Z+24	; 0x18
     1da:	71 8d       	ldd	r23, Z+25	; 0x19
     1dc:	41 50       	subi	r20, 0x01	; 1
     1de:	51 09       	sbc	r21, r1
     1e0:	61 09       	sbc	r22, r1
     1e2:	71 09       	sbc	r23, r1
     1e4:	46 8b       	std	Z+22, r20	; 0x16
     1e6:	57 8b       	std	Z+23, r21	; 0x17
     1e8:	60 8f       	std	Z+24, r22	; 0x18
     1ea:	71 8f       	std	Z+25, r23	; 0x19
     1ec:	08 95       	ret
     1ee:	00 99       	sbic	0x00, 0	; 0
     1f0:	0d c0       	rjmp	.+26     	; 0x20c <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv+0x3e>
     1f2:	fc 01       	movw	r30, r24
     1f4:	46 89       	ldd	r20, Z+22	; 0x16
     1f6:	57 89       	ldd	r21, Z+23	; 0x17
     1f8:	60 8d       	ldd	r22, Z+24	; 0x18
     1fa:	71 8d       	ldd	r23, Z+25	; 0x19
     1fc:	4f 5f       	subi	r20, 0xFF	; 255
     1fe:	5f 4f       	sbci	r21, 0xFF	; 255
     200:	6f 4f       	sbci	r22, 0xFF	; 255
     202:	7f 4f       	sbci	r23, 0xFF	; 255
     204:	46 8b       	std	Z+22, r20	; 0x16
     206:	57 8b       	std	Z+23, r21	; 0x17
     208:	60 8f       	std	Z+24, r22	; 0x18
     20a:	71 8f       	std	Z+25, r23	; 0x19
     20c:	08 95       	ret

0000020e <_ZN7Encoder20Encoder_update_SpeedEv>:

void Encoder::Encoder_update_Speed()
{
     20e:	cf 92       	push	r12
     210:	df 92       	push	r13
     212:	ef 92       	push	r14
     214:	ff 92       	push	r15
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	fc 01       	movw	r30, r24
	EncoderBuffer[3] = EncoderBuffer[2];
     21c:	02 85       	ldd	r16, Z+10	; 0x0a
     21e:	13 85       	ldd	r17, Z+11	; 0x0b
     220:	24 85       	ldd	r18, Z+12	; 0x0c
     222:	35 85       	ldd	r19, Z+13	; 0x0d
     224:	06 87       	std	Z+14, r16	; 0x0e
     226:	17 87       	std	Z+15, r17	; 0x0f
     228:	20 8b       	std	Z+16, r18	; 0x10
     22a:	31 8b       	std	Z+17, r19	; 0x11
	EncoderBuffer[2] = EncoderBuffer[1];
     22c:	c6 80       	ldd	r12, Z+6	; 0x06
     22e:	d7 80       	ldd	r13, Z+7	; 0x07
     230:	e0 84       	ldd	r14, Z+8	; 0x08
     232:	f1 84       	ldd	r15, Z+9	; 0x09
     234:	c2 86       	std	Z+10, r12	; 0x0a
     236:	d3 86       	std	Z+11, r13	; 0x0b
     238:	e4 86       	std	Z+12, r14	; 0x0c
     23a:	f5 86       	std	Z+13, r15	; 0x0d
	EncoderBuffer[1] = EncoderBuffer[0];
     23c:	42 81       	ldd	r20, Z+2	; 0x02
     23e:	53 81       	ldd	r21, Z+3	; 0x03
     240:	64 81       	ldd	r22, Z+4	; 0x04
     242:	75 81       	ldd	r23, Z+5	; 0x05
     244:	46 83       	std	Z+6, r20	; 0x06
     246:	57 83       	std	Z+7, r21	; 0x07
     248:	60 87       	std	Z+8, r22	; 0x08
     24a:	71 87       	std	Z+9, r23	; 0x09
	EncoderBuffer[0] = Count;
     24c:	86 89       	ldd	r24, Z+22	; 0x16
     24e:	97 89       	ldd	r25, Z+23	; 0x17
     250:	a0 8d       	ldd	r26, Z+24	; 0x18
     252:	b1 8d       	ldd	r27, Z+25	; 0x19
     254:	82 83       	std	Z+2, r24	; 0x02
     256:	93 83       	std	Z+3, r25	; 0x03
     258:	a4 83       	std	Z+4, r26	; 0x04
     25a:	b5 83       	std	Z+5, r27	; 0x05
	speed   =  ((EncoderBuffer[0]+EncoderBuffer[1]+EncoderBuffer[2]+EncoderBuffer[3])>>2);
     25c:	48 0f       	add	r20, r24
     25e:	59 1f       	adc	r21, r25
     260:	6a 1f       	adc	r22, r26
     262:	7b 1f       	adc	r23, r27
     264:	d7 01       	movw	r26, r14
     266:	c6 01       	movw	r24, r12
     268:	84 0f       	add	r24, r20
     26a:	95 1f       	adc	r25, r21
     26c:	a6 1f       	adc	r26, r22
     26e:	b7 1f       	adc	r27, r23
     270:	80 0f       	add	r24, r16
     272:	91 1f       	adc	r25, r17
     274:	a2 1f       	adc	r26, r18
     276:	b3 1f       	adc	r27, r19
     278:	b5 95       	asr	r27
     27a:	a7 95       	ror	r26
     27c:	97 95       	ror	r25
     27e:	87 95       	ror	r24
     280:	b5 95       	asr	r27
     282:	a7 95       	ror	r26
     284:	97 95       	ror	r25
     286:	87 95       	ror	r24
     288:	82 8b       	std	Z+18, r24	; 0x12
     28a:	93 8b       	std	Z+19, r25	; 0x13
     28c:	a4 8b       	std	Z+20, r26	; 0x14
     28e:	b5 8b       	std	Z+21, r27	; 0x15
	Count = 0;
     290:	16 8a       	std	Z+22, r1	; 0x16
     292:	17 8a       	std	Z+23, r1	; 0x17
     294:	10 8e       	std	Z+24, r1	; 0x18
     296:	11 8e       	std	Z+25, r1	; 0x19
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	ef 90       	pop	r14
     2a0:	df 90       	pop	r13
     2a2:	cf 90       	pop	r12
     2a4:	08 95       	ret

000002a6 <main>:

unsigned char data;

int main(void)
{
	M.Initialise();
     2a6:	80 e6       	ldi	r24, 0x60	; 96
     2a8:	92 e0       	ldi	r25, 0x02	; 2
     2aa:	ed d1       	rcall	.+986    	; 0x686 <_ZN5Motor10InitialiseEv>
	
	E.Encoder_Initialize();
     2ac:	80 e4       	ldi	r24, 0x40	; 64
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	83 df       	rcall	.-250    	; 0x1b8 <_ZN7Encoder18Encoder_InitializeEv>
	
// 	OUTPUT(Pneumatic);
// 	CLEAR(Pneumatic);
	
	P.Initialize();
     2b2:	81 e1       	ldi	r24, 0x11	; 17
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	2c d2       	rcall	.+1112   	; 0x710 <_ZN3PID10InitializeEv>
	public:
			float lastinput;
			float offset;
			int setPoint;
			void Initialize();
			void Set_Range(float min,float max){minOut=min;maxOut=max;}
     2b8:	e1 e1       	ldi	r30, 0x11	; 17
     2ba:	f2 e0       	ldi	r31, 0x02	; 2
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	a9 e7       	ldi	r26, 0x79	; 121
     2c2:	b3 ec       	ldi	r27, 0xC3	; 195
     2c4:	85 8b       	std	Z+21, r24	; 0x15
     2c6:	96 8b       	std	Z+22, r25	; 0x16
     2c8:	a7 8b       	std	Z+23, r26	; 0x17
     2ca:	b0 8f       	std	Z+24, r27	; 0x18
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	a9 e7       	ldi	r26, 0x79	; 121
     2d2:	b3 e4       	ldi	r27, 0x43	; 67
     2d4:	81 8b       	std	Z+17, r24	; 0x11
     2d6:	92 8b       	std	Z+18, r25	; 0x12
     2d8:	a3 8b       	std	Z+19, r26	; 0x13
     2da:	b4 8b       	std	Z+20, r27	; 0x14
	P.Set_Range(-249,249);
	P.Set_PID(0,0,0);
     2dc:	c1 2c       	mov	r12, r1
     2de:	d1 2c       	mov	r13, r1
     2e0:	76 01       	movw	r14, r12
     2e2:	97 01       	movw	r18, r14
     2e4:	86 01       	movw	r16, r12
     2e6:	b7 01       	movw	r22, r14
     2e8:	a6 01       	movw	r20, r12
     2ea:	cf 01       	movw	r24, r30
     2ec:	33 d2       	rcall	.+1126   	; 0x754 <_ZN3PID7Set_PIDEfff>
		
	
	sei();
     2ee:	78 94       	sei
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
     2f0:	87 e6       	ldi	r24, 0x67	; 103
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	20 d3       	rcall	.+1600   	; 0x936 <_Z10uart0_initj>
	uart2_init(UART_BAUD_SELECT(9600,F_CPU));
     2f6:	87 e6       	ldi	r24, 0x67	; 103
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	d0 d3       	rcall	.+1952   	; 0xa9c <_Z10uart2_initj>
	uart2_puts("Hi there!!!");
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	92 e0       	ldi	r25, 0x02	; 2
     300:	3e d4       	rcall	.+2172   	; 0xb7e <_Z10uart2_putsPKc>
			}
			void SetSetPoint(float x)
			{
				setPoint = x;
			}
			float GetKp(){return kp;}
     302:	c1 e1       	ldi	r28, 0x11	; 17
     304:	d2 e0       	ldi	r29, 0x02	; 2
	int Get_RPM(void);
	int Get_Count(void);
	void Encoder_Increase_Pulse_Counter(void);
	void Encoder_Calculate_RPM_Distance(void);
	void Encoder_update_Speed();
	inline int Encoder_get_speed(){return speed;}
     306:	0f 2e       	mov	r0, r31
     308:	f0 e4       	ldi	r31, 0x40	; 64
     30a:	af 2e       	mov	r10, r31
     30c:	f2 e0       	ldi	r31, 0x02	; 2
     30e:	bf 2e       	mov	r11, r31
     310:	f0 2d       	mov	r31, r0
	
   
    while (1) 
    {
		
		data = uart2_getc();
     312:	dd d3       	rcall	.+1978   	; 0xace <_Z10uart2_getcv>
     314:	80 93 10 02 	sts	0x0210, r24
		switch (data)
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	fc 01       	movw	r30, r24
     31c:	e1 56       	subi	r30, 0x61	; 97
     31e:	f1 09       	sbc	r31, r1
     320:	e7 31       	cpi	r30, 0x17	; 23
     322:	f1 05       	cpc	r31, r1
     324:	08 f0       	brcs	.+2      	; 0x328 <main+0x82>
     326:	d8 c0       	rjmp	.+432    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
     328:	88 27       	eor	r24, r24
     32a:	ee 58       	subi	r30, 0x8E	; 142
     32c:	ff 4f       	sbci	r31, 0xFF	; 255
     32e:	8f 4f       	sbci	r24, 0xFF	; 255
     330:	44 c6       	rjmp	.+3208   	; 0xfba <__tablejump2__>
		{
			case 'p':
			{
				P.SetKp(P.kp + 0.1);
     332:	2d ec       	ldi	r18, 0xCD	; 205
     334:	3c ec       	ldi	r19, 0xCC	; 204
     336:	4c ec       	ldi	r20, 0xCC	; 204
     338:	5d e3       	ldi	r21, 0x3D	; 61
     33a:	69 81       	ldd	r22, Y+1	; 0x01
     33c:	7a 81       	ldd	r23, Y+2	; 0x02
     33e:	8b 81       	ldd	r24, Y+3	; 0x03
     340:	9c 81       	ldd	r25, Y+4	; 0x04
     342:	89 d4       	rcall	.+2322   	; 0xc56 <__addsf3>
     344:	ab 01       	movw	r20, r22
     346:	bc 01       	movw	r22, r24
			int setPoint;
			void Initialize();
			void Set_Range(float min,float max){minOut=min;maxOut=max;}
			void SetKp(float KP)
			{
				kp=KP;
     348:	49 83       	std	Y+1, r20	; 0x01
     34a:	5a 83       	std	Y+2, r21	; 0x02
     34c:	6b 83       	std	Y+3, r22	; 0x03
     34e:	7c 83       	std	Y+4, r23	; 0x04
				Set_PID(kp,ki,kd);
     350:	c9 84       	ldd	r12, Y+9	; 0x09
     352:	da 84       	ldd	r13, Y+10	; 0x0a
     354:	eb 84       	ldd	r14, Y+11	; 0x0b
     356:	fc 84       	ldd	r15, Y+12	; 0x0c
     358:	0d 81       	ldd	r16, Y+5	; 0x05
     35a:	1e 81       	ldd	r17, Y+6	; 0x06
     35c:	2f 81       	ldd	r18, Y+7	; 0x07
     35e:	38 85       	ldd	r19, Y+8	; 0x08
     360:	ce 01       	movw	r24, r28
     362:	f8 d1       	rcall	.+1008   	; 0x754 <_ZN3PID7Set_PIDEfff>
     364:	b9 c0       	rjmp	.+370    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
				break;
			}
			case 'i':
			{
				P.SetKi(P.ki + 0.005);
     366:	2a e0       	ldi	r18, 0x0A	; 10
     368:	37 ed       	ldi	r19, 0xD7	; 215
     36a:	43 ea       	ldi	r20, 0xA3	; 163
     36c:	5b e3       	ldi	r21, 0x3B	; 59
     36e:	6d 81       	ldd	r22, Y+5	; 0x05
     370:	7e 81       	ldd	r23, Y+6	; 0x06
     372:	8f 81       	ldd	r24, Y+7	; 0x07
     374:	98 85       	ldd	r25, Y+8	; 0x08
     376:	6f d4       	rcall	.+2270   	; 0xc56 <__addsf3>
     378:	8b 01       	movw	r16, r22
     37a:	9c 01       	movw	r18, r24
			}
			void SetKi(float KI)
			{
				ki=KI;
     37c:	6d 83       	std	Y+5, r22	; 0x05
     37e:	7e 83       	std	Y+6, r23	; 0x06
     380:	8f 83       	std	Y+7, r24	; 0x07
     382:	98 87       	std	Y+8, r25	; 0x08
				Set_PID(kp,ki,kd);
     384:	c9 84       	ldd	r12, Y+9	; 0x09
     386:	da 84       	ldd	r13, Y+10	; 0x0a
     388:	eb 84       	ldd	r14, Y+11	; 0x0b
     38a:	fc 84       	ldd	r15, Y+12	; 0x0c
     38c:	49 81       	ldd	r20, Y+1	; 0x01
     38e:	5a 81       	ldd	r21, Y+2	; 0x02
     390:	6b 81       	ldd	r22, Y+3	; 0x03
     392:	7c 81       	ldd	r23, Y+4	; 0x04
     394:	ce 01       	movw	r24, r28
     396:	de d1       	rcall	.+956    	; 0x754 <_ZN3PID7Set_PIDEfff>
     398:	9f c0       	rjmp	.+318    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
				break;
			}
			case 'd':
			{
				P.SetKd(P.kd + 0.1);
     39a:	2d ec       	ldi	r18, 0xCD	; 205
     39c:	3c ec       	ldi	r19, 0xCC	; 204
     39e:	4c ec       	ldi	r20, 0xCC	; 204
     3a0:	5d e3       	ldi	r21, 0x3D	; 61
     3a2:	69 85       	ldd	r22, Y+9	; 0x09
     3a4:	7a 85       	ldd	r23, Y+10	; 0x0a
     3a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3a8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3aa:	55 d4       	rcall	.+2218   	; 0xc56 <__addsf3>
     3ac:	6b 01       	movw	r12, r22
     3ae:	7c 01       	movw	r14, r24
			}
			void SetKd(float KD)
			{
				kd=KD;
     3b0:	69 87       	std	Y+9, r22	; 0x09
     3b2:	7a 87       	std	Y+10, r23	; 0x0a
     3b4:	8b 87       	std	Y+11, r24	; 0x0b
     3b6:	9c 87       	std	Y+12, r25	; 0x0c
				Set_PID(kp,ki,kd);
     3b8:	0d 81       	ldd	r16, Y+5	; 0x05
     3ba:	1e 81       	ldd	r17, Y+6	; 0x06
     3bc:	2f 81       	ldd	r18, Y+7	; 0x07
     3be:	38 85       	ldd	r19, Y+8	; 0x08
     3c0:	49 81       	ldd	r20, Y+1	; 0x01
     3c2:	5a 81       	ldd	r21, Y+2	; 0x02
     3c4:	6b 81       	ldd	r22, Y+3	; 0x03
     3c6:	7c 81       	ldd	r23, Y+4	; 0x04
     3c8:	ce 01       	movw	r24, r28
     3ca:	c4 d1       	rcall	.+904    	; 0x754 <_ZN3PID7Set_PIDEfff>
     3cc:	85 c0       	rjmp	.+266    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
				break;
			}
			case 'q':
			{
				P.SetKp(P.kp - 0.1);
     3ce:	2d ec       	ldi	r18, 0xCD	; 205
     3d0:	3c ec       	ldi	r19, 0xCC	; 204
     3d2:	4c ec       	ldi	r20, 0xCC	; 204
     3d4:	5d e3       	ldi	r21, 0x3D	; 61
     3d6:	69 81       	ldd	r22, Y+1	; 0x01
     3d8:	7a 81       	ldd	r23, Y+2	; 0x02
     3da:	8b 81       	ldd	r24, Y+3	; 0x03
     3dc:	9c 81       	ldd	r25, Y+4	; 0x04
     3de:	3a d4       	rcall	.+2164   	; 0xc54 <__subsf3>
     3e0:	ab 01       	movw	r20, r22
     3e2:	bc 01       	movw	r22, r24
			int setPoint;
			void Initialize();
			void Set_Range(float min,float max){minOut=min;maxOut=max;}
			void SetKp(float KP)
			{
				kp=KP;
     3e4:	49 83       	std	Y+1, r20	; 0x01
     3e6:	5a 83       	std	Y+2, r21	; 0x02
     3e8:	6b 83       	std	Y+3, r22	; 0x03
     3ea:	7c 83       	std	Y+4, r23	; 0x04
				Set_PID(kp,ki,kd);
     3ec:	c9 84       	ldd	r12, Y+9	; 0x09
     3ee:	da 84       	ldd	r13, Y+10	; 0x0a
     3f0:	eb 84       	ldd	r14, Y+11	; 0x0b
     3f2:	fc 84       	ldd	r15, Y+12	; 0x0c
     3f4:	0d 81       	ldd	r16, Y+5	; 0x05
     3f6:	1e 81       	ldd	r17, Y+6	; 0x06
     3f8:	2f 81       	ldd	r18, Y+7	; 0x07
     3fa:	38 85       	ldd	r19, Y+8	; 0x08
     3fc:	ce 01       	movw	r24, r28
     3fe:	aa d1       	rcall	.+852    	; 0x754 <_ZN3PID7Set_PIDEfff>
     400:	6b c0       	rjmp	.+214    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
				break;
			}
			
			case 'w':
			{
				P.SetKi(P.ki - 0.005);
     402:	2a e0       	ldi	r18, 0x0A	; 10
     404:	37 ed       	ldi	r19, 0xD7	; 215
     406:	43 ea       	ldi	r20, 0xA3	; 163
     408:	5b e3       	ldi	r21, 0x3B	; 59
     40a:	6d 81       	ldd	r22, Y+5	; 0x05
     40c:	7e 81       	ldd	r23, Y+6	; 0x06
     40e:	8f 81       	ldd	r24, Y+7	; 0x07
     410:	98 85       	ldd	r25, Y+8	; 0x08
     412:	20 d4       	rcall	.+2112   	; 0xc54 <__subsf3>
     414:	8b 01       	movw	r16, r22
     416:	9c 01       	movw	r18, r24
			}
			void SetKi(float KI)
			{
				ki=KI;
     418:	6d 83       	std	Y+5, r22	; 0x05
     41a:	7e 83       	std	Y+6, r23	; 0x06
     41c:	8f 83       	std	Y+7, r24	; 0x07
     41e:	98 87       	std	Y+8, r25	; 0x08
				Set_PID(kp,ki,kd);
     420:	c9 84       	ldd	r12, Y+9	; 0x09
     422:	da 84       	ldd	r13, Y+10	; 0x0a
     424:	eb 84       	ldd	r14, Y+11	; 0x0b
     426:	fc 84       	ldd	r15, Y+12	; 0x0c
     428:	49 81       	ldd	r20, Y+1	; 0x01
     42a:	5a 81       	ldd	r21, Y+2	; 0x02
     42c:	6b 81       	ldd	r22, Y+3	; 0x03
     42e:	7c 81       	ldd	r23, Y+4	; 0x04
     430:	ce 01       	movw	r24, r28
     432:	90 d1       	rcall	.+800    	; 0x754 <_ZN3PID7Set_PIDEfff>
     434:	51 c0       	rjmp	.+162    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
				break;
			}
			case 'e':
			{
				P.SetKd(P.kd - 0.1);
     436:	2d ec       	ldi	r18, 0xCD	; 205
     438:	3c ec       	ldi	r19, 0xCC	; 204
     43a:	4c ec       	ldi	r20, 0xCC	; 204
     43c:	5d e3       	ldi	r21, 0x3D	; 61
     43e:	69 85       	ldd	r22, Y+9	; 0x09
     440:	7a 85       	ldd	r23, Y+10	; 0x0a
     442:	8b 85       	ldd	r24, Y+11	; 0x0b
     444:	9c 85       	ldd	r25, Y+12	; 0x0c
     446:	06 d4       	rcall	.+2060   	; 0xc54 <__subsf3>
     448:	6b 01       	movw	r12, r22
     44a:	7c 01       	movw	r14, r24
			}
			void SetKd(float KD)
			{
				kd=KD;
     44c:	69 87       	std	Y+9, r22	; 0x09
     44e:	7a 87       	std	Y+10, r23	; 0x0a
     450:	8b 87       	std	Y+11, r24	; 0x0b
     452:	9c 87       	std	Y+12, r25	; 0x0c
				Set_PID(kp,ki,kd);
     454:	0d 81       	ldd	r16, Y+5	; 0x05
     456:	1e 81       	ldd	r17, Y+6	; 0x06
     458:	2f 81       	ldd	r18, Y+7	; 0x07
     45a:	38 85       	ldd	r19, Y+8	; 0x08
     45c:	49 81       	ldd	r20, Y+1	; 0x01
     45e:	5a 81       	ldd	r21, Y+2	; 0x02
     460:	6b 81       	ldd	r22, Y+3	; 0x03
     462:	7c 81       	ldd	r23, Y+4	; 0x04
     464:	ce 01       	movw	r24, r28
     466:	76 d1       	rcall	.+748    	; 0x754 <_ZN3PID7Set_PIDEfff>
     468:	37 c0       	rjmp	.+110    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
				break;
			}
		
			case 's':
			{
				P.SetSetPoint(P.setPoint + 10);
     46a:	8d a5       	ldd	r24, Y+45	; 0x2d
     46c:	9e a5       	ldd	r25, Y+46	; 0x2e
     46e:	0a 96       	adiw	r24, 0x0a	; 10
			}
			void SetSetPoint(float x)
			{
				setPoint = x;
     470:	9e a7       	std	Y+46, r25	; 0x2e
     472:	8d a7       	std	Y+45, r24	; 0x2d
     474:	31 c0       	rjmp	.+98     	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
				break;
			}
			case 'a':
			{
				P.SetSetPoint(P.setPoint - 10);
     476:	8d a5       	ldd	r24, Y+45	; 0x2d
     478:	9e a5       	ldd	r25, Y+46	; 0x2e
     47a:	0a 97       	sbiw	r24, 0x0a	; 10
     47c:	9e a7       	std	Y+46, r25	; 0x2e
     47e:	8d a7       	std	Y+45, r24	; 0x2d
     480:	2b c0       	rjmp	.+86     	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
				break;
			}
			case 'b':
			{
				uart2_putint(P.GetKp()*10);
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e2       	ldi	r20, 0x20	; 32
     488:	51 e4       	ldi	r21, 0x41	; 65
     48a:	69 81       	ldd	r22, Y+1	; 0x01
     48c:	7a 81       	ldd	r23, Y+2	; 0x02
     48e:	8b 81       	ldd	r24, Y+3	; 0x03
     490:	9c 81       	ldd	r25, Y+4	; 0x04
     492:	30 d5       	rcall	.+2656   	; 0xef4 <__mulsf3>
     494:	48 d4       	rcall	.+2192   	; 0xd26 <__fixsfsi>
     496:	cb 01       	movw	r24, r22
     498:	4a d3       	rcall	.+1684   	; 0xb2e <_Z12uart2_putinti>
				uart2_putc(' ');
     49a:	80 e2       	ldi	r24, 0x20	; 32
     49c:	33 d3       	rcall	.+1638   	; 0xb04 <_Z10uart2_putch>
				uart2_putint(P.GetKi()*1000);
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	4a e7       	ldi	r20, 0x7A	; 122
     4a4:	54 e4       	ldi	r21, 0x44	; 68
     4a6:	6d 81       	ldd	r22, Y+5	; 0x05
     4a8:	7e 81       	ldd	r23, Y+6	; 0x06
     4aa:	8f 81       	ldd	r24, Y+7	; 0x07
     4ac:	98 85       	ldd	r25, Y+8	; 0x08
     4ae:	22 d5       	rcall	.+2628   	; 0xef4 <__mulsf3>
     4b0:	3a d4       	rcall	.+2164   	; 0xd26 <__fixsfsi>
     4b2:	cb 01       	movw	r24, r22
     4b4:	3c d3       	rcall	.+1656   	; 0xb2e <_Z12uart2_putinti>
				uart2_putc(' ');
     4b6:	80 e2       	ldi	r24, 0x20	; 32
     4b8:	25 d3       	rcall	.+1610   	; 0xb04 <_Z10uart2_putch>
				uart2_putint(P.GetKd() * 10);
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	40 e2       	ldi	r20, 0x20	; 32
     4c0:	51 e4       	ldi	r21, 0x41	; 65
     4c2:	69 85       	ldd	r22, Y+9	; 0x09
     4c4:	7a 85       	ldd	r23, Y+10	; 0x0a
     4c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     4c8:	9c 85       	ldd	r25, Y+12	; 0x0c
     4ca:	14 d5       	rcall	.+2600   	; 0xef4 <__mulsf3>
     4cc:	2c d4       	rcall	.+2136   	; 0xd26 <__fixsfsi>
     4ce:	cb 01       	movw	r24, r22
     4d0:	2e d3       	rcall	.+1628   	; 0xb2e <_Z12uart2_putinti>
				uart2_puts("\r\n");
     4d2:	8c e0       	ldi	r24, 0x0C	; 12
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	53 d3       	rcall	.+1702   	; 0xb7e <_Z10uart2_putsPKc>
// 				break;
// 			}
			
				default:break;
		}
		data = 0;
     4d8:	10 92 10 02 	sts	0x0210, r1
		
		if (P.PID_Flag == true)
     4dc:	88 81       	ld	r24, Y
     4de:	88 23       	and	r24, r24
     4e0:	81 f0       	breq	.+32     	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
		{
			M.SetOcrValue(P.Compute_PID(E.Encoder_get_speed()));
     4e2:	f5 01       	movw	r30, r10
     4e4:	62 89       	ldd	r22, Z+18	; 0x12
     4e6:	73 89       	ldd	r23, Z+19	; 0x13
     4e8:	07 2e       	mov	r0, r23
     4ea:	00 0c       	add	r0, r0
     4ec:	88 0b       	sbc	r24, r24
     4ee:	99 0b       	sbc	r25, r25
     4f0:	4d d4       	rcall	.+2202   	; 0xd8c <__floatsisf>
     4f2:	ab 01       	movw	r20, r22
     4f4:	bc 01       	movw	r22, r24
     4f6:	ce 01       	movw	r24, r28
     4f8:	47 d1       	rcall	.+654    	; 0x788 <_ZN3PID11Compute_PIDEf>
     4fa:	15 d4       	rcall	.+2090   	; 0xd26 <__fixsfsi>
     4fc:	80 e6       	ldi	r24, 0x60	; 96
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	a2 d0       	rcall	.+324    	; 0x646 <_ZN5Motor11SetOcrValueEi>

		}
		
		
		uart0_putint(-120);
     502:	88 e8       	ldi	r24, 0x88	; 136
     504:	9f ef       	ldi	r25, 0xFF	; 255
     506:	45 d2       	rcall	.+1162   	; 0x992 <_Z12uart0_putinti>
		uart0_putc(' ');
     508:	80 e2       	ldi	r24, 0x20	; 32
     50a:	2e d2       	rcall	.+1116   	; 0x968 <_Z10uart0_putch>
		uart0_putint(120);
     50c:	88 e7       	ldi	r24, 0x78	; 120
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	40 d2       	rcall	.+1152   	; 0x992 <_Z12uart0_putinti>
		uart0_putc(' ');
     512:	80 e2       	ldi	r24, 0x20	; 32
     514:	29 d2       	rcall	.+1106   	; 0x968 <_Z10uart0_putch>
		uart0_putint(P.setPoint);
     516:	8d a5       	ldd	r24, Y+45	; 0x2d
     518:	9e a5       	ldd	r25, Y+46	; 0x2e
     51a:	3b d2       	rcall	.+1142   	; 0x992 <_Z12uart0_putinti>
// 		uart0_putc(' ');
// 		uart0_putint(E.Count);
		uart0_putc(' ');
     51c:	80 e2       	ldi	r24, 0x20	; 32
     51e:	24 d2       	rcall	.+1096   	; 0x968 <_Z10uart0_putch>
		uart0_putint(E.Encoder_get_speed());
     520:	f5 01       	movw	r30, r10
     522:	82 89       	ldd	r24, Z+18	; 0x12
     524:	93 89       	ldd	r25, Z+19	; 0x13
     526:	35 d2       	rcall	.+1130   	; 0x992 <_Z12uart0_putinti>
		uart0_putc('\n');
     528:	8a e0       	ldi	r24, 0x0A	; 10
     52a:	1e d2       	rcall	.+1084   	; 0x968 <_Z10uart0_putch>

#define Pneumatic  L,0

unsigned char data;

int main(void)
     52c:	f2 ce       	rjmp	.-540    	; 0x312 <main+0x6c>

0000052e <__vector_21>:
		
    }
}

ISR(TIMER0_COMPA_vect)
{
     52e:	1f 92       	push	r1
     530:	0f 92       	push	r0
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	0f 92       	push	r0
     536:	11 24       	eor	r1, r1
     538:	0b b6       	in	r0, 0x3b	; 59
     53a:	0f 92       	push	r0
     53c:	2f 93       	push	r18
     53e:	3f 93       	push	r19
     540:	4f 93       	push	r20
     542:	5f 93       	push	r21
     544:	6f 93       	push	r22
     546:	7f 93       	push	r23
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	af 93       	push	r26
     54e:	bf 93       	push	r27
     550:	ef 93       	push	r30
     552:	ff 93       	push	r31
	P.PID_Flag = true;
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	80 93 11 02 	sts	0x0211, r24
	E.Encoder_update_Speed();
     55a:	80 e4       	ldi	r24, 0x40	; 64
     55c:	92 e0       	ldi	r25, 0x02	; 2
     55e:	57 de       	rcall	.-850    	; 0x20e <_ZN7Encoder20Encoder_update_SpeedEv>
}
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	bf 91       	pop	r27
     566:	af 91       	pop	r26
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	7f 91       	pop	r23
     56e:	6f 91       	pop	r22
     570:	5f 91       	pop	r21
     572:	4f 91       	pop	r20
     574:	3f 91       	pop	r19
     576:	2f 91       	pop	r18
     578:	0f 90       	pop	r0
     57a:	0b be       	out	0x3b, r0	; 59
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <__vector_1>:

ISR(ENCODER_INTERRUPT_VECT)
{
     586:	1f 92       	push	r1
     588:	0f 92       	push	r0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	0f 92       	push	r0
     58e:	11 24       	eor	r1, r1
     590:	0b b6       	in	r0, 0x3b	; 59
     592:	0f 92       	push	r0
     594:	2f 93       	push	r18
     596:	3f 93       	push	r19
     598:	4f 93       	push	r20
     59a:	5f 93       	push	r21
     59c:	6f 93       	push	r22
     59e:	7f 93       	push	r23
     5a0:	8f 93       	push	r24
     5a2:	9f 93       	push	r25
     5a4:	af 93       	push	r26
     5a6:	bf 93       	push	r27
     5a8:	ef 93       	push	r30
     5aa:	ff 93       	push	r31
	E.Encoder_Increase_Pulse_Counter();
     5ac:	80 e4       	ldi	r24, 0x40	; 64
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	0e de       	rcall	.-996    	; 0x1ce <_ZN7Encoder30Encoder_Increase_Pulse_CounterEv>
     5b2:	ff 91       	pop	r31
     5b4:	ef 91       	pop	r30
     5b6:	bf 91       	pop	r27
     5b8:	af 91       	pop	r26
     5ba:	9f 91       	pop	r25
     5bc:	8f 91       	pop	r24
     5be:	7f 91       	pop	r23
     5c0:	6f 91       	pop	r22
     5c2:	5f 91       	pop	r21
     5c4:	4f 91       	pop	r20
     5c6:	3f 91       	pop	r19
     5c8:	2f 91       	pop	r18
     5ca:	0f 90       	pop	r0
     5cc:	0b be       	out	0x3b, r0	; 59
     5ce:	0f 90       	pop	r0
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	0f 90       	pop	r0
     5d4:	1f 90       	pop	r1
     5d6:	18 95       	reti

000005d8 <_GLOBAL__sub_I_M>:
#include "Motor.h"
#include "PID.h"


Motor   M;
Encoder E;
     5d8:	80 e4       	ldi	r24, 0x40	; 64
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	ca cd       	rjmp	.-1132   	; 0x172 <_ZN7EncoderC1Ev>
     5de:	08 95       	ret

000005e0 <_ZN5Motor7InitPWMEv>:

}

void Motor::InitPWM()
{
		OUTPUT(DD_F1);
     5e0:	e1 e0       	ldi	r30, 0x01	; 1
     5e2:	f1 e0       	ldi	r31, 0x01	; 1
     5e4:	80 81       	ld	r24, Z
     5e6:	80 64       	ori	r24, 0x40	; 64
     5e8:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
     5ea:	26 9a       	sbi	0x04, 6	; 4

		OUTPUT(DD_PWM1);
     5ec:	80 81       	ld	r24, Z
     5ee:	80 62       	ori	r24, 0x20	; 32
     5f0:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );												    // Clear on Compare Match
     5f2:	e0 ea       	ldi	r30, 0xA0	; 160
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	8a 60       	ori	r24, 0x0A	; 10
     5fa:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
     5fc:	e1 ea       	ldi	r30, 0xA1	; 161
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	8a 61       	ori	r24, 0x1A	; 26
     604:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
     606:	89 ef       	ldi	r24, 0xF9	; 249
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	90 93 a7 00 	sts	0x00A7, r25
     60e:	80 93 a6 00 	sts	0x00A6, r24
     612:	08 95       	ret

00000614 <_ZN5Motor19SetForwardDirectionEv>:
}

void Motor::SetForwardDirection()
{
	SET (DD_F1);
     614:	e2 e0       	ldi	r30, 0x02	; 2
     616:	f1 e0       	ldi	r31, 0x01	; 1
     618:	80 81       	ld	r24, Z
     61a:	80 64       	ori	r24, 0x40	; 64
     61c:	80 83       	st	Z, r24
	CLEAR	(DD_B1);
     61e:	2e 98       	cbi	0x05, 6	; 5
     620:	08 95       	ret

00000622 <_ZN5Motor19SetReverseDirectionEv>:
}
void Motor::SetReverseDirection()
{
	CLEAR	(DD_F1);
     622:	e2 e0       	ldi	r30, 0x02	; 2
     624:	f1 e0       	ldi	r31, 0x01	; 1
     626:	80 81       	ld	r24, Z
     628:	8f 7b       	andi	r24, 0xBF	; 191
     62a:	80 83       	st	Z, r24
	SET (DD_B1);
     62c:	2e 9a       	sbi	0x05, 6	; 5
     62e:	08 95       	ret

00000630 <_ZN5Motor9StopMotorEv>:
}

void Motor::StopMotor()
{
	SET	(DD_F1);
     630:	e2 e0       	ldi	r30, 0x02	; 2
     632:	f1 e0       	ldi	r31, 0x01	; 1
     634:	80 81       	ld	r24, Z
     636:	80 64       	ori	r24, 0x40	; 64
     638:	80 83       	st	Z, r24
	SET	(DD_B1);
     63a:	2e 9a       	sbi	0x05, 6	; 5

	PWM_OCR1 = 0;	
     63c:	10 92 ad 00 	sts	0x00AD, r1
     640:	10 92 ac 00 	sts	0x00AC, r1
     644:	08 95       	ret

00000646 <_ZN5Motor11SetOcrValueEi>:
}


void Motor::SetOcrValue(int Ocr)
{
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	8c 01       	movw	r16, r24
     650:	eb 01       	movw	r28, r22
    if (Ocr > 0)
     652:	1c 16       	cp	r1, r28
     654:	1d 06       	cpc	r1, r29
     656:	0c f4       	brge	.+2      	; 0x65a <_ZN5Motor11SetOcrValueEi+0x14>
		//SetReverseDirection();
		SetForwardDirection();
     658:	dd df       	rcall	.-70     	; 0x614 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
     65a:	c9 3f       	cpi	r28, 0xF9	; 249
     65c:	d1 05       	cpc	r29, r1
     65e:	44 f4       	brge	.+16     	; 0x670 <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
		
	if(Ocr < 0)
     660:	dd 23       	and	r29, r29
     662:	44 f4       	brge	.+16     	; 0x674 <_ZN5Motor11SetOcrValueEi+0x2e>
	 {
		Ocr = -Ocr;
     664:	d1 95       	neg	r29
     666:	c1 95       	neg	r28
     668:	d1 09       	sbc	r29, r1
		//SetForwardDirection();
		SetReverseDirection();   
     66a:	c8 01       	movw	r24, r16
     66c:	da df       	rcall	.-76     	; 0x622 <_ZN5Motor19SetReverseDirectionEv>
     66e:	02 c0       	rjmp	.+4      	; 0x674 <_ZN5Motor11SetOcrValueEi+0x2e>
{
    if (Ocr > 0)
		//SetReverseDirection();
		SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
     670:	c9 ef       	ldi	r28, 0xF9	; 249
     672:	d0 e0       	ldi	r29, 0x00	; 0
	 {
		Ocr = -Ocr;
		//SetForwardDirection();
		SetReverseDirection();   
	 }
	PWM_OCR1	= Ocr;
     674:	d0 93 ad 00 	sts	0x00AD, r29
     678:	c0 93 ac 00 	sts	0x00AC, r28
		
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <_ZN5Motor10InitialiseEv>:
#include "Motor.h"



void Motor::Initialise()
{
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	ec 01       	movw	r28, r24
	InitPWM();
     68c:	a9 df       	rcall	.-174    	; 0x5e0 <_ZN5Motor7InitPWMEv>

	StopMotor();
     68e:	ce 01       	movw	r24, r28
     690:	cf df       	rcall	.-98     	; 0x630 <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	ce 01       	movw	r24, r28
     698:	d6 df       	rcall	.-84     	; 0x646 <_ZN5Motor11SetOcrValueEi>

}
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <_Z9constrainRfff>:
 */  
#include "PID.h"
#include "headers.h"

void constrain(float &val,float minVal,float maxVal)
{
     6a0:	8f 92       	push	r8
     6a2:	9f 92       	push	r9
     6a4:	af 92       	push	r10
     6a6:	bf 92       	push	r11
     6a8:	cf 92       	push	r12
     6aa:	df 92       	push	r13
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	ec 01       	movw	r28, r24
     6ba:	4a 01       	movw	r8, r20
     6bc:	5b 01       	movw	r10, r22
     6be:	68 01       	movw	r12, r16
     6c0:	79 01       	movw	r14, r18
	if(val < minVal)
     6c2:	9a 01       	movw	r18, r20
     6c4:	ab 01       	movw	r20, r22
     6c6:	68 81       	ld	r22, Y
     6c8:	79 81       	ldd	r23, Y+1	; 0x01
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	9b 81       	ldd	r25, Y+3	; 0x03
     6ce:	27 d3       	rcall	.+1614   	; 0xd1e <__cmpsf2>
     6d0:	88 23       	and	r24, r24
     6d2:	24 f4       	brge	.+8      	; 0x6dc <_Z9constrainRfff+0x3c>
		val = minVal;
     6d4:	88 82       	st	Y, r8
     6d6:	99 82       	std	Y+1, r9	; 0x01
     6d8:	aa 82       	std	Y+2, r10	; 0x02
     6da:	bb 82       	std	Y+3, r11	; 0x03
	if(val > maxVal)
     6dc:	a7 01       	movw	r20, r14
     6de:	96 01       	movw	r18, r12
     6e0:	68 81       	ld	r22, Y
     6e2:	79 81       	ldd	r23, Y+1	; 0x01
     6e4:	8a 81       	ldd	r24, Y+2	; 0x02
     6e6:	9b 81       	ldd	r25, Y+3	; 0x03
     6e8:	01 d4       	rcall	.+2050   	; 0xeec <__gesf2>
     6ea:	18 16       	cp	r1, r24
     6ec:	24 f4       	brge	.+8      	; 0x6f6 <_Z9constrainRfff+0x56>
		val = maxVal;
     6ee:	c8 82       	st	Y, r12
     6f0:	d9 82       	std	Y+1, r13	; 0x01
     6f2:	ea 82       	std	Y+2, r14	; 0x02
     6f4:	fb 82       	std	Y+3, r15	; 0x03
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	df 90       	pop	r13
     704:	cf 90       	pop	r12
     706:	bf 90       	pop	r11
     708:	af 90       	pop	r10
     70a:	9f 90       	pop	r9
     70c:	8f 90       	pop	r8
     70e:	08 95       	ret

00000710 <_ZN3PID10InitializeEv>:

void PID::Initialize()
{
     710:	fc 01       	movw	r30, r24
	kp         =  0;
     712:	11 82       	std	Z+1, r1	; 0x01
     714:	12 82       	std	Z+2, r1	; 0x02
     716:	13 82       	std	Z+3, r1	; 0x03
     718:	14 82       	std	Z+4, r1	; 0x04
	ki         =  0;
     71a:	15 82       	std	Z+5, r1	; 0x05
     71c:	16 82       	std	Z+6, r1	; 0x06
     71e:	17 82       	std	Z+7, r1	; 0x07
     720:	10 86       	std	Z+8, r1	; 0x08
	kd         =  0;
     722:	11 86       	std	Z+9, r1	; 0x09
     724:	12 86       	std	Z+10, r1	; 0x0a
     726:	13 86       	std	Z+11, r1	; 0x0b
     728:	14 86       	std	Z+12, r1	; 0x0c
	error      =  0;
     72a:	11 8e       	std	Z+25, r1	; 0x19
     72c:	12 8e       	std	Z+26, r1	; 0x1a
     72e:	13 8e       	std	Z+27, r1	; 0x1b
     730:	14 8e       	std	Z+28, r1	; 0x1c
	errSum     =  0;
     732:	15 86       	std	Z+13, r1	; 0x0d
     734:	16 86       	std	Z+14, r1	; 0x0e
     736:	17 86       	std	Z+15, r1	; 0x0f
     738:	10 8a       	std	Z+16, r1	; 0x10
	lastinput  =  0;
     73a:	15 a2       	std	Z+37, r1	; 0x25
     73c:	16 a2       	std	Z+38, r1	; 0x26
     73e:	17 a2       	std	Z+39, r1	; 0x27
     740:	10 a6       	std	Z+40, r1	; 0x28
	offset     =  0;
     742:	11 a6       	std	Z+41, r1	; 0x29
     744:	12 a6       	std	Z+42, r1	; 0x2a
     746:	13 a6       	std	Z+43, r1	; 0x2b
     748:	14 a6       	std	Z+44, r1	; 0x2c
	setPoint   =  0;
     74a:	16 a6       	std	Z+46, r1	; 0x2e
     74c:	15 a6       	std	Z+45, r1	; 0x2d
	PID_Flag   =  true;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 83       	st	Z, r24
     752:	08 95       	ret

00000754 <_ZN3PID7Set_PIDEfff>:
}
void PID::Set_PID(float KP,float KI,float KD)
{
     754:	cf 92       	push	r12
     756:	df 92       	push	r13
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	fc 01       	movw	r30, r24
	kp = KP;
     762:	41 83       	std	Z+1, r20	; 0x01
     764:	52 83       	std	Z+2, r21	; 0x02
     766:	63 83       	std	Z+3, r22	; 0x03
     768:	74 83       	std	Z+4, r23	; 0x04
	ki = KI;
     76a:	05 83       	std	Z+5, r16	; 0x05
     76c:	16 83       	std	Z+6, r17	; 0x06
     76e:	27 83       	std	Z+7, r18	; 0x07
     770:	30 87       	std	Z+8, r19	; 0x08
	kd = KD;
     772:	c1 86       	std	Z+9, r12	; 0x09
     774:	d2 86       	std	Z+10, r13	; 0x0a
     776:	e3 86       	std	Z+11, r14	; 0x0b
     778:	f4 86       	std	Z+12, r15	; 0x0c
}
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	08 95       	ret

00000788 <_ZN3PID11Compute_PIDEf>:
float PID::Compute_PID(float input)
{
     788:	4f 92       	push	r4
     78a:	5f 92       	push	r5
     78c:	6f 92       	push	r6
     78e:	7f 92       	push	r7
     790:	8f 92       	push	r8
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
     7aa:	6a 01       	movw	r12, r20
     7ac:	7b 01       	movw	r14, r22
	error   = setPoint - input;
     7ae:	6d a5       	ldd	r22, Y+45	; 0x2d
     7b0:	7e a5       	ldd	r23, Y+46	; 0x2e
     7b2:	07 2e       	mov	r0, r23
     7b4:	00 0c       	add	r0, r0
     7b6:	88 0b       	sbc	r24, r24
     7b8:	99 0b       	sbc	r25, r25
     7ba:	e8 d2       	rcall	.+1488   	; 0xd8c <__floatsisf>
     7bc:	a7 01       	movw	r20, r14
     7be:	96 01       	movw	r18, r12
     7c0:	49 d2       	rcall	.+1170   	; 0xc54 <__subsf3>
     7c2:	4b 01       	movw	r8, r22
     7c4:	5c 01       	movw	r10, r24
     7c6:	69 8f       	std	Y+25, r22	; 0x19
     7c8:	7a 8f       	std	Y+26, r23	; 0x1a
     7ca:	8b 8f       	std	Y+27, r24	; 0x1b
     7cc:	9c 8f       	std	Y+28, r25	; 0x1c
// 	{
// 		Iterm = 0;
// 	}
// 	else
// 	{
 		Iterm += (ki*error);
     7ce:	2d 81       	ldd	r18, Y+5	; 0x05
     7d0:	3e 81       	ldd	r19, Y+6	; 0x06
     7d2:	4f 81       	ldd	r20, Y+7	; 0x07
     7d4:	58 85       	ldd	r21, Y+8	; 0x08
     7d6:	8e d3       	rcall	.+1820   	; 0xef4 <__mulsf3>
     7d8:	29 a1       	ldd	r18, Y+33	; 0x21
     7da:	3a a1       	ldd	r19, Y+34	; 0x22
     7dc:	4b a1       	ldd	r20, Y+35	; 0x23
     7de:	5c a1       	ldd	r21, Y+36	; 0x24
     7e0:	3a d2       	rcall	.+1140   	; 0xc56 <__addsf3>
     7e2:	2b 01       	movw	r4, r22
     7e4:	3c 01       	movw	r6, r24
     7e6:	69 a3       	std	Y+33, r22	; 0x21
     7e8:	7a a3       	std	Y+34, r23	; 0x22
     7ea:	8b a3       	std	Y+35, r24	; 0x23
     7ec:	9c a3       	std	Y+36, r25	; 0x24
	float dErr = (input - lastinput);
	
// 	if (error == 0)
// 		output = 0;
// 	else
		output = kp * error + Iterm - kd * dErr;
     7ee:	29 81       	ldd	r18, Y+1	; 0x01
     7f0:	3a 81       	ldd	r19, Y+2	; 0x02
     7f2:	4b 81       	ldd	r20, Y+3	; 0x03
     7f4:	5c 81       	ldd	r21, Y+4	; 0x04
     7f6:	c5 01       	movw	r24, r10
     7f8:	b4 01       	movw	r22, r8
     7fa:	7c d3       	rcall	.+1784   	; 0xef4 <__mulsf3>
     7fc:	9b 01       	movw	r18, r22
     7fe:	ac 01       	movw	r20, r24
     800:	c3 01       	movw	r24, r6
     802:	b2 01       	movw	r22, r4
     804:	28 d2       	rcall	.+1104   	; 0xc56 <__addsf3>
     806:	4b 01       	movw	r8, r22
     808:	5c 01       	movw	r10, r24
 		Iterm += (ki*error);
// 	}
	
	//constrain(Iterm,-50,50);
	
	float dErr = (input - lastinput);
     80a:	2d a1       	ldd	r18, Y+37	; 0x25
     80c:	3e a1       	ldd	r19, Y+38	; 0x26
     80e:	4f a1       	ldd	r20, Y+39	; 0x27
     810:	58 a5       	ldd	r21, Y+40	; 0x28
     812:	c7 01       	movw	r24, r14
     814:	b6 01       	movw	r22, r12
     816:	1e d2       	rcall	.+1084   	; 0xc54 <__subsf3>
	
// 	if (error == 0)
// 		output = 0;
// 	else
		output = kp * error + Iterm - kd * dErr;
     818:	29 85       	ldd	r18, Y+9	; 0x09
     81a:	3a 85       	ldd	r19, Y+10	; 0x0a
     81c:	4b 85       	ldd	r20, Y+11	; 0x0b
     81e:	5c 85       	ldd	r21, Y+12	; 0x0c
     820:	69 d3       	rcall	.+1746   	; 0xef4 <__mulsf3>
     822:	9b 01       	movw	r18, r22
     824:	ac 01       	movw	r20, r24
     826:	c5 01       	movw	r24, r10
     828:	b4 01       	movw	r22, r8
     82a:	14 d2       	rcall	.+1064   	; 0xc54 <__subsf3>
     82c:	6d 8f       	std	Y+29, r22	; 0x1d
     82e:	7e 8f       	std	Y+30, r23	; 0x1e
     830:	8f 8f       	std	Y+31, r24	; 0x1f
     832:	98 a3       	std	Y+32, r25	; 0x20
	
	constrain(output,minOut,maxOut);
     834:	09 89       	ldd	r16, Y+17	; 0x11
     836:	1a 89       	ldd	r17, Y+18	; 0x12
     838:	2b 89       	ldd	r18, Y+19	; 0x13
     83a:	3c 89       	ldd	r19, Y+20	; 0x14
     83c:	4d 89       	ldd	r20, Y+21	; 0x15
     83e:	5e 89       	ldd	r21, Y+22	; 0x16
     840:	6f 89       	ldd	r22, Y+23	; 0x17
     842:	78 8d       	ldd	r23, Y+24	; 0x18
     844:	ce 01       	movw	r24, r28
     846:	4d 96       	adiw	r24, 0x1d	; 29
     848:	2b df       	rcall	.-426    	; 0x6a0 <_Z9constrainRfff>
	//Remember some variables for next time
	lastinput = input;
     84a:	cd a2       	std	Y+37, r12	; 0x25
     84c:	de a2       	std	Y+38, r13	; 0x26
     84e:	ef a2       	std	Y+39, r14	; 0x27
     850:	f8 a6       	std	Y+40, r15	; 0x28
	return output;
     852:	6d 8d       	ldd	r22, Y+29	; 0x1d
     854:	7e 8d       	ldd	r23, Y+30	; 0x1e
     856:	8f 8d       	ldd	r24, Y+31	; 0x1f
     858:	98 a1       	ldd	r25, Y+32	; 0x20
}
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	af 90       	pop	r10
     86e:	9f 90       	pop	r9
     870:	8f 90       	pop	r8
     872:	7f 90       	pop	r7
     874:	6f 90       	pop	r6
     876:	5f 90       	pop	r5
     878:	4f 90       	pop	r4
     87a:	08 95       	ret

0000087c <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	0b b6       	in	r0, 0x3b	; 59
     888:	0f 92       	push	r0
     88a:	2f 93       	push	r18
     88c:	8f 93       	push	r24
     88e:	9f 93       	push	r25
     890:	ef 93       	push	r30
     892:	ff 93       	push	r31
     894:	80 91 c0 00 	lds	r24, 0x00C0
     898:	20 91 c6 00 	lds	r18, 0x00C6
     89c:	88 71       	andi	r24, 0x18	; 24
     89e:	e0 91 ed 02 	lds	r30, 0x02ED
     8a2:	ef 5f       	subi	r30, 0xFF	; 255
     8a4:	ef 71       	andi	r30, 0x1F	; 31
     8a6:	90 91 ec 02 	lds	r25, 0x02EC
     8aa:	e9 17       	cp	r30, r25
     8ac:	39 f0       	breq	.+14     	; 0x8bc <__vector_25+0x40>
     8ae:	e0 93 ed 02 	sts	0x02ED, r30
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	e0 51       	subi	r30, 0x10	; 16
     8b6:	fd 4f       	sbci	r31, 0xFD	; 253
     8b8:	20 83       	st	Z, r18
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <__vector_25+0x42>
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	80 93 eb 02 	sts	0x02EB, r24
     8c2:	ff 91       	pop	r31
     8c4:	ef 91       	pop	r30
     8c6:	9f 91       	pop	r25
     8c8:	8f 91       	pop	r24
     8ca:	2f 91       	pop	r18
     8cc:	0f 90       	pop	r0
     8ce:	0b be       	out	0x3b, r0	; 59
     8d0:	0f 90       	pop	r0
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	0f 90       	pop	r0
     8d6:	1f 90       	pop	r1
     8d8:	18 95       	reti

000008da <__vector_26>:
     8da:	1f 92       	push	r1
     8dc:	0f 92       	push	r0
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	0f 92       	push	r0
     8e2:	11 24       	eor	r1, r1
     8e4:	0b b6       	in	r0, 0x3b	; 59
     8e6:	0f 92       	push	r0
     8e8:	8f 93       	push	r24
     8ea:	9f 93       	push	r25
     8ec:	ef 93       	push	r30
     8ee:	ff 93       	push	r31
     8f0:	90 91 ef 02 	lds	r25, 0x02EF
     8f4:	80 91 ee 02 	lds	r24, 0x02EE
     8f8:	98 17       	cp	r25, r24
     8fa:	69 f0       	breq	.+26     	; 0x916 <__vector_26+0x3c>
     8fc:	e0 91 ee 02 	lds	r30, 0x02EE
     900:	ef 5f       	subi	r30, 0xFF	; 255
     902:	ef 71       	andi	r30, 0x1F	; 31
     904:	e0 93 ee 02 	sts	0x02EE, r30
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	e0 5f       	subi	r30, 0xF0	; 240
     90c:	fc 4f       	sbci	r31, 0xFC	; 252
     90e:	80 81       	ld	r24, Z
     910:	80 93 c6 00 	sts	0x00C6, r24
     914:	05 c0       	rjmp	.+10     	; 0x920 <__vector_26+0x46>
     916:	e1 ec       	ldi	r30, 0xC1	; 193
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	8f 7d       	andi	r24, 0xDF	; 223
     91e:	80 83       	st	Z, r24
     920:	ff 91       	pop	r31
     922:	ef 91       	pop	r30
     924:	9f 91       	pop	r25
     926:	8f 91       	pop	r24
     928:	0f 90       	pop	r0
     92a:	0b be       	out	0x3b, r0	; 59
     92c:	0f 90       	pop	r0
     92e:	0f be       	out	0x3f, r0	; 63
     930:	0f 90       	pop	r0
     932:	1f 90       	pop	r1
     934:	18 95       	reti

00000936 <_Z10uart0_initj>:
     936:	10 92 ef 02 	sts	0x02EF, r1
     93a:	10 92 ee 02 	sts	0x02EE, r1
     93e:	10 92 ed 02 	sts	0x02ED, r1
     942:	10 92 ec 02 	sts	0x02EC, r1
     946:	99 23       	and	r25, r25
     948:	24 f4       	brge	.+8      	; 0x952 <_Z10uart0_initj+0x1c>
     94a:	22 e0       	ldi	r18, 0x02	; 2
     94c:	20 93 c0 00 	sts	0x00C0, r18
     950:	9f 77       	andi	r25, 0x7F	; 127
     952:	90 93 c5 00 	sts	0x00C5, r25
     956:	80 93 c4 00 	sts	0x00C4, r24
     95a:	88 e9       	ldi	r24, 0x98	; 152
     95c:	80 93 c1 00 	sts	0x00C1, r24
     960:	86 e0       	ldi	r24, 0x06	; 6
     962:	80 93 c2 00 	sts	0x00C2, r24
     966:	08 95       	ret

00000968 <_Z10uart0_putch>:
     968:	20 91 ef 02 	lds	r18, 0x02EF
     96c:	2f 5f       	subi	r18, 0xFF	; 255
     96e:	2f 71       	andi	r18, 0x1F	; 31
     970:	90 91 ee 02 	lds	r25, 0x02EE
     974:	29 17       	cp	r18, r25
     976:	e1 f3       	breq	.-8      	; 0x970 <_Z10uart0_putch+0x8>
     978:	e2 2f       	mov	r30, r18
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	e0 5f       	subi	r30, 0xF0	; 240
     97e:	fc 4f       	sbci	r31, 0xFC	; 252
     980:	80 83       	st	Z, r24
     982:	20 93 ef 02 	sts	0x02EF, r18
     986:	e1 ec       	ldi	r30, 0xC1	; 193
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	80 62       	ori	r24, 0x20	; 32
     98e:	80 83       	st	Z, r24
     990:	08 95       	ret

00000992 <_Z12uart0_putinti>:
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	2f 97       	sbiw	r28, 0x0f	; 15
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	4a e0       	ldi	r20, 0x0A	; 10
     9ac:	be 01       	movw	r22, r28
     9ae:	6f 5f       	subi	r22, 0xFF	; 255
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	0b d3       	rcall	.+1558   	; 0xfca <__itoa_ncheck>
     9b4:	89 81       	ldd	r24, Y+1	; 0x01
     9b6:	88 23       	and	r24, r24
     9b8:	49 f0       	breq	.+18     	; 0x9cc <_Z12uart0_putinti+0x3a>
     9ba:	8e 01       	movw	r16, r28
     9bc:	0e 5f       	subi	r16, 0xFE	; 254
     9be:	1f 4f       	sbci	r17, 0xFF	; 255
     9c0:	d3 df       	rcall	.-90     	; 0x968 <_Z10uart0_putch>
     9c2:	f8 01       	movw	r30, r16
     9c4:	81 91       	ld	r24, Z+
     9c6:	8f 01       	movw	r16, r30
     9c8:	81 11       	cpse	r24, r1
     9ca:	fa cf       	rjmp	.-12     	; 0x9c0 <_Z12uart0_putinti+0x2e>
     9cc:	2f 96       	adiw	r28, 0x0f	; 15
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	08 95       	ret

000009e2 <__vector_51>:
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	0b b6       	in	r0, 0x3b	; 59
     9ee:	0f 92       	push	r0
     9f0:	2f 93       	push	r18
     9f2:	8f 93       	push	r24
     9f4:	9f 93       	push	r25
     9f6:	ef 93       	push	r30
     9f8:	ff 93       	push	r31
     9fa:	80 91 d0 00 	lds	r24, 0x00D0
     9fe:	20 91 d6 00 	lds	r18, 0x00D6
     a02:	88 71       	andi	r24, 0x18	; 24
     a04:	e0 91 a8 02 	lds	r30, 0x02A8
     a08:	ef 5f       	subi	r30, 0xFF	; 255
     a0a:	ef 71       	andi	r30, 0x1F	; 31
     a0c:	90 91 a7 02 	lds	r25, 0x02A7
     a10:	e9 17       	cp	r30, r25
     a12:	39 f0       	breq	.+14     	; 0xa22 <__vector_51+0x40>
     a14:	e0 93 a8 02 	sts	0x02A8, r30
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	e5 55       	subi	r30, 0x55	; 85
     a1c:	fd 4f       	sbci	r31, 0xFD	; 253
     a1e:	20 83       	st	Z, r18
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <__vector_51+0x42>
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	80 93 a6 02 	sts	0x02A6, r24
     a28:	ff 91       	pop	r31
     a2a:	ef 91       	pop	r30
     a2c:	9f 91       	pop	r25
     a2e:	8f 91       	pop	r24
     a30:	2f 91       	pop	r18
     a32:	0f 90       	pop	r0
     a34:	0b be       	out	0x3b, r0	; 59
     a36:	0f 90       	pop	r0
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	0f 90       	pop	r0
     a3c:	1f 90       	pop	r1
     a3e:	18 95       	reti

00000a40 <__vector_52>:
     a40:	1f 92       	push	r1
     a42:	0f 92       	push	r0
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	0f 92       	push	r0
     a48:	11 24       	eor	r1, r1
     a4a:	0b b6       	in	r0, 0x3b	; 59
     a4c:	0f 92       	push	r0
     a4e:	8f 93       	push	r24
     a50:	9f 93       	push	r25
     a52:	ef 93       	push	r30
     a54:	ff 93       	push	r31
     a56:	90 91 aa 02 	lds	r25, 0x02AA
     a5a:	80 91 a9 02 	lds	r24, 0x02A9
     a5e:	98 17       	cp	r25, r24
     a60:	69 f0       	breq	.+26     	; 0xa7c <__vector_52+0x3c>
     a62:	e0 91 a9 02 	lds	r30, 0x02A9
     a66:	ef 5f       	subi	r30, 0xFF	; 255
     a68:	ef 71       	andi	r30, 0x1F	; 31
     a6a:	e0 93 a9 02 	sts	0x02A9, r30
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	e5 53       	subi	r30, 0x35	; 53
     a72:	fd 4f       	sbci	r31, 0xFD	; 253
     a74:	80 81       	ld	r24, Z
     a76:	80 93 d6 00 	sts	0x00D6, r24
     a7a:	05 c0       	rjmp	.+10     	; 0xa86 <__vector_52+0x46>
     a7c:	e1 ed       	ldi	r30, 0xD1	; 209
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	8f 7d       	andi	r24, 0xDF	; 223
     a84:	80 83       	st	Z, r24
     a86:	ff 91       	pop	r31
     a88:	ef 91       	pop	r30
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	0f 90       	pop	r0
     a90:	0b be       	out	0x3b, r0	; 59
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	0f 90       	pop	r0
     a98:	1f 90       	pop	r1
     a9a:	18 95       	reti

00000a9c <_Z10uart2_initj>:
     a9c:	10 92 aa 02 	sts	0x02AA, r1
     aa0:	10 92 a9 02 	sts	0x02A9, r1
     aa4:	10 92 a8 02 	sts	0x02A8, r1
     aa8:	10 92 a7 02 	sts	0x02A7, r1
     aac:	99 23       	and	r25, r25
     aae:	24 f4       	brge	.+8      	; 0xab8 <_Z10uart2_initj+0x1c>
     ab0:	22 e0       	ldi	r18, 0x02	; 2
     ab2:	20 93 d0 00 	sts	0x00D0, r18
     ab6:	9f 77       	andi	r25, 0x7F	; 127
     ab8:	90 93 d5 00 	sts	0x00D5, r25
     abc:	80 93 d4 00 	sts	0x00D4, r24
     ac0:	88 e9       	ldi	r24, 0x98	; 152
     ac2:	80 93 d1 00 	sts	0x00D1, r24
     ac6:	86 e0       	ldi	r24, 0x06	; 6
     ac8:	80 93 d2 00 	sts	0x00D2, r24
     acc:	08 95       	ret

00000ace <_Z10uart2_getcv>:
     ace:	90 91 a8 02 	lds	r25, 0x02A8
     ad2:	80 91 a7 02 	lds	r24, 0x02A7
     ad6:	98 17       	cp	r25, r24
     ad8:	91 f0       	breq	.+36     	; 0xafe <_Z10uart2_getcv+0x30>
     ada:	e0 91 a7 02 	lds	r30, 0x02A7
     ade:	ef 5f       	subi	r30, 0xFF	; 255
     ae0:	ef 71       	andi	r30, 0x1F	; 31
     ae2:	e0 93 a7 02 	sts	0x02A7, r30
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	e5 55       	subi	r30, 0x55	; 85
     aea:	fd 4f       	sbci	r31, 0xFD	; 253
     aec:	20 81       	ld	r18, Z
     aee:	80 91 a6 02 	lds	r24, 0x02A6
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	98 2f       	mov	r25, r24
     af6:	88 27       	eor	r24, r24
     af8:	82 0f       	add	r24, r18
     afa:	91 1d       	adc	r25, r1
     afc:	08 95       	ret
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	08 95       	ret

00000b04 <_Z10uart2_putch>:
     b04:	20 91 aa 02 	lds	r18, 0x02AA
     b08:	2f 5f       	subi	r18, 0xFF	; 255
     b0a:	2f 71       	andi	r18, 0x1F	; 31
     b0c:	90 91 a9 02 	lds	r25, 0x02A9
     b10:	29 17       	cp	r18, r25
     b12:	e1 f3       	breq	.-8      	; 0xb0c <_Z10uart2_putch+0x8>
     b14:	e2 2f       	mov	r30, r18
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	e5 53       	subi	r30, 0x35	; 53
     b1a:	fd 4f       	sbci	r31, 0xFD	; 253
     b1c:	80 83       	st	Z, r24
     b1e:	20 93 aa 02 	sts	0x02AA, r18
     b22:	e1 ed       	ldi	r30, 0xD1	; 209
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	80 62       	ori	r24, 0x20	; 32
     b2a:	80 83       	st	Z, r24
     b2c:	08 95       	ret

00000b2e <_Z12uart2_putinti>:
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	2f 97       	sbiw	r28, 0x0f	; 15
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	4a e0       	ldi	r20, 0x0A	; 10
     b48:	be 01       	movw	r22, r28
     b4a:	6f 5f       	subi	r22, 0xFF	; 255
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	3d d2       	rcall	.+1146   	; 0xfca <__itoa_ncheck>
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	88 23       	and	r24, r24
     b54:	49 f0       	breq	.+18     	; 0xb68 <_Z12uart2_putinti+0x3a>
     b56:	8e 01       	movw	r16, r28
     b58:	0e 5f       	subi	r16, 0xFE	; 254
     b5a:	1f 4f       	sbci	r17, 0xFF	; 255
     b5c:	d3 df       	rcall	.-90     	; 0xb04 <_Z10uart2_putch>
     b5e:	f8 01       	movw	r30, r16
     b60:	81 91       	ld	r24, Z+
     b62:	8f 01       	movw	r16, r30
     b64:	81 11       	cpse	r24, r1
     b66:	fa cf       	rjmp	.-12     	; 0xb5c <_Z12uart2_putinti+0x2e>
     b68:	2f 96       	adiw	r28, 0x0f	; 15
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	08 95       	ret

00000b7e <_Z10uart2_putsPKc>:
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	ec 01       	movw	r28, r24
     b84:	88 81       	ld	r24, Y
     b86:	88 23       	and	r24, r24
     b88:	29 f0       	breq	.+10     	; 0xb94 <_Z10uart2_putsPKc+0x16>
     b8a:	21 96       	adiw	r28, 0x01	; 1
     b8c:	bb df       	rcall	.-138    	; 0xb04 <_Z10uart2_putch>
     b8e:	89 91       	ld	r24, Y+
     b90:	81 11       	cpse	r24, r1
     b92:	fc cf       	rjmp	.-8      	; 0xb8c <_Z10uart2_putsPKc+0xe>
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	0b b6       	in	r0, 0x3b	; 59
     ba6:	0f 92       	push	r0
     ba8:	2f 93       	push	r18
     baa:	8f 93       	push	r24
     bac:	9f 93       	push	r25
     bae:	ef 93       	push	r30
     bb0:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
     bb2:	80 91 30 01 	lds	r24, 0x0130
	data = UART3_DATA;
     bb6:	20 91 36 01 	lds	r18, 0x0136
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
     bba:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
     bbc:	e0 91 63 02 	lds	r30, 0x0263
     bc0:	ef 5f       	subi	r30, 0xFF	; 255
     bc2:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
     bc4:	90 91 62 02 	lds	r25, 0x0262
     bc8:	e9 17       	cp	r30, r25
     bca:	39 f0       	breq	.+14     	; 0xbda <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
     bcc:	e0 93 63 02 	sts	0x0263, r30
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	ea 59       	subi	r30, 0x9A	; 154
     bd4:	fd 4f       	sbci	r31, 0xFD	; 253
     bd6:	20 83       	st	Z, r18
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
     bda:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
     bdc:	80 93 61 02 	sts	0x0261, r24
}
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	9f 91       	pop	r25
     be6:	8f 91       	pop	r24
     be8:	2f 91       	pop	r18
     bea:	0f 90       	pop	r0
     bec:	0b be       	out	0x3b, r0	; 59
     bee:	0f 90       	pop	r0
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	0f 90       	pop	r0
     bf4:	1f 90       	pop	r1
     bf6:	18 95       	reti

00000bf8 <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	0b b6       	in	r0, 0x3b	; 59
     c04:	0f 92       	push	r0
     c06:	8f 93       	push	r24
     c08:	9f 93       	push	r25
     c0a:	ef 93       	push	r30
     c0c:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
     c0e:	90 91 65 02 	lds	r25, 0x0265
     c12:	80 91 64 02 	lds	r24, 0x0264
     c16:	98 17       	cp	r25, r24
     c18:	69 f0       	breq	.+26     	; 0xc34 <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
     c1a:	e0 91 64 02 	lds	r30, 0x0264
     c1e:	ef 5f       	subi	r30, 0xFF	; 255
     c20:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
     c22:	e0 93 64 02 	sts	0x0264, r30
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	ea 57       	subi	r30, 0x7A	; 122
     c2a:	fd 4f       	sbci	r31, 0xFD	; 253
     c2c:	80 81       	ld	r24, Z
     c2e:	80 93 36 01 	sts	0x0136, r24
     c32:	05 c0       	rjmp	.+10     	; 0xc3e <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
     c34:	e1 e3       	ldi	r30, 0x31	; 49
     c36:	f1 e0       	ldi	r31, 0x01	; 1
     c38:	80 81       	ld	r24, Z
     c3a:	8f 7d       	andi	r24, 0xDF	; 223
     c3c:	80 83       	st	Z, r24
	}
}
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	9f 91       	pop	r25
     c44:	8f 91       	pop	r24
     c46:	0f 90       	pop	r0
     c48:	0b be       	out	0x3b, r0	; 59
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__subsf3>:
     c54:	50 58       	subi	r21, 0x80	; 128

00000c56 <__addsf3>:
     c56:	bb 27       	eor	r27, r27
     c58:	aa 27       	eor	r26, r26
     c5a:	0e d0       	rcall	.+28     	; 0xc78 <__addsf3x>
     c5c:	0d c1       	rjmp	.+538    	; 0xe78 <__fp_round>
     c5e:	fe d0       	rcall	.+508    	; 0xe5c <__fp_pscA>
     c60:	30 f0       	brcs	.+12     	; 0xc6e <__addsf3+0x18>
     c62:	03 d1       	rcall	.+518    	; 0xe6a <__fp_pscB>
     c64:	20 f0       	brcs	.+8      	; 0xc6e <__addsf3+0x18>
     c66:	31 f4       	brne	.+12     	; 0xc74 <__addsf3+0x1e>
     c68:	9f 3f       	cpi	r25, 0xFF	; 255
     c6a:	11 f4       	brne	.+4      	; 0xc70 <__addsf3+0x1a>
     c6c:	1e f4       	brtc	.+6      	; 0xc74 <__addsf3+0x1e>
     c6e:	f3 c0       	rjmp	.+486    	; 0xe56 <__fp_nan>
     c70:	0e f4       	brtc	.+2      	; 0xc74 <__addsf3+0x1e>
     c72:	e0 95       	com	r30
     c74:	e7 fb       	bst	r30, 7
     c76:	e9 c0       	rjmp	.+466    	; 0xe4a <__fp_inf>

00000c78 <__addsf3x>:
     c78:	e9 2f       	mov	r30, r25
     c7a:	0f d1       	rcall	.+542    	; 0xe9a <__fp_split3>
     c7c:	80 f3       	brcs	.-32     	; 0xc5e <__addsf3+0x8>
     c7e:	ba 17       	cp	r27, r26
     c80:	62 07       	cpc	r22, r18
     c82:	73 07       	cpc	r23, r19
     c84:	84 07       	cpc	r24, r20
     c86:	95 07       	cpc	r25, r21
     c88:	18 f0       	brcs	.+6      	; 0xc90 <__addsf3x+0x18>
     c8a:	71 f4       	brne	.+28     	; 0xca8 <__addsf3x+0x30>
     c8c:	9e f5       	brtc	.+102    	; 0xcf4 <__addsf3x+0x7c>
     c8e:	27 c1       	rjmp	.+590    	; 0xede <__fp_zero>
     c90:	0e f4       	brtc	.+2      	; 0xc94 <__addsf3x+0x1c>
     c92:	e0 95       	com	r30
     c94:	0b 2e       	mov	r0, r27
     c96:	ba 2f       	mov	r27, r26
     c98:	a0 2d       	mov	r26, r0
     c9a:	0b 01       	movw	r0, r22
     c9c:	b9 01       	movw	r22, r18
     c9e:	90 01       	movw	r18, r0
     ca0:	0c 01       	movw	r0, r24
     ca2:	ca 01       	movw	r24, r20
     ca4:	a0 01       	movw	r20, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	ff 27       	eor	r31, r31
     caa:	59 1b       	sub	r21, r25
     cac:	99 f0       	breq	.+38     	; 0xcd4 <__addsf3x+0x5c>
     cae:	59 3f       	cpi	r21, 0xF9	; 249
     cb0:	50 f4       	brcc	.+20     	; 0xcc6 <__addsf3x+0x4e>
     cb2:	50 3e       	cpi	r21, 0xE0	; 224
     cb4:	68 f1       	brcs	.+90     	; 0xd10 <__addsf3x+0x98>
     cb6:	1a 16       	cp	r1, r26
     cb8:	f0 40       	sbci	r31, 0x00	; 0
     cba:	a2 2f       	mov	r26, r18
     cbc:	23 2f       	mov	r18, r19
     cbe:	34 2f       	mov	r19, r20
     cc0:	44 27       	eor	r20, r20
     cc2:	58 5f       	subi	r21, 0xF8	; 248
     cc4:	f3 cf       	rjmp	.-26     	; 0xcac <__addsf3x+0x34>
     cc6:	46 95       	lsr	r20
     cc8:	37 95       	ror	r19
     cca:	27 95       	ror	r18
     ccc:	a7 95       	ror	r26
     cce:	f0 40       	sbci	r31, 0x00	; 0
     cd0:	53 95       	inc	r21
     cd2:	c9 f7       	brne	.-14     	; 0xcc6 <__addsf3x+0x4e>
     cd4:	7e f4       	brtc	.+30     	; 0xcf4 <__addsf3x+0x7c>
     cd6:	1f 16       	cp	r1, r31
     cd8:	ba 0b       	sbc	r27, r26
     cda:	62 0b       	sbc	r22, r18
     cdc:	73 0b       	sbc	r23, r19
     cde:	84 0b       	sbc	r24, r20
     ce0:	ba f0       	brmi	.+46     	; 0xd10 <__addsf3x+0x98>
     ce2:	91 50       	subi	r25, 0x01	; 1
     ce4:	a1 f0       	breq	.+40     	; 0xd0e <__addsf3x+0x96>
     ce6:	ff 0f       	add	r31, r31
     ce8:	bb 1f       	adc	r27, r27
     cea:	66 1f       	adc	r22, r22
     cec:	77 1f       	adc	r23, r23
     cee:	88 1f       	adc	r24, r24
     cf0:	c2 f7       	brpl	.-16     	; 0xce2 <__addsf3x+0x6a>
     cf2:	0e c0       	rjmp	.+28     	; 0xd10 <__addsf3x+0x98>
     cf4:	ba 0f       	add	r27, r26
     cf6:	62 1f       	adc	r22, r18
     cf8:	73 1f       	adc	r23, r19
     cfa:	84 1f       	adc	r24, r20
     cfc:	48 f4       	brcc	.+18     	; 0xd10 <__addsf3x+0x98>
     cfe:	87 95       	ror	r24
     d00:	77 95       	ror	r23
     d02:	67 95       	ror	r22
     d04:	b7 95       	ror	r27
     d06:	f7 95       	ror	r31
     d08:	9e 3f       	cpi	r25, 0xFE	; 254
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <__addsf3x+0x96>
     d0c:	b3 cf       	rjmp	.-154    	; 0xc74 <__addsf3+0x1e>
     d0e:	93 95       	inc	r25
     d10:	88 0f       	add	r24, r24
     d12:	08 f0       	brcs	.+2      	; 0xd16 <__addsf3x+0x9e>
     d14:	99 27       	eor	r25, r25
     d16:	ee 0f       	add	r30, r30
     d18:	97 95       	ror	r25
     d1a:	87 95       	ror	r24
     d1c:	08 95       	ret

00000d1e <__cmpsf2>:
     d1e:	71 d0       	rcall	.+226    	; 0xe02 <__fp_cmp>
     d20:	08 f4       	brcc	.+2      	; 0xd24 <__cmpsf2+0x6>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	08 95       	ret

00000d26 <__fixsfsi>:
     d26:	04 d0       	rcall	.+8      	; 0xd30 <__fixunssfsi>
     d28:	68 94       	set
     d2a:	b1 11       	cpse	r27, r1
     d2c:	d9 c0       	rjmp	.+434    	; 0xee0 <__fp_szero>
     d2e:	08 95       	ret

00000d30 <__fixunssfsi>:
     d30:	bc d0       	rcall	.+376    	; 0xeaa <__fp_splitA>
     d32:	88 f0       	brcs	.+34     	; 0xd56 <__fixunssfsi+0x26>
     d34:	9f 57       	subi	r25, 0x7F	; 127
     d36:	90 f0       	brcs	.+36     	; 0xd5c <__fixunssfsi+0x2c>
     d38:	b9 2f       	mov	r27, r25
     d3a:	99 27       	eor	r25, r25
     d3c:	b7 51       	subi	r27, 0x17	; 23
     d3e:	a0 f0       	brcs	.+40     	; 0xd68 <__fixunssfsi+0x38>
     d40:	d1 f0       	breq	.+52     	; 0xd76 <__fixunssfsi+0x46>
     d42:	66 0f       	add	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	88 1f       	adc	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	1a f0       	brmi	.+6      	; 0xd52 <__fixunssfsi+0x22>
     d4c:	ba 95       	dec	r27
     d4e:	c9 f7       	brne	.-14     	; 0xd42 <__fixunssfsi+0x12>
     d50:	12 c0       	rjmp	.+36     	; 0xd76 <__fixunssfsi+0x46>
     d52:	b1 30       	cpi	r27, 0x01	; 1
     d54:	81 f0       	breq	.+32     	; 0xd76 <__fixunssfsi+0x46>
     d56:	c3 d0       	rcall	.+390    	; 0xede <__fp_zero>
     d58:	b1 e0       	ldi	r27, 0x01	; 1
     d5a:	08 95       	ret
     d5c:	c0 c0       	rjmp	.+384    	; 0xede <__fp_zero>
     d5e:	67 2f       	mov	r22, r23
     d60:	78 2f       	mov	r23, r24
     d62:	88 27       	eor	r24, r24
     d64:	b8 5f       	subi	r27, 0xF8	; 248
     d66:	39 f0       	breq	.+14     	; 0xd76 <__fixunssfsi+0x46>
     d68:	b9 3f       	cpi	r27, 0xF9	; 249
     d6a:	cc f3       	brlt	.-14     	; 0xd5e <__fixunssfsi+0x2e>
     d6c:	86 95       	lsr	r24
     d6e:	77 95       	ror	r23
     d70:	67 95       	ror	r22
     d72:	b3 95       	inc	r27
     d74:	d9 f7       	brne	.-10     	; 0xd6c <__fixunssfsi+0x3c>
     d76:	3e f4       	brtc	.+14     	; 0xd86 <__fixunssfsi+0x56>
     d78:	90 95       	com	r25
     d7a:	80 95       	com	r24
     d7c:	70 95       	com	r23
     d7e:	61 95       	neg	r22
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	8f 4f       	sbci	r24, 0xFF	; 255
     d84:	9f 4f       	sbci	r25, 0xFF	; 255
     d86:	08 95       	ret

00000d88 <__floatunsisf>:
     d88:	e8 94       	clt
     d8a:	09 c0       	rjmp	.+18     	; 0xd9e <__floatsisf+0x12>

00000d8c <__floatsisf>:
     d8c:	97 fb       	bst	r25, 7
     d8e:	3e f4       	brtc	.+14     	; 0xd9e <__floatsisf+0x12>
     d90:	90 95       	com	r25
     d92:	80 95       	com	r24
     d94:	70 95       	com	r23
     d96:	61 95       	neg	r22
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	8f 4f       	sbci	r24, 0xFF	; 255
     d9c:	9f 4f       	sbci	r25, 0xFF	; 255
     d9e:	99 23       	and	r25, r25
     da0:	a9 f0       	breq	.+42     	; 0xdcc <__floatsisf+0x40>
     da2:	f9 2f       	mov	r31, r25
     da4:	96 e9       	ldi	r25, 0x96	; 150
     da6:	bb 27       	eor	r27, r27
     da8:	93 95       	inc	r25
     daa:	f6 95       	lsr	r31
     dac:	87 95       	ror	r24
     dae:	77 95       	ror	r23
     db0:	67 95       	ror	r22
     db2:	b7 95       	ror	r27
     db4:	f1 11       	cpse	r31, r1
     db6:	f8 cf       	rjmp	.-16     	; 0xda8 <__floatsisf+0x1c>
     db8:	fa f4       	brpl	.+62     	; 0xdf8 <__floatsisf+0x6c>
     dba:	bb 0f       	add	r27, r27
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <__floatsisf+0x36>
     dbe:	60 ff       	sbrs	r22, 0
     dc0:	1b c0       	rjmp	.+54     	; 0xdf8 <__floatsisf+0x6c>
     dc2:	6f 5f       	subi	r22, 0xFF	; 255
     dc4:	7f 4f       	sbci	r23, 0xFF	; 255
     dc6:	8f 4f       	sbci	r24, 0xFF	; 255
     dc8:	9f 4f       	sbci	r25, 0xFF	; 255
     dca:	16 c0       	rjmp	.+44     	; 0xdf8 <__floatsisf+0x6c>
     dcc:	88 23       	and	r24, r24
     dce:	11 f0       	breq	.+4      	; 0xdd4 <__floatsisf+0x48>
     dd0:	96 e9       	ldi	r25, 0x96	; 150
     dd2:	11 c0       	rjmp	.+34     	; 0xdf6 <__floatsisf+0x6a>
     dd4:	77 23       	and	r23, r23
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__floatsisf+0x54>
     dd8:	9e e8       	ldi	r25, 0x8E	; 142
     dda:	87 2f       	mov	r24, r23
     ddc:	76 2f       	mov	r23, r22
     dde:	05 c0       	rjmp	.+10     	; 0xdea <__floatsisf+0x5e>
     de0:	66 23       	and	r22, r22
     de2:	71 f0       	breq	.+28     	; 0xe00 <__floatsisf+0x74>
     de4:	96 e8       	ldi	r25, 0x86	; 134
     de6:	86 2f       	mov	r24, r22
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	2a f0       	brmi	.+10     	; 0xdf8 <__floatsisf+0x6c>
     dee:	9a 95       	dec	r25
     df0:	66 0f       	add	r22, r22
     df2:	77 1f       	adc	r23, r23
     df4:	88 1f       	adc	r24, r24
     df6:	da f7       	brpl	.-10     	; 0xdee <__floatsisf+0x62>
     df8:	88 0f       	add	r24, r24
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	97 f9       	bld	r25, 7
     e00:	08 95       	ret

00000e02 <__fp_cmp>:
     e02:	99 0f       	add	r25, r25
     e04:	00 08       	sbc	r0, r0
     e06:	55 0f       	add	r21, r21
     e08:	aa 0b       	sbc	r26, r26
     e0a:	e0 e8       	ldi	r30, 0x80	; 128
     e0c:	fe ef       	ldi	r31, 0xFE	; 254
     e0e:	16 16       	cp	r1, r22
     e10:	17 06       	cpc	r1, r23
     e12:	e8 07       	cpc	r30, r24
     e14:	f9 07       	cpc	r31, r25
     e16:	c0 f0       	brcs	.+48     	; 0xe48 <__fp_cmp+0x46>
     e18:	12 16       	cp	r1, r18
     e1a:	13 06       	cpc	r1, r19
     e1c:	e4 07       	cpc	r30, r20
     e1e:	f5 07       	cpc	r31, r21
     e20:	98 f0       	brcs	.+38     	; 0xe48 <__fp_cmp+0x46>
     e22:	62 1b       	sub	r22, r18
     e24:	73 0b       	sbc	r23, r19
     e26:	84 0b       	sbc	r24, r20
     e28:	95 0b       	sbc	r25, r21
     e2a:	39 f4       	brne	.+14     	; 0xe3a <__fp_cmp+0x38>
     e2c:	0a 26       	eor	r0, r26
     e2e:	61 f0       	breq	.+24     	; 0xe48 <__fp_cmp+0x46>
     e30:	23 2b       	or	r18, r19
     e32:	24 2b       	or	r18, r20
     e34:	25 2b       	or	r18, r21
     e36:	21 f4       	brne	.+8      	; 0xe40 <__fp_cmp+0x3e>
     e38:	08 95       	ret
     e3a:	0a 26       	eor	r0, r26
     e3c:	09 f4       	brne	.+2      	; 0xe40 <__fp_cmp+0x3e>
     e3e:	a1 40       	sbci	r26, 0x01	; 1
     e40:	a6 95       	lsr	r26
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	81 1d       	adc	r24, r1
     e46:	81 1d       	adc	r24, r1
     e48:	08 95       	ret

00000e4a <__fp_inf>:
     e4a:	97 f9       	bld	r25, 7
     e4c:	9f 67       	ori	r25, 0x7F	; 127
     e4e:	80 e8       	ldi	r24, 0x80	; 128
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	08 95       	ret

00000e56 <__fp_nan>:
     e56:	9f ef       	ldi	r25, 0xFF	; 255
     e58:	80 ec       	ldi	r24, 0xC0	; 192
     e5a:	08 95       	ret

00000e5c <__fp_pscA>:
     e5c:	00 24       	eor	r0, r0
     e5e:	0a 94       	dec	r0
     e60:	16 16       	cp	r1, r22
     e62:	17 06       	cpc	r1, r23
     e64:	18 06       	cpc	r1, r24
     e66:	09 06       	cpc	r0, r25
     e68:	08 95       	ret

00000e6a <__fp_pscB>:
     e6a:	00 24       	eor	r0, r0
     e6c:	0a 94       	dec	r0
     e6e:	12 16       	cp	r1, r18
     e70:	13 06       	cpc	r1, r19
     e72:	14 06       	cpc	r1, r20
     e74:	05 06       	cpc	r0, r21
     e76:	08 95       	ret

00000e78 <__fp_round>:
     e78:	09 2e       	mov	r0, r25
     e7a:	03 94       	inc	r0
     e7c:	00 0c       	add	r0, r0
     e7e:	11 f4       	brne	.+4      	; 0xe84 <__fp_round+0xc>
     e80:	88 23       	and	r24, r24
     e82:	52 f0       	brmi	.+20     	; 0xe98 <__fp_round+0x20>
     e84:	bb 0f       	add	r27, r27
     e86:	40 f4       	brcc	.+16     	; 0xe98 <__fp_round+0x20>
     e88:	bf 2b       	or	r27, r31
     e8a:	11 f4       	brne	.+4      	; 0xe90 <__fp_round+0x18>
     e8c:	60 ff       	sbrs	r22, 0
     e8e:	04 c0       	rjmp	.+8      	; 0xe98 <__fp_round+0x20>
     e90:	6f 5f       	subi	r22, 0xFF	; 255
     e92:	7f 4f       	sbci	r23, 0xFF	; 255
     e94:	8f 4f       	sbci	r24, 0xFF	; 255
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	08 95       	ret

00000e9a <__fp_split3>:
     e9a:	57 fd       	sbrc	r21, 7
     e9c:	90 58       	subi	r25, 0x80	; 128
     e9e:	44 0f       	add	r20, r20
     ea0:	55 1f       	adc	r21, r21
     ea2:	59 f0       	breq	.+22     	; 0xeba <__fp_splitA+0x10>
     ea4:	5f 3f       	cpi	r21, 0xFF	; 255
     ea6:	71 f0       	breq	.+28     	; 0xec4 <__fp_splitA+0x1a>
     ea8:	47 95       	ror	r20

00000eaa <__fp_splitA>:
     eaa:	88 0f       	add	r24, r24
     eac:	97 fb       	bst	r25, 7
     eae:	99 1f       	adc	r25, r25
     eb0:	61 f0       	breq	.+24     	; 0xeca <__fp_splitA+0x20>
     eb2:	9f 3f       	cpi	r25, 0xFF	; 255
     eb4:	79 f0       	breq	.+30     	; 0xed4 <__fp_splitA+0x2a>
     eb6:	87 95       	ror	r24
     eb8:	08 95       	ret
     eba:	12 16       	cp	r1, r18
     ebc:	13 06       	cpc	r1, r19
     ebe:	14 06       	cpc	r1, r20
     ec0:	55 1f       	adc	r21, r21
     ec2:	f2 cf       	rjmp	.-28     	; 0xea8 <__fp_split3+0xe>
     ec4:	46 95       	lsr	r20
     ec6:	f1 df       	rcall	.-30     	; 0xeaa <__fp_splitA>
     ec8:	08 c0       	rjmp	.+16     	; 0xeda <__fp_splitA+0x30>
     eca:	16 16       	cp	r1, r22
     ecc:	17 06       	cpc	r1, r23
     ece:	18 06       	cpc	r1, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	f1 cf       	rjmp	.-30     	; 0xeb6 <__fp_splitA+0xc>
     ed4:	86 95       	lsr	r24
     ed6:	71 05       	cpc	r23, r1
     ed8:	61 05       	cpc	r22, r1
     eda:	08 94       	sec
     edc:	08 95       	ret

00000ede <__fp_zero>:
     ede:	e8 94       	clt

00000ee0 <__fp_szero>:
     ee0:	bb 27       	eor	r27, r27
     ee2:	66 27       	eor	r22, r22
     ee4:	77 27       	eor	r23, r23
     ee6:	cb 01       	movw	r24, r22
     ee8:	97 f9       	bld	r25, 7
     eea:	08 95       	ret

00000eec <__gesf2>:
     eec:	8a df       	rcall	.-236    	; 0xe02 <__fp_cmp>
     eee:	08 f4       	brcc	.+2      	; 0xef2 <__gesf2+0x6>
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	08 95       	ret

00000ef4 <__mulsf3>:
     ef4:	0b d0       	rcall	.+22     	; 0xf0c <__mulsf3x>
     ef6:	c0 cf       	rjmp	.-128    	; 0xe78 <__fp_round>
     ef8:	b1 df       	rcall	.-158    	; 0xe5c <__fp_pscA>
     efa:	28 f0       	brcs	.+10     	; 0xf06 <__mulsf3+0x12>
     efc:	b6 df       	rcall	.-148    	; 0xe6a <__fp_pscB>
     efe:	18 f0       	brcs	.+6      	; 0xf06 <__mulsf3+0x12>
     f00:	95 23       	and	r25, r21
     f02:	09 f0       	breq	.+2      	; 0xf06 <__mulsf3+0x12>
     f04:	a2 cf       	rjmp	.-188    	; 0xe4a <__fp_inf>
     f06:	a7 cf       	rjmp	.-178    	; 0xe56 <__fp_nan>
     f08:	11 24       	eor	r1, r1
     f0a:	ea cf       	rjmp	.-44     	; 0xee0 <__fp_szero>

00000f0c <__mulsf3x>:
     f0c:	c6 df       	rcall	.-116    	; 0xe9a <__fp_split3>
     f0e:	a0 f3       	brcs	.-24     	; 0xef8 <__mulsf3+0x4>

00000f10 <__mulsf3_pse>:
     f10:	95 9f       	mul	r25, r21
     f12:	d1 f3       	breq	.-12     	; 0xf08 <__mulsf3+0x14>
     f14:	95 0f       	add	r25, r21
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	55 1f       	adc	r21, r21
     f1a:	62 9f       	mul	r22, r18
     f1c:	f0 01       	movw	r30, r0
     f1e:	72 9f       	mul	r23, r18
     f20:	bb 27       	eor	r27, r27
     f22:	f0 0d       	add	r31, r0
     f24:	b1 1d       	adc	r27, r1
     f26:	63 9f       	mul	r22, r19
     f28:	aa 27       	eor	r26, r26
     f2a:	f0 0d       	add	r31, r0
     f2c:	b1 1d       	adc	r27, r1
     f2e:	aa 1f       	adc	r26, r26
     f30:	64 9f       	mul	r22, r20
     f32:	66 27       	eor	r22, r22
     f34:	b0 0d       	add	r27, r0
     f36:	a1 1d       	adc	r26, r1
     f38:	66 1f       	adc	r22, r22
     f3a:	82 9f       	mul	r24, r18
     f3c:	22 27       	eor	r18, r18
     f3e:	b0 0d       	add	r27, r0
     f40:	a1 1d       	adc	r26, r1
     f42:	62 1f       	adc	r22, r18
     f44:	73 9f       	mul	r23, r19
     f46:	b0 0d       	add	r27, r0
     f48:	a1 1d       	adc	r26, r1
     f4a:	62 1f       	adc	r22, r18
     f4c:	83 9f       	mul	r24, r19
     f4e:	a0 0d       	add	r26, r0
     f50:	61 1d       	adc	r22, r1
     f52:	22 1f       	adc	r18, r18
     f54:	74 9f       	mul	r23, r20
     f56:	33 27       	eor	r19, r19
     f58:	a0 0d       	add	r26, r0
     f5a:	61 1d       	adc	r22, r1
     f5c:	23 1f       	adc	r18, r19
     f5e:	84 9f       	mul	r24, r20
     f60:	60 0d       	add	r22, r0
     f62:	21 1d       	adc	r18, r1
     f64:	82 2f       	mov	r24, r18
     f66:	76 2f       	mov	r23, r22
     f68:	6a 2f       	mov	r22, r26
     f6a:	11 24       	eor	r1, r1
     f6c:	9f 57       	subi	r25, 0x7F	; 127
     f6e:	50 40       	sbci	r21, 0x00	; 0
     f70:	8a f0       	brmi	.+34     	; 0xf94 <__mulsf3_pse+0x84>
     f72:	e1 f0       	breq	.+56     	; 0xfac <__mulsf3_pse+0x9c>
     f74:	88 23       	and	r24, r24
     f76:	4a f0       	brmi	.+18     	; 0xf8a <__mulsf3_pse+0x7a>
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	bb 1f       	adc	r27, r27
     f7e:	66 1f       	adc	r22, r22
     f80:	77 1f       	adc	r23, r23
     f82:	88 1f       	adc	r24, r24
     f84:	91 50       	subi	r25, 0x01	; 1
     f86:	50 40       	sbci	r21, 0x00	; 0
     f88:	a9 f7       	brne	.-22     	; 0xf74 <__mulsf3_pse+0x64>
     f8a:	9e 3f       	cpi	r25, 0xFE	; 254
     f8c:	51 05       	cpc	r21, r1
     f8e:	70 f0       	brcs	.+28     	; 0xfac <__mulsf3_pse+0x9c>
     f90:	5c cf       	rjmp	.-328    	; 0xe4a <__fp_inf>
     f92:	a6 cf       	rjmp	.-180    	; 0xee0 <__fp_szero>
     f94:	5f 3f       	cpi	r21, 0xFF	; 255
     f96:	ec f3       	brlt	.-6      	; 0xf92 <__mulsf3_pse+0x82>
     f98:	98 3e       	cpi	r25, 0xE8	; 232
     f9a:	dc f3       	brlt	.-10     	; 0xf92 <__mulsf3_pse+0x82>
     f9c:	86 95       	lsr	r24
     f9e:	77 95       	ror	r23
     fa0:	67 95       	ror	r22
     fa2:	b7 95       	ror	r27
     fa4:	f7 95       	ror	r31
     fa6:	e7 95       	ror	r30
     fa8:	9f 5f       	subi	r25, 0xFF	; 255
     faa:	c1 f7       	brne	.-16     	; 0xf9c <__mulsf3_pse+0x8c>
     fac:	fe 2b       	or	r31, r30
     fae:	88 0f       	add	r24, r24
     fb0:	91 1d       	adc	r25, r1
     fb2:	96 95       	lsr	r25
     fb4:	87 95       	ror	r24
     fb6:	97 f9       	bld	r25, 7
     fb8:	08 95       	ret

00000fba <__tablejump2__>:
     fba:	ee 0f       	add	r30, r30
     fbc:	ff 1f       	adc	r31, r31
     fbe:	88 1f       	adc	r24, r24
     fc0:	8b bf       	out	0x3b, r24	; 59
     fc2:	07 90       	elpm	r0, Z+
     fc4:	f6 91       	elpm	r31, Z
     fc6:	e0 2d       	mov	r30, r0
     fc8:	19 94       	eijmp

00000fca <__itoa_ncheck>:
     fca:	bb 27       	eor	r27, r27
     fcc:	4a 30       	cpi	r20, 0x0A	; 10
     fce:	31 f4       	brne	.+12     	; 0xfdc <__itoa_ncheck+0x12>
     fd0:	99 23       	and	r25, r25
     fd2:	22 f4       	brpl	.+8      	; 0xfdc <__itoa_ncheck+0x12>
     fd4:	bd e2       	ldi	r27, 0x2D	; 45
     fd6:	90 95       	com	r25
     fd8:	81 95       	neg	r24
     fda:	9f 4f       	sbci	r25, 0xFF	; 255
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <__utoa_common>

00000fde <__utoa_ncheck>:
     fde:	bb 27       	eor	r27, r27

00000fe0 <__utoa_common>:
     fe0:	fb 01       	movw	r30, r22
     fe2:	55 27       	eor	r21, r21
     fe4:	aa 27       	eor	r26, r26
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	aa 1f       	adc	r26, r26
     fec:	a4 17       	cp	r26, r20
     fee:	10 f0       	brcs	.+4      	; 0xff4 <__utoa_common+0x14>
     ff0:	a4 1b       	sub	r26, r20
     ff2:	83 95       	inc	r24
     ff4:	50 51       	subi	r21, 0x10	; 16
     ff6:	b9 f7       	brne	.-18     	; 0xfe6 <__utoa_common+0x6>
     ff8:	a0 5d       	subi	r26, 0xD0	; 208
     ffa:	aa 33       	cpi	r26, 0x3A	; 58
     ffc:	08 f0       	brcs	.+2      	; 0x1000 <__utoa_common+0x20>
     ffe:	a9 5d       	subi	r26, 0xD9	; 217
    1000:	a1 93       	st	Z+, r26
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	79 f7       	brne	.-34     	; 0xfe4 <__utoa_common+0x4>
    1006:	b1 11       	cpse	r27, r1
    1008:	b1 93       	st	Z+, r27
    100a:	11 92       	st	Z+, r1
    100c:	cb 01       	movw	r24, r22
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <strrev>

00001010 <strrev>:
    1010:	dc 01       	movw	r26, r24
    1012:	fc 01       	movw	r30, r24
    1014:	67 2f       	mov	r22, r23
    1016:	71 91       	ld	r23, Z+
    1018:	77 23       	and	r23, r23
    101a:	e1 f7       	brne	.-8      	; 0x1014 <strrev+0x4>
    101c:	32 97       	sbiw	r30, 0x02	; 2
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <strrev+0x18>
    1020:	7c 91       	ld	r23, X
    1022:	6d 93       	st	X+, r22
    1024:	70 83       	st	Z, r23
    1026:	62 91       	ld	r22, -Z
    1028:	ae 17       	cp	r26, r30
    102a:	bf 07       	cpc	r27, r31
    102c:	c8 f3       	brcs	.-14     	; 0x1020 <strrev+0x10>
    102e:	08 95       	ret

00001030 <_exit>:
    1030:	f8 94       	cli

00001032 <__stop_program>:
    1032:	ff cf       	rjmp	.-2      	; 0x1032 <__stop_program>
